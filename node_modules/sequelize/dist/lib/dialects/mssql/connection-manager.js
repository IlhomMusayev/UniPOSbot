"use strict";var b=Object.defineProperty;var c=(E,e)=>b(E,"name",{value:e,configurable:!0});const C=require("../abstract/connection-manager"),N=require("./async-queue").default,{logger:p}=require("../../utils/logger"),o=require("../../errors"),O=require("../../data-types").mssql,w=require("../parserStore")("mssql"),h=p.debugContext("connection:mssql"),m=p.debugContext("connection:mssql:tedious");class i extends C{constructor(e,n){n.config.port=n.config.port||1433;super(e,n);this.lib=this._loadDialectModule("tedious"),this.refreshTypeParser(O)}_refreshTypeParser(e){w.refresh(e)}_clearTypeParser(){w.clear()}async connect(e){const n={server:e.host,authentication:{type:"default",options:{userName:e.username||void 0,password:e.password||void 0}},options:{port:parseInt(e.port,10),database:e.database,trustServerCertificate:!0}};e.dialectOptions&&(e.dialectOptions.options&&e.dialectOptions.options.instanceName&&delete n.options.port,e.dialectOptions.authentication&&Object.assign(n.authentication,e.dialectOptions.authentication),Object.assign(n.options,e.dialectOptions.options));try{return await new Promise((t,a)=>{const r=new this.lib.Connection(n);r.state===r.STATE.INITIALIZED&&r.connect(),r.queue=new N,r.lib=this.lib;const d=c(s=>{if(r.removeListener("end",u),r.removeListener("error",l),s)return a(s);h("connection acquired"),t(r)},"connectHandler"),u=c(()=>{r.removeListener("connect",d),r.removeListener("error",l),a(new Error("Connection was closed by remote server"))},"endHandler"),l=c(s=>{r.removeListener("connect",d),r.removeListener("end",u),a(s)},"errorHandler");r.once("error",l),r.once("end",u),r.once("connect",d),r.on("error",s=>{switch(s.code){case"ESOCKET":case"ECONNRESET":this.pool.destroy(r)}}),e.dialectOptions&&e.dialectOptions.debug&&r.on("debug",m.log.bind(m))})}catch(t){if(!t.code)throw new o.ConnectionError(t);switch(t.code){case"ESOCKET":throw t.message.includes("connect EHOSTUNREACH")?new o.HostNotReachableError(t):t.message.includes("connect ENETUNREACH")?new o.HostNotReachableError(t):t.message.includes("connect EADDRNOTAVAIL")?new o.HostNotReachableError(t):t.message.includes("getaddrinfo ENOTFOUND")?new o.HostNotFoundError(t):t.message.includes("connect ECONNREFUSED")?new o.ConnectionRefusedError(t):new o.ConnectionError(t);case"ER_ACCESS_DENIED_ERROR":case"ELOGIN":throw new o.AccessDeniedError(t);case"EINVAL":throw new o.InvalidConnectionError(t);default:throw new o.ConnectionError(t)}}}async disconnect(e){if(!e.closed)return e.queue.close(),new Promise(n=>{e.on("end",n),e.close(),h("connection closed")})}validate(e){return e&&e.loggedIn}}c(i,"ConnectionManager"),module.exports=i,module.exports.ConnectionManager=i,module.exports.default=i;
//# sourceMappingURL=connection-manager.js.map
