{
  "version": 3,
  "sources": ["../../../../lib/dialects/postgres/connection-manager.js"],
  "sourcesContent": ["'use strict';\n\nconst _ = require('lodash');\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst { logger } = require('../../utils/logger');\nconst debug = logger.debugContext('connection:pg');\nconst sequelizeErrors = require('../../errors');\nconst semver = require('semver');\nconst dataTypes = require('../../data-types');\nconst moment = require('moment-timezone');\nconst { promisify } = require('util');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 5432;\n    super(dialect, sequelize);\n\n    const pgLib = this._loadDialectModule('pg');\n    this.lib = this.sequelize.config.native ? pgLib.native : pgLib;\n\n    this._clearDynamicOIDs();\n    this._clearTypeParser();\n    this.refreshTypeParser(dataTypes.postgres);\n  }\n\n  // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\n  _refreshTypeParser(dataType) {\n    const arrayParserBuilder = parser => {\n      return value => this.lib.types.arrayParser.create(value, parser).parse();\n    };\n    const rangeParserBuilder = parser => {\n      return value => dataType.parse(value, { parser });\n    };\n\n    // Set range parsers\n    if (dataType.key.toLowerCase() === 'range') {\n      for (const name in this.nameOidMap) {\n        const entry = this.nameOidMap[name];\n        if (! entry.rangeOid) continue;\n\n        const rangeParser = rangeParserBuilder(this.getTypeParser(entry.oid));\n        const arrayRangeParser = arrayParserBuilder(rangeParser);\n\n        this.oidParserMap.set(entry.rangeOid, rangeParser);\n        if (! entry.arrayRangeOid) continue;\n        this.oidParserMap.set(entry.arrayRangeOid, arrayRangeParser);\n      }\n      return;\n    }\n\n    // Create parsers for normal or enum data types\n    const parser = value => dataType.parse(value);\n    const arrayParser = arrayParserBuilder(parser);\n\n    // Set enum parsers\n    if (dataType.key.toLowerCase() === 'enum') {\n      this.enumOids.oids.forEach(oid => {\n        this.oidParserMap.set(oid, parser);\n      });\n      this.enumOids.arrayOids.forEach(arrayOid => {\n        this.oidParserMap.set(arrayOid, arrayParser);\n      });\n      return;\n    }\n\n    // Set parsers for normal data types\n    dataType.types.postgres.forEach(name => {\n      if (! this.nameOidMap[name]) return;\n      this.oidParserMap.set(this.nameOidMap[name].oid, parser);\n\n      if (! this.nameOidMap[name].arrayOid) return;\n      this.oidParserMap.set(this.nameOidMap[name].arrayOid, arrayParser);\n    });\n  }\n\n  _clearTypeParser() {\n    this.oidParserMap = new Map();\n  }\n\n  getTypeParser(oid, ...args) {\n    if (this.oidParserMap.get(oid)) return this.oidParserMap.get(oid);\n\n    return this.lib.types.getTypeParser(oid, ...args);\n  }\n\n  async connect(config) {\n    config.user = config.username;\n    const connectionConfig = _.pick(config, [\n      'user', 'password', 'host', 'database', 'port'\n    ]);\n\n    connectionConfig.types = {\n      getTypeParser: ConnectionManager.prototype.getTypeParser.bind(this)\n    };\n\n    if (config.dialectOptions) {\n      _.merge(connectionConfig,\n        _.pick(config.dialectOptions, [\n        // see [http://www.postgresql.org/docs/9.3/static/runtime-config-logging.html#GUC-APPLICATION-NAME]\n          'application_name',\n          // choose the SSL mode with the PGSSLMODE environment variable\n          // object format: [https://github.com/brianc/node-postgres/blob/ee19e74ffa6309c9c5e8e01746261a8f651661f8/lib/connection.js#L79]\n          // see also [http://www.postgresql.org/docs/9.3/static/libpq-ssl.html]\n          'ssl',\n          // In addition to the values accepted by the corresponding server,\n          // you can use \"auto\" to determine the right encoding from the\n          // current locale in the client (LC_CTYPE environment variable on Unix systems)\n          'client_encoding',\n          // !! DO NOT SET THIS TO TRUE !!\n          // (unless you know what you're doing)\n          // see [http://www.postgresql.org/message-id/flat/bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com#bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com]\n          'binary',\n          // This should help with backends incorrectly considering idle clients to be dead and prematurely disconnecting them.\n          // this feature has been added in pg module v6.0.0, check pg/CHANGELOG.md\n          'keepAlive',\n          // Times out queries after a set time in milliseconds in the database end. Added in pg v7.3\n          'statement_timeout',\n          // Times out queries after a set time in milliseconds in client end, query would be still running in database end.\n          'query_timeout',\n          // Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds. Added in pg v7.17.0 only supported in postgres >= 10\n          'idle_in_transaction_session_timeout',\n          // Postgres allows additional session variables to be configured in the connection string in the `options` param.\n          // see [https://www.postgresql.org/docs/14/libpq-connect.html#LIBPQ-CONNECT-OPTIONS]\n          'options'\n        ]));\n    }\n\n    const connection = await new Promise((resolve, reject) => {\n      let responded = false;\n\n      const connection = new this.lib.Client(connectionConfig);\n\n      const parameterHandler = message => {\n        switch (message.parameterName) {\n          case 'server_version':\n            if (this.sequelize.options.databaseVersion === 0) {\n              const version = semver.coerce(message.parameterValue).version;\n              this.sequelize.options.databaseVersion = semver.valid(version)\n                ? version\n                : this.dialect.defaultVersion;\n            }\n            break;\n          case 'standard_conforming_strings':\n            connection['standard_conforming_strings'] = message.parameterValue;\n            break;\n        }\n      };\n\n      const endHandler = () => {\n        debug('connection timeout');\n        if (!responded) {\n          reject(new sequelizeErrors.ConnectionTimedOutError(new Error('Connection timed out')));\n        }\n      };\n\n      // If we didn't ever hear from the client.connect() callback the connection timeout\n      // node-postgres does not treat this as an error since no active query was ever emitted\n      connection.once('end', endHandler);\n\n      if (!this.sequelize.config.native) {\n        // Receive various server parameters for further configuration\n        connection.connection.on('parameterStatus', parameterHandler);\n      }\n\n      connection.connect(err => {\n        responded = true;\n\n        if (!this.sequelize.config.native) {\n          // remove parameter handler\n          connection.connection.removeListener('parameterStatus', parameterHandler);\n        }\n\n        if (err) {\n          if (err.code) {\n            switch (err.code) {\n              case 'ECONNREFUSED':\n                reject(new sequelizeErrors.ConnectionRefusedError(err));\n                break;\n              case 'ENOTFOUND':\n                reject(new sequelizeErrors.HostNotFoundError(err));\n                break;\n              case 'EHOSTUNREACH':\n                reject(new sequelizeErrors.HostNotReachableError(err));\n                break;\n              case 'EINVAL':\n                reject(new sequelizeErrors.InvalidConnectionError(err));\n                break;\n              default:\n                reject(new sequelizeErrors.ConnectionError(err));\n                break;\n            }\n          } else {\n            reject(new sequelizeErrors.ConnectionError(err));\n          }\n        } else {\n          debug('connection acquired');\n          connection.removeListener('end', endHandler);\n          resolve(connection);\n        }\n      });\n    });\n\n    let query = '';\n\n    if (this.sequelize.options.standardConformingStrings !== false && connection['standard_conforming_strings'] !== 'on') {\n      // Disable escape characters in strings\n      // see https://github.com/sequelize/sequelize/issues/3545 (security issue)\n      // see https://www.postgresql.org/docs/current/static/runtime-config-compatible.html#GUC-STANDARD-CONFORMING-STRINGS\n      query += 'SET standard_conforming_strings=on;';\n    }\n\n    if (this.sequelize.options.clientMinMessages !== false) {\n      query += `SET client_min_messages TO ${this.sequelize.options.clientMinMessages};`;\n    }\n\n    if (!this.sequelize.config.keepDefaultTimezone) {\n      const isZone = !!moment.tz.zone(this.sequelize.options.timezone);\n      if (isZone) {\n        query += `SET TIME ZONE '${this.sequelize.options.timezone}';`;\n      } else {\n        query += `SET TIME ZONE INTERVAL '${this.sequelize.options.timezone}' HOUR TO MINUTE;`;\n      }\n    }\n\n    if (query) {\n      await connection.query(query);\n    }\n    if (Object.keys(this.nameOidMap).length === 0 &&\n      this.enumOids.oids.length === 0 &&\n      this.enumOids.arrayOids.length === 0) {\n      await this._refreshDynamicOIDs(connection);\n    }\n    // Don't let a Postgres restart (or error) to take down the whole app\n    connection.on('error', error => {\n      connection._invalid = true;\n      debug(`connection error ${error.code || error.message}`);\n      this.pool.destroy(connection);\n    });\n\n    return connection;\n  }\n\n  async disconnect(connection) {\n    if (connection._ending) {\n      debug('connection tried to disconnect but was already at ENDING state');\n      return;\n    }\n\n    return await promisify(callback => connection.end(callback))();\n  }\n\n  validate(connection) {\n    return !connection._invalid && !connection._ending;\n  }\n\n  async _refreshDynamicOIDs(connection) {\n    const databaseVersion = this.sequelize.options.databaseVersion;\n    const supportedVersion = '8.3.0';\n\n    // Check for supported version\n    if ( (databaseVersion && semver.gte(databaseVersion, supportedVersion)) === false) {\n      return;\n    }\n\n    const results = await (connection || this.sequelize).query(\n      'WITH ranges AS (' +\n      '  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,' +\n      '         pg_type.typarray AS rngtyparray, pg_range.rngsubtype' +\n      '    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid' +\n      ')' +\n      'SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,' +\n      '       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray' +\n      '  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype' +\n      ' WHERE (pg_type.typtype IN(\\'b\\', \\'e\\'));'\n    );\n\n    let result = Array.isArray(results) ? results.pop() : results;\n\n    // When searchPath is prepended then two statements are executed and the result is\n    // an array of those two statements. First one is the SET search_path and second is\n    // the SELECT query result.\n    if (Array.isArray(result)) {\n      if (result[0].command === 'SET') {\n        result = result.pop();\n      }\n    }\n\n    const newNameOidMap = {};\n    const newEnumOids = { oids: [], arrayOids: [] };\n\n    for (const row of result.rows) {\n      // Mapping enums, handled separatedly\n      if (row.typtype === 'e') {\n        newEnumOids.oids.push(row.oid);\n        if (row.typarray) newEnumOids.arrayOids.push(row.typarray);\n        continue;\n      }\n\n      // Mapping base types and their arrays\n      newNameOidMap[row.typname] = { oid: row.oid };\n      if (row.typarray) newNameOidMap[row.typname].arrayOid = row.typarray;\n\n      // Mapping ranges(of base types) and their arrays\n      if (row.rngtypid) {\n        newNameOidMap[row.typname].rangeOid = row.rngtypid;\n        if (row.rngtyparray) newNameOidMap[row.typname].arrayRangeOid = row.rngtyparray;\n      }\n    }\n\n    // Replace all OID mappings. Avoids temporary empty OID mappings.\n    this.nameOidMap = newNameOidMap;\n    this.enumOids = newEnumOids;\n\n    this.refreshTypeParser(dataTypes.postgres);\n  }\n\n  _clearDynamicOIDs() {\n    this.nameOidMap = {};\n    this.enumOids = { oids: [], arrayOids: [] };\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"],
  "mappings": "4FAEA,KAAM,GAAI,QAAQ,UACZ,EAA4B,QAAQ,kCACpC,CAAE,UAAW,QAAQ,sBACrB,EAAQ,EAAO,aAAa,iBAC5B,EAAkB,QAAQ,gBAC1B,EAAS,QAAQ,UACjB,EAAY,QAAQ,oBACpB,EAAS,QAAQ,mBACjB,CAAE,aAAc,QAAQ,QAE9B,eAAgC,EAA0B,CACxD,YAAY,EAAS,EAAW,CAC9B,EAAU,OAAO,KAAO,EAAU,OAAO,MAAQ,KACjD,MAAM,EAAS,GAEf,KAAM,GAAQ,KAAK,mBAAmB,MACtC,KAAK,IAAM,KAAK,UAAU,OAAO,OAAS,EAAM,OAAS,EAEzD,KAAK,oBACL,KAAK,mBACL,KAAK,kBAAkB,EAAU,UAInC,mBAAmB,EAAU,CAC3B,KAAM,GAAqB,KAClB,GAAS,KAAK,IAAI,MAAM,YAAY,OAAO,EAAO,GAAQ,QADxC,sBAGrB,EAAqB,KAClB,GAAS,EAAS,MAAM,EAAO,CAAE,WADf,sBAK3B,GAAI,EAAS,IAAI,gBAAkB,QAAS,CAC1C,SAAW,KAAQ,MAAK,WAAY,CAClC,KAAM,GAAQ,KAAK,WAAW,GAC9B,GAAI,CAAE,EAAM,SAAU,SAEtB,KAAM,GAAc,EAAmB,KAAK,cAAc,EAAM,MAC1D,EAAmB,EAAmB,GAG5C,AADA,KAAK,aAAa,IAAI,EAAM,SAAU,GAClC,EAAE,EAAM,eACZ,KAAK,aAAa,IAAI,EAAM,cAAe,GAE7C,OAIF,KAAM,GAAS,KAAS,EAAS,MAAM,GAAxB,UACT,EAAc,EAAmB,GAGvC,GAAI,EAAS,IAAI,gBAAkB,OAAQ,CACzC,KAAK,SAAS,KAAK,QAAQ,GAAO,CAChC,KAAK,aAAa,IAAI,EAAK,KAE7B,KAAK,SAAS,UAAU,QAAQ,GAAY,CAC1C,KAAK,aAAa,IAAI,EAAU,KAElC,OAIF,EAAS,MAAM,SAAS,QAAQ,GAAQ,CACtC,AAAI,CAAE,KAAK,WAAW,IACtB,MAAK,aAAa,IAAI,KAAK,WAAW,GAAM,IAAK,GAE7C,EAAE,KAAK,WAAW,GAAM,UAC5B,KAAK,aAAa,IAAI,KAAK,WAAW,GAAM,SAAU,MAI1D,kBAAmB,CACjB,KAAK,aAAe,GAAI,KAG1B,cAAc,KAAQ,EAAM,CAC1B,MAAI,MAAK,aAAa,IAAI,GAAa,KAAK,aAAa,IAAI,GAEtD,KAAK,IAAI,MAAM,cAAc,EAAK,GAAG,QAGxC,SAAQ,EAAQ,CACpB,EAAO,KAAO,EAAO,SACrB,KAAM,GAAmB,EAAE,KAAK,EAAQ,CACtC,OAAQ,WAAY,OAAQ,WAAY,SAG1C,EAAiB,MAAQ,CACvB,cAAe,EAAkB,UAAU,cAAc,KAAK,OAG5D,EAAO,gBACT,EAAE,MAAM,EACN,EAAE,KAAK,EAAO,eAAgB,CAE5B,mBAIA,MAIA,kBAIA,SAGA,YAEA,oBAEA,gBAEA,sCAGA,aAIN,KAAM,GAAa,KAAM,IAAI,SAAQ,CAAC,EAAS,IAAW,CACxD,GAAI,GAAY,GAEhB,KAAM,GAAa,GAAI,MAAK,IAAI,OAAO,GAEjC,EAAmB,KAAW,CAClC,OAAQ,EAAQ,mBACT,iBACH,GAAI,KAAK,UAAU,QAAQ,kBAAoB,EAAG,CAChD,KAAM,GAAU,EAAO,OAAO,EAAQ,gBAAgB,QACtD,KAAK,UAAU,QAAQ,gBAAkB,EAAO,MAAM,GAClD,EACA,KAAK,QAAQ,eAEnB,UACG,8BACH,EAAW,4BAAiC,EAAQ,eACpD,QAZmB,oBAgBnB,EAAa,MAAM,CACvB,EAAM,sBACD,GACH,EAAO,GAAI,GAAgB,wBAAwB,GAAI,OAAM,2BAH9C,cASnB,EAAW,KAAK,MAAO,GAElB,KAAK,UAAU,OAAO,QAEzB,EAAW,WAAW,GAAG,kBAAmB,GAG9C,EAAW,QAAQ,GAAO,CAQxB,GAPA,EAAY,GAEP,KAAK,UAAU,OAAO,QAEzB,EAAW,WAAW,eAAe,kBAAmB,GAGtD,EACF,GAAI,EAAI,KACN,OAAQ,EAAI,UACL,eACH,EAAO,GAAI,GAAgB,uBAAuB,IAClD,UACG,YACH,EAAO,GAAI,GAAgB,kBAAkB,IAC7C,UACG,eACH,EAAO,GAAI,GAAgB,sBAAsB,IACjD,UACG,SACH,EAAO,GAAI,GAAgB,uBAAuB,IAClD,cAEA,EAAO,GAAI,GAAgB,gBAAgB,IAC3C,UAGJ,GAAO,GAAI,GAAgB,gBAAgB,QAG7C,GAAM,uBACN,EAAW,eAAe,MAAO,GACjC,EAAQ,OAKd,GAAI,GAAQ,GAEZ,MAAI,MAAK,UAAU,QAAQ,4BAA8B,IAAS,EAAW,8BAAmC,MAI9G,IAAS,uCAGP,KAAK,UAAU,QAAQ,oBAAsB,IAC/C,IAAS,8BAA8B,KAAK,UAAU,QAAQ,sBAG3D,KAAK,UAAU,OAAO,qBAEzB,CADe,CAAC,CAAC,EAAO,GAAG,KAAK,KAAK,UAAU,QAAQ,UAErD,GAAS,kBAAkB,KAAK,UAAU,QAAQ,aAElD,GAAS,2BAA2B,KAAK,UAAU,QAAQ,6BAI3D,GACF,KAAM,GAAW,MAAM,GAErB,OAAO,KAAK,KAAK,YAAY,SAAW,GAC1C,KAAK,SAAS,KAAK,SAAW,GAC9B,KAAK,SAAS,UAAU,SAAW,GACnC,KAAM,MAAK,oBAAoB,GAGjC,EAAW,GAAG,QAAS,GAAS,CAC9B,EAAW,SAAW,GACtB,EAAM,oBAAoB,EAAM,MAAQ,EAAM,WAC9C,KAAK,KAAK,QAAQ,KAGb,OAGH,YAAW,EAAY,CAC3B,GAAI,EAAW,QAAS,CACtB,EAAM,kEACN,OAGF,MAAO,MAAM,GAAU,GAAY,EAAW,IAAI,MAGpD,SAAS,EAAY,CACnB,MAAO,CAAC,EAAW,UAAY,CAAC,EAAW,aAGvC,qBAAoB,EAAY,CACpC,KAAM,GAAkB,KAAK,UAAU,QAAQ,gBACzC,EAAmB,QAGzB,GAAM,IAAmB,EAAO,IAAI,EAAiB,MAAuB,GAC1E,OAGF,KAAM,GAAU,KAAO,IAAc,KAAK,WAAW,MACnD,0cAWF,GAAI,GAAS,MAAM,QAAQ,GAAW,EAAQ,MAAQ,EAKtD,AAAI,MAAM,QAAQ,IACZ,EAAO,GAAG,UAAY,OACxB,GAAS,EAAO,OAIpB,KAAM,GAAgB,GAChB,EAAc,CAAE,KAAM,GAAI,UAAW,IAE3C,SAAW,KAAO,GAAO,KAAM,CAE7B,GAAI,EAAI,UAAY,IAAK,CACvB,EAAY,KAAK,KAAK,EAAI,KACtB,EAAI,UAAU,EAAY,UAAU,KAAK,EAAI,UACjD,SAIF,EAAc,EAAI,SAAW,CAAE,IAAK,EAAI,KACpC,EAAI,UAAU,GAAc,EAAI,SAAS,SAAW,EAAI,UAGxD,EAAI,UACN,GAAc,EAAI,SAAS,SAAW,EAAI,SACtC,EAAI,aAAa,GAAc,EAAI,SAAS,cAAgB,EAAI,cAKxE,KAAK,WAAa,EAClB,KAAK,SAAW,EAEhB,KAAK,kBAAkB,EAAU,UAGnC,mBAAoB,CAClB,KAAK,WAAa,GAClB,KAAK,SAAW,CAAE,KAAM,GAAI,UAAW,KAlT3C,yBAsTA,OAAO,QAAU,EACjB,OAAO,QAAQ,kBAAoB,EACnC,OAAO,QAAQ,QAAU",
  "names": []
}
