{
  "version": 3,
  "sources": ["../../../../lib/dialects/sqlite/query-interface.js"],
  "sourcesContent": ["'use strict';\n\nconst sequelizeErrors = require('../../errors');\nconst QueryTypes = require('../../query-types');\nconst { QueryInterface } = require('../abstract/query-interface');\nconst { cloneDeep } = require('../../utils');\nconst _ = require('lodash');\n\n/**\n * The interface that Sequelize uses to talk with SQLite database\n */\nclass SQLiteQueryInterface extends QueryInterface {\n  /**\n   * A wrapper that fixes SQLite's inability to remove columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but without the obsolete column.\n   *\n   * @override\n   */\n  async removeColumn(tableName, attributeName, options) {\n    options = options || {};\n\n    const fields = await this.describeTable(tableName, options);\n    delete fields[attributeName];\n\n    const sql = this.queryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * A wrapper that fixes SQLite's inability to change columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but with a modified version of the respective column.\n   *\n   * @override\n   */\n  async changeColumn(tableName, attributeName, dataTypeOrOptions, options) {\n    options = options || {};\n\n    const fields = await this.describeTable(tableName, options);\n    Object.assign(fields[attributeName], this.normalizeAttribute(dataTypeOrOptions));\n\n    const sql = this.queryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * A wrapper that fixes SQLite's inability to rename columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but with a renamed version of the respective column.\n   *\n   * @override\n   */\n  async renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n    options = options || {};\n    const fields = await this.assertTableHasColumn(tableName, attrNameBefore, options);\n\n    fields[attrNameAfter] = { ...fields[attrNameBefore] };\n    delete fields[attrNameBefore];\n\n    const sql = this.queryGenerator.renameColumnQuery(tableName, attrNameBefore, attrNameAfter, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * @override\n   */\n  async removeConstraint(tableName, constraintName, options) {\n    let createTableSql;\n\n    const constraints = await this.showConstraint(tableName, constraintName);\n    // sqlite can't show only one constraint, so we find here the one to remove\n    const constraint = constraints.find(constaint => constaint.constraintName === constraintName);\n\n    if (!constraint) {\n      throw new sequelizeErrors.UnknownConstraintError({\n        message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n        constraint: constraintName,\n        table: tableName\n      });\n    }\n    createTableSql = constraint.sql;\n    constraint.constraintName = this.queryGenerator.quoteIdentifier(constraint.constraintName);\n    let constraintSnippet = `, CONSTRAINT ${constraint.constraintName} ${constraint.constraintType} ${constraint.constraintCondition}`;\n\n    if (constraint.constraintType === 'FOREIGN KEY') {\n      const referenceTableName = this.queryGenerator.quoteTable(constraint.referenceTableName);\n      constraint.referenceTableKeys = constraint.referenceTableKeys.map(columnName => this.queryGenerator.quoteIdentifier(columnName));\n      const referenceTableKeys = constraint.referenceTableKeys.join(', ');\n      constraintSnippet += ` REFERENCES ${referenceTableName} (${referenceTableKeys})`;\n      constraintSnippet += ` ON UPDATE ${constraint.updateAction}`;\n      constraintSnippet += ` ON DELETE ${constraint.deleteAction}`;\n    }\n\n    createTableSql = createTableSql.replace(constraintSnippet, '');\n    createTableSql += ';';\n\n    const fields = await this.describeTable(tableName, options);\n\n    const sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * @override\n   */\n  async addConstraint(tableName, options) {\n    if (!options.fields) {\n      throw new Error('Fields must be specified through options.fields');\n    }\n\n    if (!options.type) {\n      throw new Error('Constraint type must be specified through options.type');\n    }\n\n    options = cloneDeep(options);\n\n    const constraintSnippet = this.queryGenerator.getConstraintSnippet(tableName, options);\n    const describeCreateTableSql = this.queryGenerator.describeCreateTableQuery(tableName);\n\n    const constraints = await this.sequelize.query(describeCreateTableSql, { ...options, type: QueryTypes.SELECT, raw: true });\n    let sql = constraints[0].sql;\n    const index = sql.length - 1;\n    //Replace ending ')' with constraint snippet - Simulates String.replaceAt\n    //http://stackoverflow.com/questions/1431094\n    const createTableSql = `${sql.substr(0, index)}, ${constraintSnippet})${sql.substr(index + 1)};`;\n\n    const fields = await this.describeTable(tableName, options);\n    sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * @override\n   */\n  async getForeignKeyReferencesForTable(tableName, options) {\n    const database = this.sequelize.config.database;\n    const query = this.queryGenerator.getForeignKeysQuery(tableName, database);\n    const result = await this.sequelize.query(query, options);\n    return result.map(row => ({\n      tableName,\n      columnName: row.from,\n      referencedTableName: row.table,\n      referencedColumnName: row.to,\n      tableCatalog: database,\n      referencedTableCatalog: database\n    }));\n  }\n\n  /**\n   * @override\n   */\n  async dropAllTables(options) {\n    options = options || {};\n    const skip = options.skip || [];\n\n    const tableNames = await this.showAllTables(options);\n    await this.sequelize.query('PRAGMA foreign_keys = OFF', options);\n    await this._dropAllTables(tableNames, skip, options);\n    await this.sequelize.query('PRAGMA foreign_keys = ON', options);\n  }\n\n  /**\n   * @override\n   */\n  async describeTable(tableName, options) {\n    let schema = null;\n    let schemaDelimiter = null;\n\n    if (typeof options === 'string') {\n      schema = options;\n    } else if (typeof options === 'object' && options !== null) {\n      schema = options.schema || null;\n      schemaDelimiter = options.schemaDelimiter || null;\n    }\n\n    if (typeof tableName === 'object' && tableName !== null) {\n      schema = tableName.schema;\n      tableName = tableName.tableName;\n    }\n\n    const sql = this.queryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\n    options = { ...options, type: QueryTypes.DESCRIBE };\n    const sqlIndexes = this.queryGenerator.showIndexesQuery(tableName);\n\n    try {\n      const data = await this.sequelize.query(sql, options);\n      /*\n       * If no data is returned from the query, then the table name may be wrong.\n       * Query generators that use information_schema for retrieving table info will just return an empty result set,\n       * it will not throw an error like built-ins do (e.g. DESCRIBE on MySql).\n       */\n      if (_.isEmpty(data)) {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      const indexes = await this.sequelize.query(sqlIndexes, options);\n      for (const prop in data) {\n        data[prop].unique = false;\n      }\n      for (const index of indexes) {\n        for (const field of index.fields) {\n          if (index.unique !== undefined) {\n            data[field.attribute].unique = index.unique;\n          }\n        }\n      }\n\n      const foreignKeys = await this.getForeignKeyReferencesForTable(tableName, options);\n      for (const foreignKey of foreignKeys) {\n        data[foreignKey.columnName].references = {\n          model: foreignKey.referencedTableName,\n          key: foreignKey.referencedColumnName\n        };\n      }\n\n      return data;\n    } catch (e) {\n      if (e.original && e.original.code === 'ER_NO_SUCH_TABLE') {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      throw e;\n    }\n  }\n}\n\nexports.SQLiteQueryInterface = SQLiteQueryInterface;\n"],
  "mappings": "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",
  "names": []
}
