{
  "version": 3,
  "sources": ["../../../../lib/dialects/mysql/query-interface.js"],
  "sourcesContent": ["'use strict';\n\nconst sequelizeErrors = require('../../errors');\nconst { QueryInterface } = require('../abstract/query-interface');\nconst QueryTypes = require('../../query-types');\n\n/**\n * The interface that Sequelize uses to talk with MySQL/MariaDB database\n */\nclass MySQLQueryInterface extends QueryInterface {\n  /**\n   * A wrapper that fixes MySQL's inability to cleanly remove columns from existing tables if they have a foreign key constraint.\n   *\n   * @override\n   */\n  async removeColumn(tableName, columnName, options) {\n    options = options || {};\n\n    const [results] = await this.sequelize.query(\n      this.queryGenerator.getForeignKeyQuery(tableName.tableName ? tableName : {\n        tableName,\n        schema: this.sequelize.config.database\n      }, columnName),\n      { raw: true, ...options }\n    );\n\n    //Exclude primary key constraint\n    if (results.length && results[0].constraint_name !== 'PRIMARY') {\n      await Promise.all(results.map(constraint => this.sequelize.query(\n        this.queryGenerator.dropForeignKeyQuery(tableName, constraint.constraint_name),\n        { raw: true, ...options }\n      )));\n    }\n\n    return await this.sequelize.query(\n      this.queryGenerator.removeColumnQuery(tableName, columnName),\n      { raw: true, ...options }\n    );\n  }\n\n  /**\n   * @override\n   */\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = { ...options };\n\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n\n    const model = options.model;\n    const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * @override\n   */\n  async removeConstraint(tableName, constraintName, options) {\n    const sql = this.queryGenerator.showConstraintsQuery(\n      tableName.tableName ? tableName : {\n        tableName,\n        schema: this.sequelize.config.database\n      }, constraintName);\n\n    const constraints = await this.sequelize.query(sql, { ...options,\n      type: this.sequelize.QueryTypes.SHOWCONSTRAINTS });\n\n    const constraint = constraints[0];\n    let query;\n    if (!constraint || !constraint.constraintType) {\n      throw new sequelizeErrors.UnknownConstraintError(\n        {\n          message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n          constraint: constraintName,\n          table: tableName\n        });\n    }\n\n    if (constraint.constraintType === 'FOREIGN KEY') {\n      query = this.queryGenerator.dropForeignKeyQuery(tableName, constraintName);\n    } else {\n      query = this.queryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);\n    }\n\n    return await this.sequelize.query(query, options);\n  }\n}\n\nexports.MySQLQueryInterface = MySQLQueryInterface;\n"],
  "mappings": "6eAEA,KAAM,GAAkB,QAAQ,gBAC1B,CAAE,kBAAmB,QAAQ,+BAC7B,EAAa,QAAQ,qBAK3B,eAAkC,EAAe,MAMzC,cAAa,EAAW,EAAY,EAAS,CACjD,EAAU,GAAW,GAErB,KAAM,CAAC,GAAW,KAAM,MAAK,UAAU,MACrC,KAAK,eAAe,mBAAmB,EAAU,UAAY,EAAY,CACvE,YACA,OAAQ,KAAK,UAAU,OAAO,UAC7B,GACH,GAAE,IAAK,IAAS,IAIlB,MAAI,GAAQ,QAAU,EAAQ,GAAG,kBAAoB,WACnD,KAAM,SAAQ,IAAI,EAAQ,IAAI,GAAc,KAAK,UAAU,MACzD,KAAK,eAAe,oBAAoB,EAAW,EAAW,iBAC9D,GAAE,IAAK,IAAS,MAIb,KAAM,MAAK,UAAU,MAC1B,KAAK,eAAe,kBAAkB,EAAW,GACjD,GAAE,IAAK,IAAS,SAOd,QAAO,EAAW,EAAc,EAAc,EAAO,EAAS,CAClE,EAAU,KAAK,GAEf,EAAQ,KAAO,EAAW,OAC1B,EAAQ,kBAAoB,OAAO,KAAK,GAExC,KAAM,GAAQ,EAAQ,MAChB,EAAM,KAAK,eAAe,YAAY,EAAW,EAAc,EAAM,cAAe,GAC1F,MAAO,MAAM,MAAK,UAAU,MAAM,EAAK,QAMnC,kBAAiB,EAAW,EAAgB,EAAS,CACzD,KAAM,GAAM,KAAK,eAAe,qBAC9B,EAAU,UAAY,EAAY,CAChC,YACA,OAAQ,KAAK,UAAU,OAAO,UAC7B,GAKC,EAAa,AAHC,MAAM,MAAK,UAAU,MAAM,EAAK,OAAK,GAAL,CAClD,KAAM,KAAK,UAAU,WAAW,oBAEH,GAC/B,GAAI,GACJ,GAAI,CAAC,GAAc,CAAC,EAAW,eAC7B,KAAM,IAAI,GAAgB,uBACxB,CACE,QAAS,cAAc,cAA2B,mBAClD,WAAY,EACZ,MAAO,IAIb,MAAI,GAAW,iBAAmB,cAChC,EAAQ,KAAK,eAAe,oBAAoB,EAAW,GAE3D,EAAQ,KAAK,eAAe,iBAAiB,EAAW,UAAW,EAAW,gBAGzE,KAAM,MAAK,UAAU,MAAM,EAAO,IA3E7C,2BA+EA,QAAQ,oBAAsB",
  "names": []
}
