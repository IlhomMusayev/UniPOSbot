{
  "version": 3,
  "sources": ["../../../../lib/dialects/mysql/connection-manager.js"],
  "sourcesContent": ["'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst SequelizeErrors = require('../../errors');\nconst { logger } = require('../../utils/logger');\nconst DataTypes = require('../../data-types').mysql;\nconst momentTz = require('moment-timezone');\nconst debug = logger.debugContext('connection:mysql');\nconst parserStore = require('../parserStore')('mysql');\nconst { promisify } = require('util');\n\n/**\n * MySQL Connection Manager\n *\n * Get connections, validate and disconnect them.\n * AbstractConnectionManager pooling use it to handle MySQL specific connections\n * Use https://github.com/sidorares/node-mysql2 to connect with MySQL server\n *\n * @private\n */\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('mysql2');\n    this.refreshTypeParser(DataTypes);\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n    return next();\n  }\n\n  /**\n   * Connect with MySQL database based on config, Handle any errors in connection\n   * Set the pool handlers on connection.error\n   * Also set proper timezone once connection is connected.\n   *\n   * @param {object} config\n   * @returns {Promise<Connection>}\n   * @private\n   */\n  async connect(config) {\n    const connectionConfig = {\n      host: config.host,\n      port: config.port,\n      user: config.username,\n      flags: '-FOUND_ROWS',\n      password: config.password,\n      database: config.database,\n      timezone: this.sequelize.options.timezone,\n      typeCast: ConnectionManager._typecast.bind(this),\n      bigNumberStrings: false,\n      supportBigNumbers: true,\n      ...config.dialectOptions\n    };\n\n    try {\n      const connection = await new Promise((resolve, reject) => {\n        const connection = this.lib.createConnection(connectionConfig);\n\n        const errorHandler = e => {\n          // clean up connect & error event if there is error\n          connection.removeListener('connect', connectHandler);\n          connection.removeListener('error', connectHandler);\n          reject(e);\n        };\n\n        const connectHandler = () => {\n          // clean up error event if connected\n          connection.removeListener('error', errorHandler);\n          resolve(connection);\n        };\n\n        // don't use connection.once for error event handling here\n        // mysql2 emit error two times in case handshake was failed\n        // first error is protocol_lost and second is timeout\n        // if we will use `once.error` node process will crash on 2nd error emit\n        connection.on('error', errorHandler);\n        connection.once('connect', connectHandler);\n      });\n\n      debug('connection acquired');\n      connection.on('error', error => {\n        switch (error.code) {\n          case 'ESOCKET':\n          case 'ECONNRESET':\n          case 'EPIPE':\n          case 'PROTOCOL_CONNECTION_LOST':\n            this.pool.destroy(connection);\n        }\n      });\n\n      if (!this.sequelize.config.keepDefaultTimezone) {\n        // set timezone for this connection\n        // but named timezone are not directly supported in mysql, so get its offset first\n        let tzOffset = this.sequelize.options.timezone;\n        tzOffset = /\\//.test(tzOffset) ? momentTz.tz(tzOffset).format('Z') : tzOffset;\n        await promisify(cb => connection.query(`SET time_zone = '${tzOffset}'`, cb))();\n      }\n\n      return connection;\n    } catch (err) {\n      switch (err.code) {\n        case 'ECONNREFUSED':\n          throw new SequelizeErrors.ConnectionRefusedError(err);\n        case 'ER_ACCESS_DENIED_ERROR':\n          throw new SequelizeErrors.AccessDeniedError(err);\n        case 'ENOTFOUND':\n          throw new SequelizeErrors.HostNotFoundError(err);\n        case 'EHOSTUNREACH':\n          throw new SequelizeErrors.HostNotReachableError(err);\n        case 'EINVAL':\n          throw new SequelizeErrors.InvalidConnectionError(err);\n        default:\n          throw new SequelizeErrors.ConnectionError(err);\n      }\n    }\n  }\n\n  async disconnect(connection) {\n    // Don't disconnect connections with CLOSED state\n    if (connection._closing) {\n      debug('connection tried to disconnect but was already at CLOSED state');\n      return;\n    }\n\n    return await promisify(callback => connection.end(callback))();\n  }\n\n  validate(connection) {\n    return connection\n      && !connection._fatalError\n      && !connection._protocolError\n      && !connection._closing\n      && !connection.stream.destroyed;\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"],
  "mappings": "yZAEA,KAAM,GAA4B,QAAQ,kCACpC,EAAkB,QAAQ,gBAC1B,CAAE,UAAW,QAAQ,sBACrB,EAAY,QAAQ,oBAAoB,MACxC,EAAW,QAAQ,mBACnB,EAAQ,EAAO,aAAa,oBAC5B,EAAc,QAAQ,kBAAkB,SACxC,CAAE,aAAc,QAAQ,QAW9B,eAAgC,EAA0B,CACxD,YAAY,EAAS,EAAW,CAC9B,EAAU,OAAO,KAAO,EAAU,OAAO,MAAQ,KACjD,MAAM,EAAS,GACf,KAAK,IAAM,KAAK,mBAAmB,UACnC,KAAK,kBAAkB,GAGzB,mBAAmB,EAAU,CAC3B,EAAY,QAAQ,GAGtB,kBAAmB,CACjB,EAAY,cAGP,WAAU,EAAO,EAAM,CAC5B,MAAI,GAAY,IAAI,EAAM,MACjB,EAAY,IAAI,EAAM,MAAM,EAAO,KAAK,UAAU,QAAS,GAE7D,SAYH,SAAQ,EAAQ,CACpB,KAAM,GAAmB,GACvB,KAAM,EAAO,KACb,KAAM,EAAO,KACb,KAAM,EAAO,SACb,MAAO,cACP,SAAU,EAAO,SACjB,SAAU,EAAO,SACjB,SAAU,KAAK,UAAU,QAAQ,SACjC,SAAU,EAAkB,UAAU,KAAK,MAC3C,iBAAkB,GAClB,kBAAmB,IAChB,EAAO,gBAGZ,GAAI,CACF,KAAM,GAAa,KAAM,IAAI,SAAQ,CAAC,EAAS,IAAW,CACxD,KAAM,GAAa,KAAK,IAAI,iBAAiB,GAEvC,EAAe,KAAK,CAExB,EAAW,eAAe,UAAW,GACrC,EAAW,eAAe,QAAS,GACnC,EAAO,IAJY,gBAOf,EAAiB,MAAM,CAE3B,EAAW,eAAe,QAAS,GACnC,EAAQ,IAHa,kBAUvB,EAAW,GAAG,QAAS,GACvB,EAAW,KAAK,UAAW,KAc7B,GAXA,EAAM,uBACN,EAAW,GAAG,QAAS,GAAS,CAC9B,OAAQ,EAAM,UACP,cACA,iBACA,YACA,2BACH,KAAK,KAAK,QAAQ,MAIpB,CAAC,KAAK,UAAU,OAAO,oBAAqB,CAG9C,GAAI,GAAW,KAAK,UAAU,QAAQ,SACtC,EAAW,KAAK,KAAK,GAAY,EAAS,GAAG,GAAU,OAAO,KAAO,EACrE,KAAM,GAAU,GAAM,EAAW,MAAM,oBAAoB,KAAa,MAG1E,MAAO,SACA,EAAP,CACA,OAAQ,EAAI,UACL,eACH,KAAM,IAAI,GAAgB,uBAAuB,OAC9C,yBACH,KAAM,IAAI,GAAgB,kBAAkB,OACzC,YACH,KAAM,IAAI,GAAgB,kBAAkB,OACzC,eACH,KAAM,IAAI,GAAgB,sBAAsB,OAC7C,SACH,KAAM,IAAI,GAAgB,uBAAuB,WAEjD,KAAM,IAAI,GAAgB,gBAAgB,UAK5C,YAAW,EAAY,CAE3B,GAAI,EAAW,SAAU,CACvB,EAAM,kEACN,OAGF,MAAO,MAAM,GAAU,GAAY,EAAW,IAAI,MAGpD,SAAS,EAAY,CACnB,MAAO,IACF,CAAC,EAAW,aACZ,CAAC,EAAW,gBACZ,CAAC,EAAW,UACZ,CAAC,EAAW,OAAO,WA7H5B,yBAiIA,OAAO,QAAU,EACjB,OAAO,QAAQ,kBAAoB,EACnC,OAAO,QAAQ,QAAU",
  "names": []
}
