{
  "version": 3,
  "sources": ["../../../../lib/dialects/abstract/connection-manager.js"],
  "sourcesContent": ["'use strict';\n\nconst { Pool, TimeoutError } = require('sequelize-pool');\nconst _ = require('lodash');\nconst semver = require('semver');\nconst errors = require('../../errors');\nconst { logger } = require('../../utils/logger');\nconst deprecations = require('../../utils/deprecations');\nconst debug = logger.debugContext('pool');\n\n/**\n * Abstract Connection Manager\n *\n * Connection manager which handles pooling & replication.\n * Uses sequelize-pool for pooling\n *\n * @private\n */\nclass ConnectionManager {\n  constructor(dialect, sequelize) {\n    const config = _.cloneDeep(sequelize.config);\n\n    this.sequelize = sequelize;\n    this.config = config;\n    this.dialect = dialect;\n    this.versionPromise = null;\n    this.dialectName = this.sequelize.options.dialect;\n\n    if (config.pool === false) {\n      throw new Error('Support for pool:false was removed in v4.0');\n    }\n\n    config.pool = _.defaults(config.pool || {}, {\n      max: 5,\n      min: 0,\n      idle: 10000,\n      acquire: 60000,\n      evict: 1000,\n      validate: this._validate.bind(this)\n    });\n\n    this.initPools();\n  }\n\n  refreshTypeParser(dataTypes) {\n    _.each(dataTypes, dataType => {\n      if (Object.prototype.hasOwnProperty.call(dataType, 'parse')) {\n        if (dataType.types[this.dialectName]) {\n          this._refreshTypeParser(dataType);\n        } else {\n          throw new Error(`Parse function not supported for type ${dataType.key} in dialect ${this.dialectName}`);\n        }\n      }\n    });\n  }\n\n  /**\n   * Try to load dialect module from various configured options.\n   * Priority goes like dialectModulePath > dialectModule > require(default)\n   *\n   * @param {string} moduleName Name of dialect module to lookup\n   *\n   * @private\n   * @returns {object}\n   */\n  _loadDialectModule(moduleName) {\n    try {\n      if (this.sequelize.config.dialectModulePath) {\n        return require(this.sequelize.config.dialectModulePath);\n      }\n      if (this.sequelize.config.dialectModule) {\n        return this.sequelize.config.dialectModule;\n      }\n      return require(moduleName);\n\n    } catch (err) {\n      if (err.code === 'MODULE_NOT_FOUND') {\n        if (this.sequelize.config.dialectModulePath) {\n          throw new Error(`Unable to find dialect at ${this.sequelize.config.dialectModulePath}`);\n        }\n        throw new Error(`Please install ${moduleName} package manually`);\n      }\n\n      throw err;\n    }\n  }\n\n  /**\n   * Handler which executes on process exit or connection manager shutdown\n   *\n   * @private\n   * @returns {Promise}\n   */\n  async _onProcessExit() {\n    if (!this.pool) {\n      return;\n    }\n\n    await this.pool.drain();\n    debug('connection drain due to process exit');\n\n    return await this.pool.destroyAllNow();\n  }\n\n  /**\n   * Drain the pool and close it permanently\n   *\n   * @returns {Promise}\n   */\n  async close() {\n    // Mark close of pool\n    this.getConnection = async function getConnection() {\n      throw new Error('ConnectionManager.getConnection was called after the connection manager was closed!');\n    };\n\n    return await this._onProcessExit();\n  }\n\n  /**\n   * Initialize connection pool. By default pool autostart is set to false, so no connection will be\n   * be created unless `pool.acquire` is called.\n   */\n  initPools() {\n    const config = this.config;\n\n    if (!config.replication) {\n      this.pool = new Pool({\n        name: 'sequelize',\n        create: () => this._connect(config),\n        destroy: async connection => {\n          const result = await this._disconnect(connection);\n          debug('connection destroy');\n          return result;\n        },\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      });\n\n      debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, no replication`);\n\n      return;\n    }\n\n    if (!Array.isArray(config.replication.read)) {\n      config.replication.read = [config.replication.read];\n    }\n\n    // Map main connection config\n    config.replication.write = _.defaults(config.replication.write, _.omit(config, 'replication'));\n\n    // Apply defaults to each read config\n    config.replication.read = config.replication.read.map(readConfig =>\n      _.defaults(readConfig, _.omit(this.config, 'replication'))\n    );\n\n    // custom pooling for replication (original author @janmeier)\n    let reads = 0;\n    this.pool = {\n      release: client => {\n        if (client.queryType === 'read') {\n          this.pool.read.release(client);\n        } else {\n          this.pool.write.release(client);\n        }\n      },\n      acquire: (queryType, useMaster) => {\n        useMaster = useMaster === undefined ? false : useMaster;\n        if (queryType === 'SELECT' && !useMaster) {\n          return this.pool.read.acquire();\n        }\n        return this.pool.write.acquire();\n      },\n      destroy: connection => {\n        this.pool[connection.queryType].destroy(connection);\n        debug('connection destroy');\n      },\n      destroyAllNow: async () => {\n        await Promise.all([\n          this.pool.read.destroyAllNow(),\n          this.pool.write.destroyAllNow()\n        ]);\n\n        debug('all connections destroyed');\n      },\n      drain: async () => Promise.all([\n        this.pool.write.drain(),\n        this.pool.read.drain()\n      ]),\n      read: new Pool({\n        name: 'sequelize:read',\n        create: async () => {\n          // round robin config\n          const nextRead = reads++ % config.replication.read.length;\n          const connection = await this._connect(config.replication.read[nextRead]);\n          connection.queryType = 'read';\n          return connection;\n        },\n        destroy: connection => this._disconnect(connection),\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      }),\n      write: new Pool({\n        name: 'sequelize:write',\n        create: async () => {\n          const connection = await this._connect(config.replication.write);\n          connection.queryType = 'write';\n          return connection;\n        },\n        destroy: connection => this._disconnect(connection),\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      })\n    };\n\n    debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, with replication`);\n  }\n\n  /**\n   * Get connection from pool. It sets database version if it's not already set.\n   * Call pool.acquire to get a connection\n   *\n   * @param {object}   [options]                 Pool options\n   * @param {string}   [options.type]            Set which replica to use. Available options are `read` and `write`\n   * @param {boolean}  [options.useMaster=false] Force master or write replica to get connection from\n   *\n   * @returns {Promise<Connection>}\n   */\n  async getConnection(options) {\n    options = options || {};\n\n    if (this.sequelize.options.databaseVersion === 0) {\n      if (!this.versionPromise) {\n        this.versionPromise = (async () => {\n          try {\n            const connection = await this._connect(this.config.replication.write || this.config);\n            const _options = {};\n\n            _options.transaction = { connection }; // Cheat .query to use our private connection\n            _options.logging = () => {};\n            _options.logging.__testLoggingFn = true;\n\n            //connection might have set databaseVersion value at initialization,\n            //avoiding a useless round trip\n            if (this.sequelize.options.databaseVersion === 0) {\n              const version = await this.sequelize.databaseVersion(_options);\n              const parsedVersion = _.get(semver.coerce(version), 'version') || version;\n              this.sequelize.options.databaseVersion = semver.valid(parsedVersion)\n                ? parsedVersion\n                : this.dialect.defaultVersion;\n            }\n\n            if (semver.lt(this.sequelize.options.databaseVersion, this.dialect.defaultVersion)) {\n              deprecations.unsupportedEngine();\n              debug(`Unsupported database engine version ${this.sequelize.options.databaseVersion}`);\n            }\n\n            this.versionPromise = null;\n            return await this._disconnect(connection);\n          } catch (err) {\n            this.versionPromise = null;\n            throw err;\n          }\n        })();\n      }\n      await this.versionPromise;\n    }\n\n    let result;\n\n    try {\n      result = await this.pool.acquire(options.type, options.useMaster);\n    } catch (error) {\n      if (error instanceof TimeoutError) throw new errors.ConnectionAcquireTimeoutError(error);\n      throw error;\n    }\n\n    debug('connection acquired');\n\n    return result;\n  }\n\n  /**\n   * Release a pooled connection so it can be utilized by other connection requests\n   *\n   * @param {Connection} connection\n   *\n   * @returns {Promise}\n   */\n  async releaseConnection(connection) {\n    this.pool.release(connection);\n    debug('connection released');\n  }\n\n  /**\n   * Call dialect library to get connection\n   *\n   * @param {*} config Connection config\n   * @private\n   * @returns {Promise<Connection>}\n   */\n  async _connect(config) {\n    await this.sequelize.runHooks('beforeConnect', config);\n    const connection = await this.dialect.connectionManager.connect(config);\n    await this.sequelize.runHooks('afterConnect', connection, config);\n    return connection;\n  }\n\n  /**\n   * Call dialect library to disconnect a connection\n   *\n   * @param {Connection} connection\n   * @private\n   * @returns {Promise}\n   */\n  async _disconnect(connection) {\n    await this.sequelize.runHooks('beforeDisconnect', connection);\n    await this.dialect.connectionManager.disconnect(connection);\n    return this.sequelize.runHooks('afterDisconnect', connection);\n  }\n\n  /**\n   * Determine if a connection is still valid or not\n   *\n   * @param {Connection} connection\n   *\n   * @returns {boolean}\n   */\n  _validate(connection) {\n    if (!this.dialect.connectionManager.validate) {\n      return true;\n    }\n\n    return this.dialect.connectionManager.validate(connection);\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"],
  "mappings": "4FAEA,KAAM,CAAE,OAAM,gBAAiB,QAAQ,kBACjC,EAAI,QAAQ,UACZ,EAAS,QAAQ,UACjB,EAAS,QAAQ,gBACjB,CAAE,UAAW,QAAQ,sBACrB,EAAe,QAAQ,4BACvB,EAAQ,EAAO,aAAa,QAUlC,OAAwB,CACtB,YAAY,EAAS,EAAW,CAC9B,KAAM,GAAS,EAAE,UAAU,EAAU,QAQrC,GANA,KAAK,UAAY,EACjB,KAAK,OAAS,EACd,KAAK,QAAU,EACf,KAAK,eAAiB,KACtB,KAAK,YAAc,KAAK,UAAU,QAAQ,QAEtC,EAAO,OAAS,GAClB,KAAM,IAAI,OAAM,8CAGlB,EAAO,KAAO,EAAE,SAAS,EAAO,MAAQ,GAAI,CAC1C,IAAK,EACL,IAAK,EACL,KAAM,IACN,QAAS,IACT,MAAO,IACP,SAAU,KAAK,UAAU,KAAK,QAGhC,KAAK,YAGP,kBAAkB,EAAW,CAC3B,EAAE,KAAK,EAAW,GAAY,CAC5B,GAAI,OAAO,UAAU,eAAe,KAAK,EAAU,SACjD,GAAI,EAAS,MAAM,KAAK,aACtB,KAAK,mBAAmB,OAExB,MAAM,IAAI,OAAM,yCAAyC,EAAS,kBAAkB,KAAK,iBAejG,mBAAmB,EAAY,CAC7B,GAAI,CACF,MAAI,MAAK,UAAU,OAAO,kBACjB,QAAQ,KAAK,UAAU,OAAO,mBAEnC,KAAK,UAAU,OAAO,cACjB,KAAK,UAAU,OAAO,cAExB,QAAQ,SAER,EAAP,CACA,KAAI,GAAI,OAAS,mBACX,KAAK,UAAU,OAAO,kBAClB,GAAI,OAAM,6BAA6B,KAAK,UAAU,OAAO,qBAE/D,GAAI,OAAM,kBAAkB,sBAG9B,QAUJ,iBAAiB,CACrB,GAAI,EAAC,KAAK,KAIV,YAAM,MAAK,KAAK,QAChB,EAAM,wCAEC,KAAM,MAAK,KAAK,qBAQnB,QAAQ,CAEZ,YAAK,cAAgB,kBAA+B,CAClD,KAAM,IAAI,OAAM,wFADG,iBAId,KAAM,MAAK,iBAOpB,WAAY,CACV,KAAM,GAAS,KAAK,OAEpB,GAAI,CAAC,EAAO,YAAa,CACvB,KAAK,KAAO,GAAI,GAAK,CACnB,KAAM,YACN,OAAQ,IAAM,KAAK,SAAS,GAC5B,QAAS,KAAM,IAAc,CAC3B,KAAM,GAAS,KAAM,MAAK,YAAY,GACtC,SAAM,sBACC,GAET,SAAU,EAAO,KAAK,SACtB,IAAK,EAAO,KAAK,IACjB,IAAK,EAAO,KAAK,IACjB,qBAAsB,EAAO,KAAK,QAClC,kBAAmB,EAAO,KAAK,KAC/B,mBAAoB,EAAO,KAAK,MAChC,QAAS,EAAO,KAAK,UAGvB,EAAM,8BAA8B,EAAO,KAAK,OAAO,EAAO,KAAK,uBAEnE,OAGF,AAAK,MAAM,QAAQ,EAAO,YAAY,OACpC,GAAO,YAAY,KAAO,CAAC,EAAO,YAAY,OAIhD,EAAO,YAAY,MAAQ,EAAE,SAAS,EAAO,YAAY,MAAO,EAAE,KAAK,EAAQ,gBAG/E,EAAO,YAAY,KAAO,EAAO,YAAY,KAAK,IAAI,GACpD,EAAE,SAAS,EAAY,EAAE,KAAK,KAAK,OAAQ,iBAI7C,GAAI,GAAQ,EACZ,KAAK,KAAO,CACV,QAAS,GAAU,CACjB,AAAI,EAAO,YAAc,OACvB,KAAK,KAAK,KAAK,QAAQ,GAEvB,KAAK,KAAK,MAAM,QAAQ,IAG5B,QAAS,CAAC,EAAW,IACnB,GAAY,IAAc,OAAY,GAAQ,EAC1C,IAAc,UAAY,CAAC,EACtB,KAAK,KAAK,KAAK,UAEjB,KAAK,KAAK,MAAM,WAEzB,QAAS,GAAc,CACrB,KAAK,KAAK,EAAW,WAAW,QAAQ,GACxC,EAAM,uBAER,cAAe,SAAY,CACzB,KAAM,SAAQ,IAAI,CAChB,KAAK,KAAK,KAAK,gBACf,KAAK,KAAK,MAAM,kBAGlB,EAAM,8BAER,MAAO,SAAY,QAAQ,IAAI,CAC7B,KAAK,KAAK,MAAM,QAChB,KAAK,KAAK,KAAK,UAEjB,KAAM,GAAI,GAAK,CACb,KAAM,iBACN,OAAQ,SAAY,CAElB,KAAM,GAAW,IAAU,EAAO,YAAY,KAAK,OAC7C,EAAa,KAAM,MAAK,SAAS,EAAO,YAAY,KAAK,IAC/D,SAAW,UAAY,OAChB,GAET,QAAS,GAAc,KAAK,YAAY,GACxC,SAAU,EAAO,KAAK,SACtB,IAAK,EAAO,KAAK,IACjB,IAAK,EAAO,KAAK,IACjB,qBAAsB,EAAO,KAAK,QAClC,kBAAmB,EAAO,KAAK,KAC/B,mBAAoB,EAAO,KAAK,MAChC,QAAS,EAAO,KAAK,UAEvB,MAAO,GAAI,GAAK,CACd,KAAM,kBACN,OAAQ,SAAY,CAClB,KAAM,GAAa,KAAM,MAAK,SAAS,EAAO,YAAY,OAC1D,SAAW,UAAY,QAChB,GAET,QAAS,GAAc,KAAK,YAAY,GACxC,SAAU,EAAO,KAAK,SACtB,IAAK,EAAO,KAAK,IACjB,IAAK,EAAO,KAAK,IACjB,qBAAsB,EAAO,KAAK,QAClC,kBAAmB,EAAO,KAAK,KAC/B,mBAAoB,EAAO,KAAK,MAChC,QAAS,EAAO,KAAK,WAIzB,EAAM,8BAA8B,EAAO,KAAK,OAAO,EAAO,KAAK,8BAa/D,eAAc,EAAS,CAC3B,EAAU,GAAW,GAEjB,KAAK,UAAU,QAAQ,kBAAoB,GACxC,MAAK,gBACR,MAAK,eAAkB,UAAY,CACjC,GAAI,CACF,KAAM,GAAa,KAAM,MAAK,SAAS,KAAK,OAAO,YAAY,OAAS,KAAK,QACvE,EAAW,GAQjB,GANA,EAAS,YAAc,CAAE,cACzB,EAAS,QAAU,IAAM,GACzB,EAAS,QAAQ,gBAAkB,GAI/B,KAAK,UAAU,QAAQ,kBAAoB,EAAG,CAChD,KAAM,GAAU,KAAM,MAAK,UAAU,gBAAgB,GAC/C,EAAgB,EAAE,IAAI,EAAO,OAAO,GAAU,YAAc,EAClE,KAAK,UAAU,QAAQ,gBAAkB,EAAO,MAAM,GAClD,EACA,KAAK,QAAQ,eAGnB,MAAI,GAAO,GAAG,KAAK,UAAU,QAAQ,gBAAiB,KAAK,QAAQ,iBACjE,GAAa,oBACb,EAAM,uCAAuC,KAAK,UAAU,QAAQ,oBAGtE,KAAK,eAAiB,KACf,KAAM,MAAK,YAAY,SACvB,EAAP,CACA,WAAK,eAAiB,KAChB,QAIZ,KAAM,MAAK,gBAGb,GAAI,GAEJ,GAAI,CACF,EAAS,KAAM,MAAK,KAAK,QAAQ,EAAQ,KAAM,EAAQ,iBAChD,EAAP,CACA,KAAI,aAAiB,GAAoB,GAAI,GAAO,8BAA8B,GAC5E,EAGR,SAAM,uBAEC,OAUH,mBAAkB,EAAY,CAClC,KAAK,KAAK,QAAQ,GAClB,EAAM,4BAUF,UAAS,EAAQ,CACrB,KAAM,MAAK,UAAU,SAAS,gBAAiB,GAC/C,KAAM,GAAa,KAAM,MAAK,QAAQ,kBAAkB,QAAQ,GAChE,YAAM,MAAK,UAAU,SAAS,eAAgB,EAAY,GACnD,OAUH,aAAY,EAAY,CAC5B,YAAM,MAAK,UAAU,SAAS,mBAAoB,GAClD,KAAM,MAAK,QAAQ,kBAAkB,WAAW,GACzC,KAAK,UAAU,SAAS,kBAAmB,GAUpD,UAAU,EAAY,CACpB,MAAK,MAAK,QAAQ,kBAAkB,SAI7B,KAAK,QAAQ,kBAAkB,SAAS,GAHtC,IAtUb,yBA6UA,OAAO,QAAU,EACjB,OAAO,QAAQ,kBAAoB,EACnC,OAAO,QAAQ,QAAU",
  "names": []
}
