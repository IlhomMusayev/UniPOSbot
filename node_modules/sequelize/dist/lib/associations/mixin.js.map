{
  "version": 3,
  "sources": ["../../../lib/associations/mixin.js"],
  "sourcesContent": ["'use strict';\n\nconst _ = require('lodash');\nconst HasOne = require('./has-one');\nconst HasMany = require('./has-many');\nconst BelongsToMany = require('./belongs-to-many');\nconst BelongsTo = require('./belongs-to');\n\nfunction isModel(model, sequelize) {\n  return model\n    && model.prototype\n    && model.prototype instanceof sequelize.Sequelize.Model;\n}\n\nconst Mixin = {\n  hasMany(target, options = {}) {\n    if (!isModel(target, this.sequelize)) {\n      throw new Error(`${this.name}.hasMany called with something that's not a subclass of Sequelize.Model`);\n    }\n\n    const source = this;\n\n    // Since this is a mixin, we'll need a unique letiable name for hooks (since Model will override our hooks option)\n    options.hooks = options.hooks === undefined ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n\n    Object.assign(options, _.omit(source.options, ['hooks']));\n\n    if (options.useHooks) {\n      this.runHooks('beforeAssociate', { source, target, type: HasMany }, options);\n    }\n\n    // the id is in the foreign table or in a connecting table\n    const association = new HasMany(source, target, options);\n    source.associations[association.associationAccessor] = association;\n\n    association._injectAttributes();\n    association.mixin(source.prototype);\n\n    if (options.useHooks) {\n      this.runHooks('afterAssociate', { source, target, type: HasMany, association }, options);\n    }\n\n    return association;\n  },\n\n  belongsToMany(target, options = {}) {\n    if (!isModel(target, this.sequelize)) {\n      throw new Error(`${this.name}.belongsToMany called with something that's not a subclass of Sequelize.Model`);\n    }\n\n    const source = this;\n\n    // Since this is a mixin, we'll need a unique letiable name for hooks (since Model will override our hooks option)\n    options.hooks = options.hooks === undefined ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n    options.timestamps = options.timestamps === undefined ? this.sequelize.options.timestamps : options.timestamps;\n    Object.assign(options, _.omit(source.options, ['hooks', 'timestamps', 'scopes', 'defaultScope']));\n\n    if (options.useHooks) {\n      this.runHooks('beforeAssociate', { source, target, type: BelongsToMany }, options);\n    }\n    // the id is in the foreign table or in a connecting table\n    const association = new BelongsToMany(source, target, options);\n    source.associations[association.associationAccessor] = association;\n\n    association._injectAttributes();\n    association.mixin(source.prototype);\n\n    if (options.useHooks) {\n      this.runHooks('afterAssociate', { source, target, type: BelongsToMany, association }, options);\n    }\n\n    return association;\n  },\n\n  getAssociations(target) {\n    return Object.values(this.associations).filter(association => association.target.name === target.name);\n  },\n\n  getAssociationForAlias(target, alias) {\n    // Two associations cannot have the same alias, so we can use find instead of filter\n    return this.getAssociations(target).find(association => association.verifyAssociationAlias(alias)) || null;\n  }\n};\n\n// The logic for hasOne and belongsTo is exactly the same\nfunction singleLinked(Type) {\n  return function(target, options = {}) {\n    // eslint-disable-next-line no-invalid-this\n    const source = this;\n    if (!isModel(target, source.sequelize)) {\n      throw new Error(`${source.name}.${_.lowerFirst(Type.name)} called with something that's not a subclass of Sequelize.Model`);\n    }\n\n\n    // Since this is a mixin, we'll need a unique letiable name for hooks (since Model will override our hooks option)\n    options.hooks = options.hooks === undefined ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n\n    if (options.useHooks) {\n      source.runHooks('beforeAssociate', { source, target, type: Type }, options);\n    }\n    // the id is in the foreign table\n    const association = new Type(source, target, Object.assign(options, source.options));\n    source.associations[association.associationAccessor] = association;\n\n    association._injectAttributes();\n    association.mixin(source.prototype);\n\n    if (options.useHooks) {\n      source.runHooks('afterAssociate', { source, target, type: Type, association }, options);\n    }\n\n    return association;\n  };\n}\n\nMixin.hasOne = singleLinked(HasOne);\nMixin.belongsTo = singleLinked(BelongsTo);\n\nmodule.exports = Mixin;\nmodule.exports.Mixin = Mixin;\nmodule.exports.default = Mixin;\n"],
  "mappings": "4FAEA,KAAM,GAAI,QAAQ,UACZ,EAAS,QAAQ,aACjB,EAAU,QAAQ,cAClB,EAAgB,QAAQ,qBACxB,EAAY,QAAQ,gBAE1B,WAAiB,EAAO,EAAW,CACjC,MAAO,IACF,EAAM,WACN,EAAM,oBAAqB,GAAU,UAAU,MAH7C,eAMT,KAAM,GAAQ,CACZ,QAAQ,EAAQ,EAAU,GAAI,CAC5B,GAAI,CAAC,EAAQ,EAAQ,KAAK,WACxB,KAAM,IAAI,OAAM,GAAG,KAAK,+EAG1B,KAAM,GAAS,KAGf,EAAQ,MAAQ,EAAQ,QAAU,OAAY,GAAQ,QAAQ,EAAQ,OACtE,EAAQ,SAAW,EAAQ,MAE3B,OAAO,OAAO,EAAS,EAAE,KAAK,EAAO,QAAS,CAAC,WAE3C,EAAQ,UACV,KAAK,SAAS,kBAAmB,CAAE,SAAQ,SAAQ,KAAM,GAAW,GAItE,KAAM,GAAc,GAAI,GAAQ,EAAQ,EAAQ,GAChD,SAAO,aAAa,EAAY,qBAAuB,EAEvD,EAAY,oBACZ,EAAY,MAAM,EAAO,WAErB,EAAQ,UACV,KAAK,SAAS,iBAAkB,CAAE,SAAQ,SAAQ,KAAM,EAAS,eAAe,GAG3E,GAGT,cAAc,EAAQ,EAAU,GAAI,CAClC,GAAI,CAAC,EAAQ,EAAQ,KAAK,WACxB,KAAM,IAAI,OAAM,GAAG,KAAK,qFAG1B,KAAM,GAAS,KAGf,EAAQ,MAAQ,EAAQ,QAAU,OAAY,GAAQ,QAAQ,EAAQ,OACtE,EAAQ,SAAW,EAAQ,MAC3B,EAAQ,WAAa,EAAQ,aAAe,OAAY,KAAK,UAAU,QAAQ,WAAa,EAAQ,WACpG,OAAO,OAAO,EAAS,EAAE,KAAK,EAAO,QAAS,CAAC,QAAS,aAAc,SAAU,kBAE5E,EAAQ,UACV,KAAK,SAAS,kBAAmB,CAAE,SAAQ,SAAQ,KAAM,GAAiB,GAG5E,KAAM,GAAc,GAAI,GAAc,EAAQ,EAAQ,GACtD,SAAO,aAAa,EAAY,qBAAuB,EAEvD,EAAY,oBACZ,EAAY,MAAM,EAAO,WAErB,EAAQ,UACV,KAAK,SAAS,iBAAkB,CAAE,SAAQ,SAAQ,KAAM,EAAe,eAAe,GAGjF,GAGT,gBAAgB,EAAQ,CACtB,MAAO,QAAO,OAAO,KAAK,cAAc,OAAO,GAAe,EAAY,OAAO,OAAS,EAAO,OAGnG,uBAAuB,EAAQ,EAAO,CAEpC,MAAO,MAAK,gBAAgB,GAAQ,KAAK,GAAe,EAAY,uBAAuB,KAAW,OAK1G,WAAsB,EAAM,CAC1B,MAAO,UAAS,EAAQ,EAAU,GAAI,CAEpC,KAAM,GAAS,KACf,GAAI,CAAC,EAAQ,EAAQ,EAAO,WAC1B,KAAM,IAAI,OAAM,GAAG,EAAO,QAAQ,EAAE,WAAW,EAAK,wEAKtD,EAAQ,MAAQ,EAAQ,QAAU,OAAY,GAAQ,QAAQ,EAAQ,OACtE,EAAQ,SAAW,EAAQ,MAEvB,EAAQ,UACV,EAAO,SAAS,kBAAmB,CAAE,SAAQ,SAAQ,KAAM,GAAQ,GAGrE,KAAM,GAAc,GAAI,GAAK,EAAQ,EAAQ,OAAO,OAAO,EAAS,EAAO,UAC3E,SAAO,aAAa,EAAY,qBAAuB,EAEvD,EAAY,oBACZ,EAAY,MAAM,EAAO,WAErB,EAAQ,UACV,EAAO,SAAS,iBAAkB,CAAE,SAAQ,SAAQ,KAAM,EAAM,eAAe,GAG1E,GA3BF,oBA+BT,EAAM,OAAS,EAAa,GAC5B,EAAM,UAAY,EAAa,GAE/B,OAAO,QAAU,EACjB,OAAO,QAAQ,MAAQ,EACvB,OAAO,QAAQ,QAAU",
  "names": []
}
