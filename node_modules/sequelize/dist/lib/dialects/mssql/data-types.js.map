{
  "version": 3,
  "sources": ["../../../../lib/dialects/mssql/data-types.js"],
  "sourcesContent": ["'use strict';\n\nconst moment = require('moment');\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'https://msdn.microsoft.com/en-us/library/ms187752%28v=sql.110%29.aspx');\n\n  /**\n   * Removes unsupported MSSQL options, i.e., LENGTH, UNSIGNED and ZEROFILL, for the integer data types.\n   *\n   * @param {object} dataType The base integer data type.\n   * @private\n   */\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._length || dataType.options.length || dataType._unsigned || dataType._zerofill) {\n      warn(`MSSQL does not support '${dataType.key}' with options. Plain '${dataType.key}' will be used instead.`);\n      dataType._length = undefined;\n      dataType.options.length = undefined;\n      dataType._unsigned = undefined;\n      dataType._zerofill = undefined;\n    }\n  }\n\n  /**\n   * types: [hex, ...]\n   *\n   * @see hex here https://github.com/tediousjs/tedious/blob/master/src/data-type.ts\n   */\n\n  BaseTypes.DATE.types.mssql = [43];\n  BaseTypes.STRING.types.mssql = [231, 173];\n  BaseTypes.CHAR.types.mssql = [175];\n  BaseTypes.TEXT.types.mssql = false;\n  // https://msdn.microsoft.com/en-us/library/ms187745(v=sql.110).aspx\n  BaseTypes.TINYINT.types.mssql = [30];\n  BaseTypes.SMALLINT.types.mssql = [34];\n  BaseTypes.MEDIUMINT.types.mssql = false;\n  BaseTypes.INTEGER.types.mssql = [38];\n  BaseTypes.BIGINT.types.mssql = false;\n  BaseTypes.FLOAT.types.mssql = [109];\n  BaseTypes.TIME.types.mssql = [41];\n  BaseTypes.DATEONLY.types.mssql = [40];\n  BaseTypes.BOOLEAN.types.mssql = [104];\n  BaseTypes.BLOB.types.mssql = [165];\n  BaseTypes.DECIMAL.types.mssql = [106];\n  BaseTypes.UUID.types.mssql = false;\n  BaseTypes.ENUM.types.mssql = false;\n  BaseTypes.REAL.types.mssql = [109];\n  BaseTypes.DOUBLE.types.mssql = [109];\n  // BaseTypes.GEOMETRY.types.mssql = [240]; // not yet supported\n  BaseTypes.GEOMETRY.types.mssql = false;\n\n  class BLOB extends BaseTypes.BLOB {\n    toSql() {\n      if (this._length) {\n        if (this._length.toLowerCase() === 'tiny') { // tiny = 2^8\n          warn('MSSQL does not support BLOB with the `length` = `tiny` option. `VARBINARY(256)` will be used instead.');\n          return 'VARBINARY(256)';\n        }\n        warn('MSSQL does not support BLOB with the `length` option. `VARBINARY(MAX)` will be used instead.');\n      }\n      return 'VARBINARY(MAX)';\n    }\n    _hexify(hex) {\n      return `0x${hex}`;\n    }\n  }\n\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (!this._binary) {\n        return `NVARCHAR(${this._length})`;\n      }\n      return `BINARY(${this._length})`;\n    }\n    _stringify(value, options) {\n      if (this._binary) {\n        return BLOB.prototype._stringify(value);\n      }\n      return options.escape(value);\n    }\n    _bindParam(value, options) {\n      return options.bindParam(this._binary ? Buffer.from(value) : value);\n    }\n  }\n\n  STRING.prototype.escape = false;\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      // TEXT is deprecated in mssql and it would normally be saved as a non-unicode string.\n      // Using unicode is just future proof\n      if (this._length) {\n        if (this._length.toLowerCase() === 'tiny') { // tiny = 2^8\n          warn('MSSQL does not support TEXT with the `length` = `tiny` option. `NVARCHAR(256)` will be used instead.');\n          return 'NVARCHAR(256)';\n        }\n        warn('MSSQL does not support TEXT with the `length` option. `NVARCHAR(MAX)` will be used instead.');\n      }\n      return 'NVARCHAR(MAX)';\n    }\n  }\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return 'BIT';\n    }\n  }\n\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return 'CHAR(36)';\n    }\n  }\n\n  class NOW extends BaseTypes.NOW {\n    toSql() {\n      return 'GETDATE()';\n    }\n  }\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return 'DATETIMEOFFSET';\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return moment(value).format('YYYY-MM-DD');\n    }\n  }\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class REAL extends BaseTypes.REAL {\n    constructor(length, decimals) {\n      super(length, decimals);\n      // MSSQL does not support any options for real\n      if (this._length || this.options.length || this._unsigned || this._zerofill) {\n        warn('MSSQL does not support REAL with options. Plain `REAL` will be used instead.');\n        this._length = undefined;\n        this.options.length = undefined;\n        this._unsigned = undefined;\n        this._zerofill = undefined;\n      }\n    }\n  }\n  class FLOAT extends BaseTypes.FLOAT {\n    constructor(length, decimals) {\n      super(length, decimals);\n      // MSSQL does only support lengths as option.\n      // Values between 1-24 result in 7 digits precision (4 bytes storage size)\n      // Values between 25-53 result in 15 digits precision (8 bytes storage size)\n      // If decimals are provided remove these and print a warning\n      if (this._decimals) {\n        warn('MSSQL does not support Float with decimals. Plain `FLOAT` will be used instead.');\n        this._length = undefined;\n        this.options.length = undefined;\n      }\n      if (this._unsigned) {\n        warn('MSSQL does not support Float unsigned. `UNSIGNED` was removed.');\n        this._unsigned = undefined;\n      }\n      if (this._zerofill) {\n        warn('MSSQL does not support Float zerofill. `ZEROFILL` was removed.');\n        this._zerofill = undefined;\n      }\n    }\n  }\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return 'VARCHAR(255)';\n    }\n  }\n\n  return {\n    BLOB,\n    BOOLEAN,\n    ENUM,\n    STRING,\n    UUID,\n    DATE,\n    DATEONLY,\n    NOW,\n    TINYINT,\n    SMALLINT,\n    INTEGER,\n    BIGINT,\n    REAL,\n    FLOAT,\n    TEXT\n  };\n};\n"],
  "mappings": "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",
  "names": []
}
