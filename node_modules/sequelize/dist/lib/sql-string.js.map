{
  "version": 3,
  "sources": ["../../lib/sql-string.js"],
  "sourcesContent": ["'use strict';\n\nconst dataTypes = require('./data-types');\nconst { logger } = require('./utils/logger');\n\nfunction arrayToList(array, timeZone, dialect, format) {\n  return array.reduce((sql, val, i) => {\n    if (i !== 0) {\n      sql += ', ';\n    }\n    if (Array.isArray(val)) {\n      sql += `(${arrayToList(val, timeZone, dialect, format)})`;\n    } else {\n      sql += escape(val, timeZone, dialect, format);\n    }\n    return sql;\n  }, '');\n}\nexports.arrayToList = arrayToList;\n\nfunction escape(val, timeZone, dialect, format) {\n  let prependN = false;\n  if (val === undefined || val === null) {\n    return 'NULL';\n  }\n  switch (typeof val) {\n    case 'boolean':\n    // SQLite doesn't have true/false support. MySQL aliases true/false to 1/0\n    // for us. Postgres actually has a boolean type with true/false literals,\n    // but sequelize doesn't use it yet.\n      if (dialect === 'sqlite' || dialect === 'mssql') {\n        return +!!val;\n      }\n      return (!!val).toString();\n    case 'number':\n      return val.toString();\n    case 'string':\n    // In mssql, prepend N to all quoted vals which are originally a string (for\n    // unicode compatibility)\n      prependN = dialect === 'mssql';\n      break;\n  }\n\n  if (val instanceof Date) {\n    val = dataTypes[dialect].DATE.prototype.stringify(val, { timezone: timeZone });\n  }\n\n  if (Buffer.isBuffer(val)) {\n    if (dataTypes[dialect].BLOB) {\n      return dataTypes[dialect].BLOB.prototype.stringify(val);\n    }\n\n    return dataTypes.BLOB.prototype.stringify(val);\n  }\n\n  if (Array.isArray(val)) {\n    const partialEscape = escVal => escape(escVal, timeZone, dialect, format);\n    if (dialect === 'postgres' && !format) {\n      return dataTypes.ARRAY.prototype.stringify(val, { escape: partialEscape });\n    }\n    return arrayToList(val, timeZone, dialect, format);\n  }\n\n  if (!val.replace) {\n    throw new Error(`Invalid value ${logger.inspect(val)}`);\n  }\n\n  if (dialect === 'postgres' || dialect === 'sqlite' || dialect === 'mssql') {\n    // http://www.postgresql.org/docs/8.2/static/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS\n    // http://stackoverflow.com/q/603572/130598\n    val = val.replace(/'/g, \"''\");\n\n    if (dialect === 'postgres') {\n      // null character is not allowed in Postgres\n      val = val.replace(/\\0/g, '\\\\0');\n    }\n  } else {\n    // eslint-disable-next-line no-control-regex\n    val = val.replace(/[\\0\\n\\r\\b\\t\\\\'\"\\x1a]/g, s => {\n      switch (s) {\n        case '\\0': return '\\\\0';\n        case '\\n': return '\\\\n';\n        case '\\r': return '\\\\r';\n        case '\\b': return '\\\\b';\n        case '\\t': return '\\\\t';\n        case '\\x1a': return '\\\\Z';\n        default: return `\\\\${s}`;\n      }\n    });\n  }\n  return `${(prependN ? \"N'\" : \"'\") + val}'`;\n}\nexports.escape = escape;\n\nfunction format(sql, values, timeZone, dialect) {\n  values = [].concat(values);\n\n  if (typeof sql !== 'string') {\n    throw new Error(`Invalid SQL string provided: ${sql}`);\n  }\n\n  return sql.replace(/\\?/g, match => {\n    if (!values.length) {\n      return match;\n    }\n\n    return escape(values.shift(), timeZone, dialect, true);\n  });\n}\nexports.format = format;\n\nfunction formatNamedParameters(sql, values, timeZone, dialect) {\n  return sql.replace(/:+(?!\\d)(\\w+)/g, (value, key) => {\n    if ('postgres' === dialect && '::' === value.slice(0, 2)) {\n      return value;\n    }\n\n    if (values[key] !== undefined) {\n      return escape(values[key], timeZone, dialect, true);\n    }\n    throw new Error(`Named parameter \"${value}\" has no value in the given object.`);\n  });\n}\nexports.formatNamedParameters = formatNamedParameters;\n"],
  "mappings": "4FAEA,KAAM,GAAY,QAAQ,gBACpB,CAAE,UAAW,QAAQ,kBAE3B,WAAqB,EAAO,EAAU,EAAS,EAAQ,CACrD,MAAO,GAAM,OAAO,CAAC,EAAK,EAAK,IACzB,KAAM,GACR,IAAO,MAET,AAAI,MAAM,QAAQ,GAChB,GAAO,IAAI,EAAY,EAAK,EAAU,EAAS,MAE/C,GAAO,EAAO,EAAK,EAAU,EAAS,GAEjC,GACN,IAXI,mBAaT,QAAQ,YAAc,EAEtB,WAAgB,EAAK,EAAU,EAAS,EAAQ,CAC9C,GAAI,GAAW,GACf,GAAI,AAAqB,GAAQ,KAC/B,MAAO,OAET,OAAQ,MAAO,QACR,UAIH,MAAI,KAAY,UAAY,IAAY,QAC/B,CAAC,CAAC,CAAC,EAEJ,EAAC,CAAC,GAAK,eACZ,SACH,MAAO,GAAI,eACR,SAGH,EAAW,IAAY,QACvB,MAOJ,GAJI,YAAe,OACjB,GAAM,EAAU,GAAS,KAAK,UAAU,UAAU,EAAK,CAAE,SAAU,KAGjE,OAAO,SAAS,GAClB,MAAI,GAAU,GAAS,KACd,EAAU,GAAS,KAAK,UAAU,UAAU,GAG9C,EAAU,KAAK,UAAU,UAAU,GAG5C,GAAI,MAAM,QAAQ,GAAM,CACtB,KAAM,GAAgB,KAAU,EAAO,EAAQ,EAAU,EAAS,GAA5C,iBACtB,MAAI,KAAY,YAAc,CAAC,EACtB,EAAU,MAAM,UAAU,UAAU,EAAK,CAAE,OAAQ,IAErD,EAAY,EAAK,EAAU,EAAS,GAG7C,GAAI,CAAC,EAAI,QACP,KAAM,IAAI,OAAM,iBAAiB,EAAO,QAAQ,MAGlD,MAAI,KAAY,YAAc,IAAY,UAAY,IAAY,QAGhE,GAAM,EAAI,QAAQ,KAAM,MAEpB,IAAY,YAEd,GAAM,EAAI,QAAQ,MAAO,SAI3B,EAAM,EAAI,QAAQ,wBAAyB,GAAK,CAC9C,OAAQ,OACD,KAAM,MAAO,UACb;AAAA,EAAM,MAAO,UACb,KAAM,MAAO,UACb,KAAM,MAAO,UACb,IAAM,MAAO,UACb,IAAQ,MAAO,cACX,MAAO,KAAK,OAIpB,GAAI,GAAW,KAAO,KAAO,KAtE7B,cAwET,QAAQ,OAAS,EAEjB,WAAgB,EAAK,EAAQ,EAAU,EAAS,CAG9C,GAFA,EAAS,GAAG,OAAO,GAEf,MAAO,IAAQ,SACjB,KAAM,IAAI,OAAM,gCAAgC,KAGlD,MAAO,GAAI,QAAQ,MAAO,GACnB,EAAO,OAIL,EAAO,EAAO,QAAS,EAAU,EAAS,IAHxC,GATJ,cAeT,QAAQ,OAAS,EAEjB,WAA+B,EAAK,EAAQ,EAAU,EAAS,CAC7D,MAAO,GAAI,QAAQ,iBAAkB,CAAC,EAAO,IAAQ,CACnD,GAAI,AAAe,IAAf,YAA0B,AAAS,EAAM,MAAM,EAAG,KAAxB,KAC5B,MAAO,GAGT,GAAI,EAAO,KAAS,OAClB,MAAO,GAAO,EAAO,GAAM,EAAU,EAAS,IAEhD,KAAM,IAAI,OAAM,oBAAoB,0CAT/B,6BAYT,QAAQ,sBAAwB",
  "names": []
}
