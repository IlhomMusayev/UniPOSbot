"use strict";var g=Object.defineProperty,C=Object.defineProperties;var A=Object.getOwnPropertyDescriptors;var Q=Object.getOwnPropertySymbols;var K=Object.prototype.hasOwnProperty,I=Object.prototype.propertyIsEnumerable;var E=(d,e,r)=>e in d?g(d,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):d[e]=r,l=(d,e)=>{for(var r in e||(e={}))K.call(e,r)&&E(d,r,e[r]);if(Q)for(var r of Q(e))I.call(e,r)&&E(d,r,e[r]);return d},i=(d,e)=>C(d,A(e));var S=(d,e)=>g(d,"name",{value:e,configurable:!0});const h=require("lodash"),w=require("../../utils"),m=require("../../data-types"),T=require("../../transaction"),y=require("../../query-types");class D{constructor(e,r){this.sequelize=e,this.queryGenerator=r}async createDatabase(e,r){r=r||{};const t=this.queryGenerator.createDatabaseQuery(e,r);return await this.sequelize.query(t,r)}async dropDatabase(e,r){r=r||{};const t=this.queryGenerator.dropDatabaseQuery(e);return await this.sequelize.query(t,r)}async createSchema(e,r){r=r||{};const t=this.queryGenerator.createSchema(e);return await this.sequelize.query(t,r)}async dropSchema(e,r){r=r||{};const t=this.queryGenerator.dropSchema(e);return await this.sequelize.query(t,r)}async dropAllSchemas(e){if(e=e||{},!this.queryGenerator._dialect.supports.schemas)return this.sequelize.drop(e);const r=await this.showAllSchemas(e);return Promise.all(r.map(t=>this.dropSchema(t,e)))}async showAllSchemas(e){e=i(l({},e),{raw:!0,type:this.sequelize.QueryTypes.SELECT});const r=this.queryGenerator.showSchemasQuery(e),t=await this.sequelize.query(r,e);return h.flatten(t.map(a=>a.schema_name?a.schema_name:a))}async databaseVersion(e){return await this.sequelize.query(this.queryGenerator.versionQuery(),i(l({},e),{type:y.VERSION}))}async createTable(e,r,t,a){let s="";return t=l({},t),t&&t.uniqueKeys&&h.forOwn(t.uniqueKeys,u=>{u.customIndex===void 0&&(u.customIndex=!0)}),a&&(t.uniqueKeys=t.uniqueKeys||a.uniqueKeys),r=h.mapValues(r,u=>this.sequelize.normalizeAttribute(u)),await this.ensureEnums(e,r,t,a),!e.schema&&(t.schema||!!a&&a._schema)&&(e=this.queryGenerator.addSchema({tableName:e,_schema:!!a&&a._schema||t.schema})),r=this.queryGenerator.attributesToSQL(r,{table:e,context:"createTable"}),s=this.queryGenerator.createTableQuery(e,r,t),await this.sequelize.query(s,t)}async dropTable(e,r){r=l({},r),r.cascade=r.cascade||r.force||!1;const t=this.queryGenerator.dropTableQuery(e,r);await this.sequelize.query(t,r)}async _dropAllTables(e,r,t){for(const a of e)r.includes(a.tableName||a)||await this.dropTable(a,i(l({},t),{cascade:!0}))}async dropAllTables(e){e=e||{};const r=e.skip||[],t=await this.showAllTables(e),a=await this.getForeignKeysForTables(t,e);for(const s of t){let u=s;h.isObject(s)&&(u=`${s.schema}.${s.tableName}`);for(const n of a[u])await this.sequelize.query(this.queryGenerator.dropForeignKeyQuery(s,n))}await this._dropAllTables(t,r,e)}async renameTable(e,r,t){t=t||{};const a=this.queryGenerator.renameTableQuery(e,r);return await this.sequelize.query(a,t)}async showAllTables(e){e=i(l({},e),{raw:!0,type:y.SHOWTABLES});const r=this.queryGenerator.showTablesQuery(this.sequelize.config.database),t=await this.sequelize.query(r,e);return h.flatten(t)}async describeTable(e,r){let t=null,a=null;typeof r=="string"?t=r:typeof r=="object"&&r!==null&&(t=r.schema||null,a=r.schemaDelimiter||null),typeof e=="object"&&e!==null&&(t=e.schema,e=e.tableName);const s=this.queryGenerator.describeTableQuery(e,t,a);r=i(l({},r),{type:y.DESCRIBE});try{const u=await this.sequelize.query(s,r);if(h.isEmpty(u))throw new Error(`No description found for "${e}" table. Check the table name and schema; remember, they _are_ case sensitive.`);return u}catch(u){throw u.original&&u.original.code==="ER_NO_SUCH_TABLE"?new Error(`No description found for "${e}" table. Check the table name and schema; remember, they _are_ case sensitive.`):u}}async addColumn(e,r,t,a){if(!e||!r||!t)throw new Error("addColumn takes at least 3 arguments (table, attribute name, attribute definition)");return a=a||{},t=this.sequelize.normalizeAttribute(t),await this.sequelize.query(this.queryGenerator.addColumnQuery(e,r,t),a)}async removeColumn(e,r,t){return this.sequelize.query(this.queryGenerator.removeColumnQuery(e,r),t)}normalizeAttribute(e){let r;return Object.values(m).includes(e)?r={type:e,allowNull:!0}:r=e,this.sequelize.normalizeAttribute(r)}async changeColumn(e,r,t,a){a=a||{};const s=this.queryGenerator.attributesToSQL({[r]:this.normalizeAttribute(t)},{context:"changeColumn",table:e}),u=this.queryGenerator.changeColumnQuery(e,s);return this.sequelize.query(u,a)}async assertTableHasColumn(e,r,t){const a=await this.describeTable(e,t);if(a[r])return a;throw new Error(`Table ${e} doesn't have the column ${r}`)}async renameColumn(e,r,t,a){a=a||{};const s=(await this.assertTableHasColumn(e,r,a))[r],u={};u[t]={attribute:t,type:s.type,allowNull:s.allowNull,defaultValue:s.defaultValue},s.defaultValue===null&&!s.allowNull&&delete u[t].defaultValue;const n=this.queryGenerator.renameColumnQuery(e,r,this.queryGenerator.attributesToSQL(u));return await this.sequelize.query(n,a)}async addIndex(e,r,t,a){Array.isArray(r)||(a=t,t=r,r=t.fields),a||(a=e),t=w.cloneDeep(t),t.fields=r;const s=this.queryGenerator.addIndexQuery(e,t,a);return await this.sequelize.query(s,i(l({},t),{supportsSearchPath:!1}))}async showIndex(e,r){const t=this.queryGenerator.showIndexesQuery(e,r);return await this.sequelize.query(t,i(l({},r),{type:y.SHOWINDEXES}))}async getForeignKeysForTables(e,r){if(e.length===0)return{};r=i(l({},r),{type:y.FOREIGNKEYS});const t=await Promise.all(e.map(s=>this.sequelize.query(this.queryGenerator.getForeignKeysQuery(s,this.sequelize.config.database),r))),a={};return e.forEach((s,u)=>{h.isObject(s)&&(s=`${s.schema}.${s.tableName}`),a[s]=Array.isArray(t[u])?t[u].map(n=>n.constraint_name):[t[u]&&t[u].constraint_name],a[s]=a[s].filter(h.identity)}),a}async getForeignKeyReferencesForTable(e,r){const t=i(l({},r),{type:y.FOREIGNKEYS}),a=this.queryGenerator.getForeignKeysQuery(e,this.sequelize.config.database);return this.sequelize.query(a,t)}async removeIndex(e,r,t){t=t||{};const a=this.queryGenerator.removeIndexQuery(e,r);return await this.sequelize.query(a,t)}async addConstraint(e,r){if(!r.fields)throw new Error("Fields must be specified through options.fields");if(!r.type)throw new Error("Constraint type must be specified through options.type");r=w.cloneDeep(r);const t=this.queryGenerator.addConstraintQuery(e,r);return await this.sequelize.query(t,r)}async showConstraint(e,r,t){const a=this.queryGenerator.showConstraintsQuery(e,r);return await this.sequelize.query(a,i(l({},t),{type:y.SHOWCONSTRAINTS}))}async removeConstraint(e,r,t){return this.sequelize.query(this.queryGenerator.removeConstraintQuery(e,r),t)}async insert(e,r,t,a){a=w.cloneDeep(a),a.hasTrigger=e&&e.constructor.options.hasTrigger;const s=this.queryGenerator.insertQuery(r,t,e&&e.constructor.rawAttributes,a);a.type=y.INSERT,a.instance=e;const u=await this.sequelize.query(s,a);return e&&(u[0].isNewRecord=!1),u}async upsert(e,r,t,a,s){s=l({},s);const u=s.model,n=Object.values(u.primaryKeys).map(f=>f.field),c=Object.values(u.uniqueKeys).filter(f=>f.fields.length>0).map(f=>f.fields),q=Object.values(u._indexes).filter(f=>f.unique&&f.fields.length>0).map(f=>f.fields);s.type=y.UPSERT,s.updateOnDuplicate=Object.keys(t),s.upsertKeys=[];for(const f of s.updateOnDuplicate){const b=c.find(z=>z.includes(f));if(b){s.upsertKeys=b;break}const G=q.find(z=>z.includes(f));if(G){s.upsertKeys=G;break}}(s.upsertKeys.length===0||h.intersection(s.updateOnDuplicate,n).length)&&(s.upsertKeys=n),s.upsertKeys=h.uniq(s.upsertKeys);const o=this.queryGenerator.insertQuery(e,r,u.rawAttributes,s);return await this.sequelize.query(o,s)}async bulkInsert(e,r,t,a){return t=l({},t),t.type=y.INSERT,(await this.sequelize.query(this.queryGenerator.bulkInsertQuery(e,r,t,a),t))[0]}async update(e,r,t,a,s){s=l({},s),s.hasTrigger=e&&e.constructor.options.hasTrigger;const u=this.queryGenerator.updateQuery(r,t,a,s,e.constructor.rawAttributes);return s.type=y.UPDATE,s.instance=e,await this.sequelize.query(u,s)}async bulkUpdate(e,r,t,a,s){a=w.cloneDeep(a),typeof t=="object"&&(t=w.cloneDeep(t));const u=this.queryGenerator.updateQuery(e,r,t,a,s),n=h.isObject(e)?e:{tableName:e},c=h.find(this.sequelize.modelManager.models,{tableName:n.tableName});return a.type=y.BULKUPDATE,a.model=c,await this.sequelize.query(u,a)}async delete(e,r,t,a){const s=[],u=this.queryGenerator.deleteQuery(r,t,{},e.constructor);if(a=l({},a),!!e.constructor&&!!e.constructor.associations){const n=Object.keys(e.constructor.associations),c=n.length;let q;for(let o=0;o<c;o++)q=e.constructor.associations[n[o]],q.options&&q.options.onDelete&&q.options.onDelete.toLowerCase()==="cascade"&&q.options.useHooks===!0&&s.push(q.accessors.get)}for(const n of s){let c=await e[n](a);if(!!c){Array.isArray(c)||(c=[c]);for(const q of c)await q.destroy(a)}}return a.instance=e,await this.sequelize.query(u,a)}async bulkDelete(e,r,t,a){return t=w.cloneDeep(t),t=h.defaults(t,{limit:null}),t.truncate===!0?this.sequelize.query(this.queryGenerator.truncateTableQuery(e,t),t):(typeof identifier=="object"&&(r=w.cloneDeep(r)),await this.sequelize.query(this.queryGenerator.deleteQuery(e,r,t,a),t))}async select(e,r,t){const a=i(l({},t),{type:y.SELECT,model:e});return await this.sequelize.query(this.queryGenerator.selectQuery(r,a,e),a)}async increment(e,r,t,a,s,u){u=w.cloneDeep(u);const n=this.queryGenerator.arithmeticQuery("+",r,t,a,s,u);return u.type=y.UPDATE,u.model=e,await this.sequelize.query(n,u)}async decrement(e,r,t,a,s,u){u=w.cloneDeep(u);const n=this.queryGenerator.arithmeticQuery("-",r,t,a,s,u);return u.type=y.UPDATE,u.model=e,await this.sequelize.query(n,u)}async rawSelect(e,r,t,a){r=w.cloneDeep(r),r=h.defaults(r,{raw:!0,plain:!0,type:y.SELECT});const s=this.queryGenerator.selectQuery(e,r,a);if(t===void 0)throw new Error("Please pass an attribute selector!");const u=await this.sequelize.query(s,r);if(!r.plain)return u;const n=u?u[t]:null;if(!r||!r.dataType)return n;const c=r.dataType;return(c instanceof m.DECIMAL||c instanceof m.FLOAT)&&n!==null?parseFloat(n):(c instanceof m.INTEGER||c instanceof m.BIGINT)&&n!==null?parseInt(n,10):c instanceof m.DATE&&n!==null&&!(n instanceof Date)?new Date(n):n}async createTrigger(e,r,t,a,s,u,n,c){const q=this.queryGenerator.createTrigger(e,r,t,a,s,u,n);if(c=c||{},q)return await this.sequelize.query(q,c)}async dropTrigger(e,r,t){const a=this.queryGenerator.dropTrigger(e,r);if(t=t||{},a)return await this.sequelize.query(a,t)}async renameTrigger(e,r,t,a){const s=this.queryGenerator.renameTrigger(e,r,t);if(a=a||{},s)return await this.sequelize.query(s,a)}async createFunction(e,r,t,a,s,u,n){const c=this.queryGenerator.createFunction(e,r,t,a,s,u,n);if(n=n||{},c)return await this.sequelize.query(c,n)}async dropFunction(e,r,t){const a=this.queryGenerator.dropFunction(e,r);if(t=t||{},a)return await this.sequelize.query(a,t)}async renameFunction(e,r,t,a){const s=this.queryGenerator.renameFunction(e,r,t);if(a=a||{},s)return await this.sequelize.query(s,a)}ensureEnums(){}async setIsolationLevel(e,r,t){if(!e||!(e instanceof T))throw new Error("Unable to set isolation level for a transaction without transaction object!");if(e.parent||!r)return;t=i(l({},t),{transaction:e.parent||e});const a=this.queryGenerator.setIsolationLevelQuery(r,{parent:e.parent});if(!!a)return await this.sequelize.query(a,t)}async startTransaction(e,r){if(!e||!(e instanceof T))throw new Error("Unable to start a transaction without transaction object!");r=i(l({},r),{transaction:e.parent||e}),r.transaction.name=e.parent?e.name:void 0;const t=this.queryGenerator.startTransactionQuery(e);return await this.sequelize.query(t,r)}async deferConstraints(e,r){r=i(l({},r),{transaction:e.parent||e});const t=this.queryGenerator.deferConstraintsQuery(r);if(t)return await this.sequelize.query(t,r)}async commitTransaction(e,r){if(!e||!(e instanceof T))throw new Error("Unable to commit a transaction without transaction object!");if(e.parent)return;r=i(l({},r),{transaction:e.parent||e,supportsSearchPath:!1,completesTransaction:!0});const t=this.queryGenerator.commitTransactionQuery(e),a=this.sequelize.query(t,r);return e.finished="commit",await a}async rollbackTransaction(e,r){if(!e||!(e instanceof T))throw new Error("Unable to rollback a transaction without transaction object!");r=i(l({},r),{transaction:e.parent||e,supportsSearchPath:!1,completesTransaction:!0}),r.transaction.name=e.parent?e.name:void 0;const t=this.queryGenerator.rollbackTransactionQuery(e),a=this.sequelize.query(t,r);return e.finished="rollback",await a}}S(D,"QueryInterface"),exports.QueryInterface=D;
//# sourceMappingURL=query-interface.js.map
