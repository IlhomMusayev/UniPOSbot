"use strict";var N=Object.defineProperty;var $=Object.getOwnPropertySymbols;var y=Object.prototype.hasOwnProperty,L=Object.prototype.propertyIsEnumerable;var R=(u,e,t)=>e in u?N(u,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):u[e]=t,_=(u,e)=>{for(var t in e||(e={}))y.call(e,t)&&R(u,t,e[t]);if($)for(var t of $(e))L.call(e,t)&&R(u,t,e[t]);return u};var A=(u,e)=>N(u,"name",{value:e,configurable:!0});const d=require("../../utils"),O=require("util"),p=require("../../data-types"),C=require("../abstract/query-generator"),g=require("semver"),m=require("lodash");class I extends C{setSearchPath(e){return`SET search_path to ${e};`}createDatabaseQuery(e,t){t=_({encoding:null,collate:null},t);const n={database:this.quoteTable(e),encoding:t.encoding?` ENCODING = ${this.escape(t.encoding)}`:"",collation:t.collate?` LC_COLLATE = ${this.escape(t.collate)}`:"",ctype:t.ctype?` LC_CTYPE = ${this.escape(t.ctype)}`:"",template:t.template?` TEMPLATE = ${this.escape(t.template)}`:""};return`CREATE DATABASE ${n.database}${n.encoding}${n.collation}${n.ctype}${n.template};`}dropDatabaseQuery(e){return`DROP DATABASE IF EXISTS ${this.quoteTable(e)};`}createSchema(e){const t=m.get(this,"sequelize.options.databaseVersion",0);return t&&g.gte(t,"9.2.0")?`CREATE SCHEMA IF NOT EXISTS ${e};`:`CREATE SCHEMA ${e};`}dropSchema(e){return`DROP SCHEMA IF EXISTS ${e} CASCADE;`}showSchemasQuery(){return"SELECT schema_name FROM information_schema.schemata WHERE schema_name <> 'information_schema' AND schema_name != 'public' AND schema_name !~ E'^pg_';"}versionQuery(){return"SHOW SERVER_VERSION"}createTableQuery(e,t,n){n=_({},n);const a=m.get(this,"sequelize.options.databaseVersion",0),i=[];let r="",s="";const o=this.quoteTable(e);n.comment&&typeof n.comment=="string"&&(r+=`; COMMENT ON TABLE ${o} IS ${this.escape(n.comment)}`);for(const c in t){const h=this.quoteIdentifier(c),f=t[c].indexOf("COMMENT ");if(f!==-1){const S=this.escape(t[c].substring(f+8));s+=`; COMMENT ON COLUMN ${o}.${h} IS ${S}`,t[c]=t[c].substring(0,f)}const T=this.dataTypeMapping(e,c,t[c]);i.push(`${h} ${T}`)}let l=i.join(", ");n.uniqueKeys&&m.each(n.uniqueKeys,c=>{c.customIndex&&(l+=`, UNIQUE (${c.fields.map(h=>this.quoteIdentifier(h)).join(", ")})`)});const E=m.reduce(t,(c,h,f)=>(h.includes("PRIMARY KEY")&&c.push(this.quoteIdentifier(f)),c),[]).join(",");return E.length>0&&(l+=`, PRIMARY KEY (${E})`),`CREATE TABLE ${a===0||g.gte(a,"9.1.0")?"IF NOT EXISTS ":""}${o} (${l})${r}${s};`}dropTableQuery(e,t){return t=t||{},`DROP TABLE IF EXISTS ${this.quoteTable(e)}${t.cascade?" CASCADE":""};`}showTablesQuery(){return"SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';"}describeTableQuery(e,t){return t||(t="public"),`SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = ${this.escape(e)} AND c.table_schema = ${this.escape(t)} `}_checkValidJsonStatement(e){if(typeof e!="string")return!1;const t=/^\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\([^)]*\)/i,n=/^\s*(->>?|#>>?|@>|<@|\?[|&]?|\|{2}|#-)/i,a=/^\s*((?:([`"'])(?:(?!\2).|\2{2})*\2)|[\w\d\s]+|[().,;+-])/i;let i=0,r=0,s=0,o=!1,l=!1;for(;i<e.length;){const E=e.substr(i),c=t.exec(E);if(c){i+=c[0].indexOf("("),o=!0;continue}const h=n.exec(E);if(h){i+=h[0].length,o=!0;continue}const f=a.exec(E);if(f){const T=f[1];if(T==="(")r++;else if(T===")")s++;else if(T===";"){l=!0;break}i+=f[0].length;continue}break}if(l|=r!==s,o&&l)throw new Error(`Invalid json statement: ${e}`);return o}handleSequelizeMethod(e,t,n,a,i){if(e instanceof d.Json){if(e.conditions)return this.parseConditionObject(e.conditions).map(s=>`${this.jsonPathExtractionQuery(s.path[0],m.tail(s.path))} = '${s.value}'`).join(" AND ");if(e.path){let r;if(this._checkValidJsonStatement(e.path))r=e.path;else{const s=m.toPath(e.path),o=s.shift();r=this.jsonPathExtractionQuery(o,s)}return e.value&&(r+=O.format(" = %s",this.escape(e.value))),r}}return super.handleSequelizeMethod.call(this,e,t,n,a,i)}addColumnQuery(e,t,n){const a=this.attributeToSQL(n,{context:"addColumn",table:e,key:t}),i=n.type||n,r=this.dataTypeMapping(e,t,a),s=this.quoteIdentifier(t);let l=`ALTER TABLE ${this.quoteTable(this.extractTableDetails(e))} ADD COLUMN ${s} ${r};`;return i instanceof p.ENUM?l=this.pgEnum(e,t,i)+l:i.type&&i.type instanceof p.ENUM&&(l=this.pgEnum(e,t,i.type)+l),l}removeColumnQuery(e,t){const n=this.quoteTable(this.extractTableDetails(e)),a=this.quoteIdentifier(t);return`ALTER TABLE ${n} DROP COLUMN ${a};`}changeColumnQuery(e,t){const n=A(i=>`ALTER TABLE ${this.quoteTable(e)} ALTER COLUMN ${i};`,"query"),a=[];for(const i in t){let r=this.dataTypeMapping(e,i,t[i]),s="";r.includes("NOT NULL")?(s+=n(`${this.quoteIdentifier(i)} SET NOT NULL`),r=r.replace("NOT NULL","").trim()):r.includes("REFERENCES")||(s+=n(`${this.quoteIdentifier(i)} DROP NOT NULL`)),r.includes("DEFAULT")?(s+=n(`${this.quoteIdentifier(i)} SET DEFAULT ${r.match(/DEFAULT ([^;]+)/)[1]}`),r=r.replace(/(DEFAULT[^;]+)/,"").trim()):r.includes("REFERENCES")||(s+=n(`${this.quoteIdentifier(i)} DROP DEFAULT`)),t[i].startsWith("ENUM(")&&(s+=this.pgEnum(e,i,t[i]),r=r.replace(/^ENUM\(.+\)/,this.pgEnumName(e,i,{schema:!1})),r+=` USING (${this.quoteIdentifier(i)}::${this.pgEnumName(e,i)})`),r.match(/UNIQUE;*$/)&&(r=r.replace(/UNIQUE;*$/,""),s+=n(`ADD UNIQUE (${this.quoteIdentifier(i)})`).replace("ALTER COLUMN","")),r.includes("REFERENCES")?(r=r.replace(/.+?(?=REFERENCES)/,""),s+=n(`ADD FOREIGN KEY (${this.quoteIdentifier(i)}) ${r}`).replace("ALTER COLUMN","")):s+=n(`${this.quoteIdentifier(i)} TYPE ${r}`),a.push(s)}return a.join("")}renameColumnQuery(e,t,n){const a=[];for(const i in n)a.push(`${this.quoteIdentifier(t)} TO ${this.quoteIdentifier(i)}`);return`ALTER TABLE ${this.quoteTable(e)} RENAME COLUMN ${a.join(", ")};`}fn(e,t,n,a,i,r){return e=e||"testfunc",r=r||"plpgsql",i=i?`RETURNS ${i}`:"",n=n||"",`CREATE OR REPLACE FUNCTION pg_temp.${e}(${n}) ${i} AS $func$ BEGIN ${a} END; $func$ LANGUAGE ${r}; SELECT * FROM pg_temp.${e}();`}truncateTableQuery(e,t={}){return[`TRUNCATE ${this.quoteTable(e)}`,t.restartIdentity?" RESTART IDENTITY":"",t.cascade?" CASCADE":""].join("")}deleteQuery(e,t,n={},a){const i=this.quoteTable(e);let r=this.getWhereConditions(t,null,a,n);const s=n.limit?` LIMIT ${this.escape(n.limit)}`:"";let o="",l="";if(r&&(r=` WHERE ${r}`),n.limit){if(!a)throw new Error("Cannot LIMIT delete without a model.");const E=Object.values(a.primaryKeys).map(c=>this.quoteIdentifier(c.field)).join(",");return o=a.primaryKeyAttributes.length>1?`(${E})`:E,l=E,`DELETE FROM ${i} WHERE ${o} IN (SELECT ${l} FROM ${i}${r}${s})`}return`DELETE FROM ${i}${r}`}showIndexesQuery(e){let t="",n="";return typeof e!="string"&&(t=", pg_namespace s",n=` AND s.oid = t.relnamespace AND s.nspname = '${e.schema}'`,e=e.tableName),`SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a${t} WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = '${e}'${n} GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;`}showConstraintsQuery(e){return['SELECT constraint_catalog AS "constraintCatalog",','constraint_schema AS "constraintSchema",','constraint_name AS "constraintName",','table_catalog AS "tableCatalog",','table_schema AS "tableSchema",','table_name AS "tableName",','constraint_type AS "constraintType",','is_deferrable AS "isDeferrable",','initially_deferred AS "initiallyDeferred"',"from INFORMATION_SCHEMA.table_constraints",`WHERE table_name='${e}';`].join(" ")}removeIndexQuery(e,t){let n=t;return typeof n!="string"&&(n=d.underscore(`${e}_${t.join("_")}`)),`DROP INDEX IF EXISTS ${this.quoteIdentifiers(n)}`}addLimitAndOffset(e){let t="";return e.limit!=null&&(t+=" LIMIT "+this.escape(e.limit)),e.offset!=null&&(t+=" OFFSET "+this.escape(e.offset)),t}attributeToSQL(e,t){m.isPlainObject(e)||(e={type:e});let n;if(e.type instanceof p.ENUM||e.type instanceof p.ARRAY&&e.type.type instanceof p.ENUM){const i=e.type.type||e.type;let r=e.values;if(i.values&&!e.values&&(r=i.values),Array.isArray(r)&&r.length>0)n=`ENUM(${r.map(s=>this.escape(s)).join(", ")})`,e.type instanceof p.ARRAY&&(n+="[]");else throw new Error("Values for ENUM haven't been defined.")}n||(n=e.type);let a=n.toString();if(Object.prototype.hasOwnProperty.call(e,"allowNull")&&!e.allowNull&&(a+=" NOT NULL"),e.autoIncrement&&(e.autoIncrementIdentity?a+=" GENERATED BY DEFAULT AS IDENTITY":a+=" SERIAL"),d.defaultValueSchemable(e.defaultValue)&&(a+=` DEFAULT ${this.escape(e.defaultValue,e)}`),e.unique===!0&&(a+=" UNIQUE"),e.primaryKey&&(a+=" PRIMARY KEY"),e.references){let i=this.quoteTable(e.references.model),r;t.schema?r=t.schema:(!e.references.model||typeof e.references.model=="string")&&t.table&&t.table.schema&&(r=t.table.schema),r&&(i=this.quoteTable(this.addSchema({tableName:i,_schema:r})));let s;e.references.key?s=this.quoteIdentifiers(e.references.key):s=this.quoteIdentifier("id"),a+=` REFERENCES ${i} (${s})`,e.onDelete&&(a+=` ON DELETE ${e.onDelete.toUpperCase()}`),e.onUpdate&&(a+=` ON UPDATE ${e.onUpdate.toUpperCase()}`),e.references.deferrable&&(a+=` ${e.references.deferrable.toString(this)}`)}if(e.comment&&typeof e.comment=="string")if(t&&(t.context==="addColumn"||t.context==="changeColumn")){const i=this.quoteIdentifier(t.key),r=this.escape(e.comment);a+=`; COMMENT ON COLUMN ${this.quoteTable(t.table)}.${i} IS ${r}`}else a+=` COMMENT ${e.comment}`;return a}deferConstraintsQuery(e){return e.deferrable.toString(this)}setConstraintQuery(e,t){let n="ALL";return e&&(n=e.map(a=>this.quoteIdentifier(a)).join(", ")),`SET CONSTRAINTS ${n} ${t}`}setDeferredQuery(e){return this.setConstraintQuery(e,"DEFERRED")}setImmediateQuery(e){return this.setConstraintQuery(e,"IMMEDIATE")}attributesToSQL(e,t){const n={};for(const a in e){const i=e[a];n[i.field||a]=this.attributeToSQL(i,_({key:a},t))}return n}createTrigger(e,t,n,a,i,r,s){const o=this.decodeTriggerEventType(n),l=this.expandTriggerEventSpec(a),E=this.expandOptions(s),c=this._expandFunctionParamList(r);return`CREATE ${this.triggerEventTypeIsConstraint(n)}TRIGGER ${this.quoteIdentifier(t)} ${o} ${l} ON ${this.quoteTable(e)}${E?` ${E}`:""} EXECUTE PROCEDURE ${i}(${c});`}dropTrigger(e,t){return`DROP TRIGGER ${this.quoteIdentifier(t)} ON ${this.quoteTable(e)} RESTRICT;`}renameTrigger(e,t,n){return`ALTER TRIGGER ${this.quoteIdentifier(t)} ON ${this.quoteTable(e)} RENAME TO ${this.quoteIdentifier(n)};`}createFunction(e,t,n,a,i,r,s){if(!e||!n||!a||!i)throw new Error("createFunction missing some parameters. Did you pass functionName, returnType, language and body?");const o=this._expandFunctionParamList(t),l=s&&s.variables?this._expandFunctionVariableList(s.variables):"",E=this.expandOptions(r);return`${s&&s.force?"CREATE OR REPLACE FUNCTION":"CREATE FUNCTION"} ${e}(${o}) RETURNS ${n} AS $func$ ${l} BEGIN ${i} END; $func$ language '${a}'${E};`}dropFunction(e,t){if(!e)throw new Error("requires functionName");const n=this._expandFunctionParamList(t);return`DROP FUNCTION ${e}(${n}) RESTRICT;`}renameFunction(e,t,n){const a=this._expandFunctionParamList(t);return`ALTER FUNCTION ${e}(${a}) RENAME TO ${n};`}pgEscapeAndQuote(e){return this.quoteIdentifier(d.removeTicks(this.escape(e),"'"))}_expandFunctionParamList(e){if(e===void 0||!Array.isArray(e))throw new Error("_expandFunctionParamList: function parameters array required, including an empty one for no arguments");const t=[];return e.forEach(n=>{const a=[];if(n.type)n.direction&&a.push(n.direction),n.name&&a.push(n.name),a.push(n.type);else throw new Error("function or trigger used with a parameter without any type");const i=a.join(" ");i&&t.push(i)}),t.join(", ")}_expandFunctionVariableList(e){if(!Array.isArray(e))throw new Error("_expandFunctionVariableList: function variables must be an array");const t=[];return e.forEach(n=>{if(!n.name||!n.type)throw new Error("function variable must have a name and type");let a=`DECLARE ${n.name} ${n.type}`;n.default&&(a+=` := ${n.default}`),a+=";",t.push(a)}),t.join(" ")}expandOptions(e){return e===void 0||m.isEmpty(e)?"":e.join(" ")}decodeTriggerEventType(e){const t={after:"AFTER",before:"BEFORE",instead_of:"INSTEAD OF",after_constraint:"AFTER"};if(!t[e])throw new Error(`Invalid trigger event specified: ${e}`);return t[e]}triggerEventTypeIsConstraint(e){return e==="after_constraint"?"CONSTRAINT ":""}expandTriggerEventSpec(e){if(m.isEmpty(e))throw new Error("no table change events specified to trigger on");return m.map(e,(t,n)=>{const a={insert:"INSERT",update:"UPDATE",delete:"DELETE",truncate:"TRUNCATE"};if(!a[t])throw new Error(`parseTriggerEventSpec: undefined trigger event ${n}`);let i=a[t];return i==="UPDATE"&&Array.isArray(t)&&t.length>0&&(i+=` OF ${t.join(", ")}`),i}).join(" OR ")}pgEnumName(e,t,n){n=n||{};const a=this.extractTableDetails(e,n);let i=d.addTicks(d.generateEnumName(a.tableName,t),'"');return n.schema!==!1&&a.schema&&(i=this.quoteIdentifier(a.schema)+a.delimiter+i),i}pgListEnums(e,t,n){let a="";const i=this.extractTableDetails(e,n);return i.tableName&&t&&(a=` AND t.typname=${this.pgEnumName(i.tableName,t,{schema:!1}).replace(/"/g,"'")}`),`SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = '${i.schema}'${a} GROUP BY 1`}pgEnum(e,t,n,a){const i=this.pgEnumName(e,t,a);let r;n.values?r=`ENUM(${n.values.map(o=>this.escape(o)).join(", ")})`:r=n.toString().match(/^ENUM\(.+\)/)[0];let s=`CREATE TYPE ${i} AS ${r};`;return!!a&&a.force===!0&&(s=this.pgEnumDrop(e,t)+s),s}pgEnumAdd(e,t,n,a){let r=`ALTER TYPE ${this.pgEnumName(e,t)} ADD VALUE `;return g.gte(this.sequelize.options.databaseVersion,"9.3.0")&&(r+="IF NOT EXISTS "),r+=this.escape(n),a.before?r+=` BEFORE ${this.escape(a.before)}`:a.after&&(r+=` AFTER ${this.escape(a.after)}`),r}pgEnumDrop(e,t,n){return n=n||this.pgEnumName(e,t),`DROP TYPE IF EXISTS ${n}; `}fromArray(e){e=e.replace(/^{/,"").replace(/}$/,"");let t=e.match(/("(?:\\.|[^"\\\\])*"|[^,]*)(?:\s*,\s*|\s*$)/ig);return t.length<1?[]:(t=t.map(n=>n.replace(/",$/,"").replace(/,$/,"").replace(/(^"|"$)/g,"")),t.slice(0,-1))}dataTypeMapping(e,t,n){return n.includes("PRIMARY KEY")&&(n=n.replace("PRIMARY KEY","")),n.includes("SERIAL")&&(n.includes("BIGINT")?(n=n.replace("SERIAL","BIGSERIAL"),n=n.replace("BIGINT","")):n.includes("SMALLINT")?(n=n.replace("SERIAL","SMALLSERIAL"),n=n.replace("SMALLINT","")):n=n.replace("INTEGER",""),n=n.replace("NOT NULL","")),n.startsWith("ENUM(")&&(n=n.replace(/^ENUM\(.+\)/,this.pgEnumName(e,t))),n}getForeignKeysQuery(e){return`SELECT conname as constraint_name, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM pg_catalog.pg_constraint r WHERE r.conrelid = (SELECT oid FROM pg_class WHERE relname = '${e}' LIMIT 1) AND r.contype = 'f' ORDER BY 1;`}_getForeignKeyReferencesQueryPrefix(){return"SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name "}getForeignKeyReferencesQuery(e,t,n){return`${this._getForeignKeyReferencesQueryPrefix()}WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = '${e}'${t?` AND tc.table_catalog = '${t}'`:""}${n?` AND tc.table_schema = '${n}'`:""}`}getForeignKeyReferenceQuery(e,t){const n=e.tableName||e,a=e.schema;return`${this._getForeignKeyReferencesQueryPrefix()}WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name='${n}' AND  kcu.column_name = '${t}'${a?` AND tc.table_schema = '${a}'`:""}`}dropForeignKeyQuery(e,t){return`ALTER TABLE ${this.quoteTable(e)} DROP CONSTRAINT ${this.quoteIdentifier(t)};`}}A(I,"PostgresQueryGenerator"),module.exports=I;
//# sourceMappingURL=query-generator.js.map
