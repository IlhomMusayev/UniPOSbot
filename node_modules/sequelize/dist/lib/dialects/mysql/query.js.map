{
  "version": 3,
  "sources": ["../../../../lib/dialects/mysql/query.js"],
  "sourcesContent": ["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\n\nconst debug = logger.debugContext('sql:mysql');\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, { showWarnings: false, ...options });\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n    const replacementFunc = (match, key, values_) => {\n      if (values_[key] !== undefined) {\n        bindParam.push(values_[key]);\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : undefined];\n  }\n\n  async run(sql, parameters) {\n    this.sql = sql;\n    const { connection, options } = this;\n\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug('parameters(%j)', parameters);\n    }\n\n    let results;\n    const errForStack = new Error();\n\n    try {\n      if (parameters && parameters.length) {\n        results = await new Promise((resolve, reject) => {\n          connection\n            .execute(sql, parameters, (error, result) => error ? reject(error) : resolve(result))\n            .setMaxListeners(100);\n        });\n      } else {\n        results = await new Promise((resolve, reject) => {\n          connection\n            .query({ sql }, (error, result) => error ? reject(error) : resolve(result))\n            .setMaxListeners(100);\n        });\n      }\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        // MySQL automatically rolls-back transactions in the event of a deadlock.\n        // However, we still initiate a manual rollback to ensure the connection gets released - see #13102.\n        try {\n          await options.transaction.rollback();\n        } catch (error_) {\n          // Ignore errors - since MySQL automatically rolled back, we're\n          // not that worried about this redundant rollback failing.\n        }\n\n        options.transaction.finished = 'rollback';\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error, errForStack.stack);\n    } finally {\n      complete();\n    }\n\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n    return this.formatResults(results);\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primary key\n        if (\n          data.constructor.name === 'ResultSetHeader'\n          && this.model\n          && this.model.autoIncrementAttribute\n          && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute\n          && this.model.rawAttributes[this.model.primaryKeyAttribute]\n        ) {\n          const startId = data[this.getInsertIdField()];\n          result = [];\n          for (let i = startId; i < startId + data.affectedRows; i++) {\n            result.push({ [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i });\n          }\n        } else {\n          result = data[this.getInsertIdField()];\n        }\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        const enumRegex = /^enum/i;\n        result[_result.Field] = {\n          type: enumRegex.test(_result.Type) ? _result.Type.replace(enumRegex, 'ENUM') : _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI',\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra')\n            && _result.Extra.toLowerCase() === 'auto_increment',\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n      return result;\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data.affectedRows;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return data;\n    }\n    if (this.isRawQuery()) {\n      // MySQL returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      return [data, data];\n    }\n\n    return result;\n  }\n\n  async logWarnings(results) {\n    const warningResults = await this.run('SHOW WARNINGS');\n    const warningMessage = `MySQL Warnings (${this.connection.uuid || 'default'}): `;\n    const messages = [];\n    for (const _warningRow of warningResults) {\n      if (_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function') {\n        continue;\n      }\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n          }\n        }\n      }\n    }\n\n    this.sequelize.log(warningMessage + messages.join('; '), this.options);\n\n    return results;\n  }\n\n  formatError(err, errStack) {\n    const errCode = err.errno || err.code;\n\n    switch (errCode) {\n      case ER_DUP_ENTRY: {\n        const match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?$/);\n        let fields = {};\n        let message = 'Validation error';\n        const values = match ? match[1].split('-') : undefined;\n        const fieldKey = match ? match[2].split('.').pop() : undefined;\n        const fieldVal = match ? match[1] : undefined;\n        const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n        if (uniqueKey) {\n          if (uniqueKey.msg) message = uniqueKey.msg;\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[fieldKey] = fieldVal;\n        }\n\n        const errors = [];\n        _.forOwn(fields, (value, field) => {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            value,\n            this.instance,\n            'not_unique'\n          ));\n        });\n\n        return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n      }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW: {\n        // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n        const match = err.message.match(\n          /CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/\n        );\n        const quoteChar = match ? match[1] : '`';\n        const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          reltype: String(errCode) === String(ER_ROW_IS_REFERENCED) ? 'parent' : 'child',\n          table: match ? match[4] : undefined,\n          fields,\n          value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\n          index: match ? match[2] : undefined,\n          parent: err,\n          stack: errStack\n        });\n      }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.Key_name in acc)) {\n        acc[item.Key_name] = item;\n        item.fields = [];\n      }\n\n      acc[item.Key_name].fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n      delete item.column_name;\n\n      return acc;\n    }, {});\n\n    return _.map(data, item => ({\n      primary: item.Key_name === 'PRIMARY',\n      fields: item.fields,\n      name: item.Key_name,\n      tableName: item.Table,\n      unique: item.Non_unique !== 1,\n      type: item.Index_type\n    }));\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"],
  "mappings": "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",
  "names": []
}
