{
  "version": 3,
  "sources": ["../../../../lib/dialects/mssql/query-interface.js"],
  "sourcesContent": ["'use strict';\n\nconst _ = require('lodash');\n\nconst Utils = require('../../utils');\nconst QueryTypes = require('../../query-types');\nconst Op = require('../../operators');\nconst { QueryInterface } = require('../abstract/query-interface');\n\n/**\n * The interface that Sequelize uses to talk with MSSQL database\n */\nclass MSSqlQueryInterface extends QueryInterface {\n  /**\n  * A wrapper that fixes MSSQL's inability to cleanly remove columns from existing tables if they have a default constraint.\n  *\n  * @override\n  */\n  async removeColumn(tableName, attributeName, options) {\n    options = { raw: true, ...options || {} };\n\n    const findConstraintSql = this.queryGenerator.getDefaultConstraintQuery(tableName, attributeName);\n    const [results0] = await this.sequelize.query(findConstraintSql, options);\n    if (results0.length) {\n      // No default constraint found -- we can cleanly remove the column\n      const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, results0[0].name);\n      await this.sequelize.query(dropConstraintSql, options);\n    }\n    const findForeignKeySql = this.queryGenerator.getForeignKeyQuery(tableName, attributeName);\n    const [results] = await this.sequelize.query(findForeignKeySql, options);\n    if (results.length) {\n      // No foreign key constraints found, so we can remove the column\n      const dropForeignKeySql = this.queryGenerator.dropForeignKeyQuery(tableName, results[0].constraint_name);\n      await this.sequelize.query(dropForeignKeySql, options);\n    }\n    //Check if the current column is a primaryKey\n    const primaryKeyConstraintSql = this.queryGenerator.getPrimaryKeyConstraintQuery(tableName, attributeName);\n    const [result] = await this.sequelize.query(primaryKeyConstraintSql, options);\n    if (result.length) {\n      const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, result[0].constraintName);\n      await this.sequelize.query(dropConstraintSql, options);\n    }\n    const removeSql = this.queryGenerator.removeColumnQuery(tableName, attributeName);\n    return this.sequelize.query(removeSql, options);\n  }\n\n  /**\n   * @override\n   */\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    const model = options.model;\n    const wheres = [];\n\n    options = { ...options };\n\n    if (!Utils.isWhereEmpty(where)) {\n      wheres.push(where);\n    }\n\n    // Lets combine unique keys and indexes into one\n    let indexes = Object.values(model.uniqueKeys).map(item => item.fields);\n    indexes = indexes.concat(Object.values(model._indexes).filter(item => item.unique).map(item => item.fields));\n\n    const attributes = Object.keys(insertValues);\n    for (const index of indexes) {\n      if (_.intersection(attributes, index).length === index.length) {\n        where = {};\n        for (const field of index) {\n          where[field] = insertValues[field];\n        }\n        wheres.push(where);\n      }\n    }\n\n    where = { [Op.or]: wheres };\n\n    options.type = QueryTypes.UPSERT;\n    options.raw = true;\n\n    const sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);\n    return await this.sequelize.query(sql, options);\n  }\n}\n\nexports.MSSqlQueryInterface = MSSqlQueryInterface;\n"],
  "mappings": "yZAEA,KAAM,GAAI,QAAQ,UAEZ,EAAQ,QAAQ,eAChB,EAAa,QAAQ,qBACrB,EAAK,QAAQ,mBACb,CAAE,kBAAmB,QAAQ,+BAKnC,eAAkC,EAAe,MAMzC,cAAa,EAAW,EAAe,EAAS,CACpD,EAAU,GAAE,IAAK,IAAS,GAAW,IAErC,KAAM,GAAoB,KAAK,eAAe,0BAA0B,EAAW,GAC7E,CAAC,GAAY,KAAM,MAAK,UAAU,MAAM,EAAmB,GACjE,GAAI,EAAS,OAAQ,CAEnB,KAAM,GAAoB,KAAK,eAAe,oBAAoB,EAAW,EAAS,GAAG,MACzF,KAAM,MAAK,UAAU,MAAM,EAAmB,GAEhD,KAAM,GAAoB,KAAK,eAAe,mBAAmB,EAAW,GACtE,CAAC,GAAW,KAAM,MAAK,UAAU,MAAM,EAAmB,GAChE,GAAI,EAAQ,OAAQ,CAElB,KAAM,GAAoB,KAAK,eAAe,oBAAoB,EAAW,EAAQ,GAAG,iBACxF,KAAM,MAAK,UAAU,MAAM,EAAmB,GAGhD,KAAM,GAA0B,KAAK,eAAe,6BAA6B,EAAW,GACtF,CAAC,GAAU,KAAM,MAAK,UAAU,MAAM,EAAyB,GACrE,GAAI,EAAO,OAAQ,CACjB,KAAM,GAAoB,KAAK,eAAe,oBAAoB,EAAW,EAAO,GAAG,gBACvF,KAAM,MAAK,UAAU,MAAM,EAAmB,GAEhD,KAAM,GAAY,KAAK,eAAe,kBAAkB,EAAW,GACnE,MAAO,MAAK,UAAU,MAAM,EAAW,QAMnC,QAAO,EAAW,EAAc,EAAc,EAAO,EAAS,CAClE,KAAM,GAAQ,EAAQ,MAChB,EAAS,GAEf,EAAU,KAAK,GAEV,EAAM,aAAa,IACtB,EAAO,KAAK,GAId,GAAI,GAAU,OAAO,OAAO,EAAM,YAAY,IAAI,GAAQ,EAAK,QAC/D,EAAU,EAAQ,OAAO,OAAO,OAAO,EAAM,UAAU,OAAO,GAAQ,EAAK,QAAQ,IAAI,GAAQ,EAAK,SAEpG,KAAM,GAAa,OAAO,KAAK,GAC/B,SAAW,KAAS,GAClB,GAAI,EAAE,aAAa,EAAY,GAAO,SAAW,EAAM,OAAQ,CAC7D,EAAQ,GACR,SAAW,KAAS,GAClB,EAAM,GAAS,EAAa,GAE9B,EAAO,KAAK,GAIhB,EAAQ,EAAG,EAAG,IAAK,GAEnB,EAAQ,KAAO,EAAW,OAC1B,EAAQ,IAAM,GAEd,KAAM,GAAM,KAAK,eAAe,YAAY,EAAW,EAAc,EAAc,EAAO,EAAO,GACjG,MAAO,MAAM,MAAK,UAAU,MAAM,EAAK,IApE3C,2BAwEA,QAAQ,oBAAsB",
  "names": []
}
