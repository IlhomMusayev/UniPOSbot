"use strict";var f=Object.defineProperty;var d=Object.getOwnPropertySymbols;var S=Object.prototype.hasOwnProperty,z=Object.prototype.propertyIsEnumerable;var g=(n,e,r)=>e in n?f(n,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):n[e]=r,l=(n,e)=>{for(var r in e||(e={}))S.call(e,r)&&g(n,r,e[r]);if(d)for(var r of d(e))z.call(e,r)&&g(n,r,e[r]);return n};var Q=(n,e)=>f(n,"name",{value:e,configurable:!0});const G=require("lodash"),K=require("../../utils"),m=require("../../query-types"),p=require("../../operators"),{QueryInterface:v}=require("../abstract/query-interface");class C extends v{async removeColumn(e,r,s){s=l({raw:!0},s||{});const i=this.queryGenerator.getDefaultConstraintQuery(e,r),[u]=await this.sequelize.query(i,s);if(u.length){const t=this.queryGenerator.dropConstraintQuery(e,u[0].name);await this.sequelize.query(t,s)}const q=this.queryGenerator.getForeignKeyQuery(e,r),[y]=await this.sequelize.query(q,s);if(y.length){const t=this.queryGenerator.dropForeignKeyQuery(e,y[0].constraint_name);await this.sequelize.query(t,s)}const o=this.queryGenerator.getPrimaryKeyConstraintQuery(e,r),[c]=await this.sequelize.query(o,s);if(c.length){const t=this.queryGenerator.dropConstraintQuery(e,c[0].constraintName);await this.sequelize.query(t,s)}const a=this.queryGenerator.removeColumnQuery(e,r);return this.sequelize.query(a,s)}async upsert(e,r,s,i,u){const q=u.model,y=[];u=l({},u),K.isWhereEmpty(i)||y.push(i);let o=Object.values(q.uniqueKeys).map(t=>t.fields);o=o.concat(Object.values(q._indexes).filter(t=>t.unique).map(t=>t.fields));const c=Object.keys(r);for(const t of o)if(G.intersection(c,t).length===t.length){i={};for(const h of t)i[h]=r[h];y.push(i)}i={[p.or]:y},u.type=m.UPSERT,u.raw=!0;const a=this.queryGenerator.upsertQuery(e,r,s,i,q,u);return await this.sequelize.query(a,u)}}Q(C,"MSSqlQueryInterface"),exports.MSSqlQueryInterface=C;
//# sourceMappingURL=query-interface.js.map
