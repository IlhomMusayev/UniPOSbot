{
  "version": 3,
  "sources": ["../../../../lib/dialects/abstract/query.js"],
  "sourcesContent": ["'use strict';\n\nconst _ = require('lodash');\nconst SqlString = require('../../sql-string');\nconst QueryTypes = require('../../query-types');\nconst Dot = require('dottie');\nconst deprecations = require('../../utils/deprecations');\nconst uuid = require('uuid').v4;\n\nclass AbstractQuery {\n\n  constructor(connection, sequelize, options) {\n    this.uuid = uuid();\n    this.connection = connection;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.sequelize = sequelize;\n    this.options = {\n      plain: false,\n      raw: false,\n      // eslint-disable-next-line no-console\n      logging: console.log,\n      ...options\n    };\n    this.checkLoggingOption();\n  }\n\n  /**\n   * rewrite query with parameters\n   *\n   * Examples:\n   *\n   *   query.formatBindParameters('select $1 as foo', ['fooval']);\n   *\n   *   query.formatBindParameters('select $foo as foo', { foo: 'fooval' });\n   *\n   * Options\n   *   skipUnescape: bool, skip unescaping $$\n   *   skipValueReplace: bool, do not replace (but do unescape $$). Check correct syntax and if all values are available\n   *\n   * @param {string} sql\n   * @param {object|Array} values\n   * @param {string} dialect\n   * @param {Function} [replacementFunc]\n   * @param {object} [options]\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect, replacementFunc, options) {\n    if (!values) {\n      return [sql, []];\n    }\n\n    options = options || {};\n    if (typeof replacementFunc !== 'function') {\n      options = replacementFunc || {};\n      replacementFunc = undefined;\n    }\n\n    if (!replacementFunc) {\n      if (options.skipValueReplace) {\n        replacementFunc = (match, key, values) => {\n          if (values[key] !== undefined) {\n            return match;\n          }\n          return undefined;\n        };\n      } else {\n        replacementFunc = (match, key, values, timeZone, dialect) => {\n          if (values[key] !== undefined) {\n            return SqlString.escape(values[key], timeZone, dialect);\n          }\n          return undefined;\n        };\n      }\n    } else if (options.skipValueReplace) {\n      const origReplacementFunc = replacementFunc;\n      replacementFunc = (match, key, values, timeZone, dialect, options) => {\n        if (origReplacementFunc(match, key, values, timeZone, dialect, options) !== undefined) {\n          return match;\n        }\n        return undefined;\n      };\n    }\n\n    const timeZone = null;\n    const list = Array.isArray(values);\n    sql = sql.replace(/\\B\\$(\\$|\\w+)/g, (match, key) => {\n      if ('$' === key) {\n        return options.skipUnescape ? match : key;\n      }\n\n      let replVal;\n      if (list) {\n        if (key.match(/^[1-9]\\d*$/)) {\n          key = key - 1;\n          replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n        }\n      } else if (!key.match(/^\\d*$/)) {\n        replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n      }\n      if (replVal === undefined) {\n        throw new Error(`Named bind parameter \"${match}\" has no value in the given object.`);\n      }\n      return replVal;\n    });\n    return [sql, []];\n  }\n\n  /**\n   * Execute the passed sql query.\n   *\n   * Examples:\n   *\n   *     query.run('SELECT 1')\n   *\n   * @private\n   */\n  run() {\n    throw new Error('The run method wasn\\'t overwritten!');\n  }\n\n  /**\n   * Check the logging option of the instance and print deprecation warnings.\n   *\n   * @private\n   */\n  checkLoggingOption() {\n    if (this.options.logging === true) {\n      deprecations.noTrueLogging();\n      // eslint-disable-next-line no-console\n      this.options.logging = console.log;\n    }\n  }\n\n  /**\n   * Get the attributes of an insert query, which contains the just inserted id.\n   *\n   * @returns {string} The field name.\n   * @private\n   */\n  getInsertIdField() {\n    return 'insertId';\n  }\n\n  getUniqueConstraintErrorMessage(field) {\n    let message = field ? `${field} must be unique` : 'Must be unique';\n\n    if (field && this.model) {\n      for (const key of Object.keys(this.model.uniqueKeys)) {\n        if (this.model.uniqueKeys[key].fields.includes(field.replace(/\"/g, ''))) {\n          if (this.model.uniqueKeys[key].msg) {\n            message = this.model.uniqueKeys[key].msg;\n          }\n        }\n      }\n    }\n    return message;\n  }\n\n  isRawQuery() {\n    return this.options.type === QueryTypes.RAW;\n  }\n\n  isVersionQuery() {\n    return this.options.type === QueryTypes.VERSION;\n  }\n\n  isUpsertQuery() {\n    return this.options.type === QueryTypes.UPSERT;\n  }\n\n  isInsertQuery(results, metaData) {\n    let result = true;\n\n    if (this.options.type === QueryTypes.INSERT) {\n      return true;\n    }\n\n    // is insert query if sql contains insert into\n    result = result && this.sql.toLowerCase().startsWith('insert into');\n\n    // is insert query if no results are passed or if the result has the inserted id\n    result = result && (!results || Object.prototype.hasOwnProperty.call(results, this.getInsertIdField()));\n\n    // is insert query if no metadata are passed or if the metadata has the inserted id\n    result = result && (!metaData || Object.prototype.hasOwnProperty.call(metaData, this.getInsertIdField()));\n\n    return result;\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n\n      id = id || results && results[this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n\n  isShowTablesQuery() {\n    return this.options.type === QueryTypes.SHOWTABLES;\n  }\n\n  handleShowTablesQuery(results) {\n    return _.flatten(results.map(resultSet => Object.values(resultSet)));\n  }\n\n  isShowIndexesQuery() {\n    return this.options.type === QueryTypes.SHOWINDEXES;\n  }\n\n  isShowConstraintsQuery() {\n    return this.options.type === QueryTypes.SHOWCONSTRAINTS;\n  }\n\n  isDescribeQuery() {\n    return this.options.type === QueryTypes.DESCRIBE;\n  }\n\n  isSelectQuery() {\n    return this.options.type === QueryTypes.SELECT;\n  }\n\n  isBulkUpdateQuery() {\n    return this.options.type === QueryTypes.BULKUPDATE;\n  }\n\n  isBulkDeleteQuery() {\n    return this.options.type === QueryTypes.BULKDELETE;\n  }\n\n  isForeignKeysQuery() {\n    return this.options.type === QueryTypes.FOREIGNKEYS;\n  }\n\n  isUpdateQuery() {\n    return this.options.type === QueryTypes.UPDATE;\n  }\n\n  handleSelectQuery(results) {\n    let result = null;\n\n    // Map raw fields to names if a mapping is provided\n    if (this.options.fieldMap) {\n      const fieldMap = this.options.fieldMap;\n      results = results.map(result => _.reduce(fieldMap, (result, name, field) => {\n        if (result[field] !== undefined && name !== field) {\n          result[name] = result[field];\n          delete result[field];\n        }\n        return result;\n      }, result));\n    }\n\n    // Raw queries\n    if (this.options.raw) {\n      result = results.map(result => {\n        let o = {};\n\n        for (const key in result) {\n          if (Object.prototype.hasOwnProperty.call(result, key)) {\n            o[key] = result[key];\n          }\n        }\n\n        if (this.options.nest) {\n          o = Dot.transform(o);\n        }\n\n        return o;\n      });\n    // Queries with include\n    } else if (this.options.hasJoin === true) {\n      results = AbstractQuery._groupJoinData(results, {\n        model: this.model,\n        includeMap: this.options.includeMap,\n        includeNames: this.options.includeNames\n      }, {\n        checkExisting: this.options.hasMultiAssociation\n      });\n\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        include: this.options.include,\n        includeNames: this.options.includeNames,\n        includeMap: this.options.includeMap,\n        includeValidated: true,\n        attributes: this.options.originalAttributes || this.options.attributes,\n        raw: true\n      });\n    // Regular queries\n    } else {\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        raw: true,\n        attributes: this.options.originalAttributes || this.options.attributes\n      });\n    }\n\n    // return the first real model instance if options.plain is set (e.g. Model.find)\n    if (this.options.plain) {\n      result = result.length === 0 ? null : result[0];\n    }\n    return result;\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith('show');\n    result = result || this.sql.toLowerCase().startsWith('describe');\n\n    return result;\n  }\n\n  isCallQuery() {\n    return this.sql.toLowerCase().startsWith('call');\n  }\n\n  /**\n   * @param {string} sql\n   * @param {Function} debugContext\n   * @param {Array|object} parameters\n   * @protected\n   * @returns {Function} A function to call after the query was completed.\n   */\n  _logQuery(sql, debugContext, parameters) {\n    const { connection, options } = this;\n    const benchmark = this.sequelize.options.benchmark || options.benchmark;\n    const logQueryParameters = this.sequelize.options.logQueryParameters || options.logQueryParameters;\n    const startTime = Date.now();\n    let logParameter = '';\n\n    if (logQueryParameters && parameters) {\n      const delimiter = sql.endsWith(';') ? '' : ';';\n      let paramStr;\n      if (Array.isArray(parameters)) {\n        paramStr = parameters.map(p=>JSON.stringify(p)).join(', ');\n      } else {\n        paramStr = JSON.stringify(parameters);\n      }\n      logParameter = `${delimiter} ${paramStr}`;\n    }\n    const fmt = `(${connection.uuid || 'default'}): ${sql}${logParameter}`;\n    const msg = `Executing ${fmt}`;\n    debugContext(msg);\n    if (!benchmark) {\n      this.sequelize.log(`Executing ${fmt}`, options);\n    }\n    return () => {\n      const afterMsg = `Executed ${fmt}`;\n      debugContext(afterMsg);\n      if (benchmark) {\n        this.sequelize.log(afterMsg, Date.now() - startTime, options);\n      }\n    };\n  }\n\n  /**\n   * The function takes the result of the query execution and groups\n   * the associated data by the callee.\n   *\n   * Example:\n   *   groupJoinData([\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 1 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 2 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 3 }\n   *     }\n   *   ])\n   *\n   * Result:\n   *   Something like this:\n   *\n   *   [\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: [\n   *         { foo: 'bar', id: 1 },\n   *         { foo: 'bar', id: 2 },\n   *         { foo: 'bar', id: 3 }\n   *       ]\n   *     }\n   *   ]\n   *\n   * @param {Array} rows\n   * @param {object} includeOptions\n   * @param {object} options\n   * @private\n   */\n  static _groupJoinData(rows, includeOptions, options) {\n\n    /*\n     * Assumptions\n     * ID is not necessarily the first field\n     * All fields for a level is grouped in the same set (i.e. Panel.id, Task.id, Panel.title is not possible)\n     * Parent keys will be seen before any include/child keys\n     * Previous set won't necessarily be parent set (one parent could have two children, one child would then be previous set for the other)\n     */\n\n    /*\n     * Author (MH) comment: This code is an unreadable mess, but it's performant.\n     * groupJoinData is a performance critical function so we prioritize perf over readability.\n     */\n    if (!rows.length) {\n      return [];\n    }\n\n    // Generic looping\n    let i;\n    let length;\n    let $i;\n    let $length;\n    // Row specific looping\n    let rowsI;\n    let row;\n    const rowsLength = rows.length;\n    // Key specific looping\n    let keys;\n    let key;\n    let keyI;\n    let keyLength;\n    let prevKey;\n    let values;\n    let topValues;\n    let topExists;\n    const checkExisting = options.checkExisting;\n    // If we don't have to deduplicate we can pre-allocate the resulting array\n    let itemHash;\n    let parentHash;\n    let topHash;\n    const results = checkExisting ? [] : new Array(rowsLength);\n    const resultMap = {};\n    const includeMap = {};\n    // Result variables for the respective functions\n    let $keyPrefix;\n    let $keyPrefixString;\n    let $prevKeyPrefixString; // eslint-disable-line\n    let $prevKeyPrefix;\n    let $lastKeyPrefix;\n    let $current;\n    let $parent;\n    // Map each key to an include option\n    let previousPiece;\n    const buildIncludeMap = piece => {\n      if (Object.prototype.hasOwnProperty.call($current.includeMap, piece)) {\n        includeMap[key] = $current = $current.includeMap[piece];\n        if (previousPiece) {\n          previousPiece = `${previousPiece}.${piece}`;\n        } else {\n          previousPiece = piece;\n        }\n        includeMap[previousPiece] = $current;\n      }\n    };\n    // Calculate the string prefix of a key ('User.Results' for 'User.Results.id')\n    const keyPrefixStringMemo = {};\n    const keyPrefixString = (key, memo) => {\n      if (!Object.prototype.hasOwnProperty.call(memo, key)) {\n        memo[key] = key.substr(0, key.lastIndexOf('.'));\n      }\n      return memo[key];\n    };\n    // Removes the prefix from a key ('id' for 'User.Results.id')\n    const removeKeyPrefixMemo = {};\n    const removeKeyPrefix = key => {\n      if (!Object.prototype.hasOwnProperty.call(removeKeyPrefixMemo, key)) {\n        const index = key.lastIndexOf('.');\n        removeKeyPrefixMemo[key] = key.substr(index === -1 ? 0 : index + 1);\n      }\n      return removeKeyPrefixMemo[key];\n    };\n    // Calculates the array prefix of a key (['User', 'Results'] for 'User.Results.id')\n    const keyPrefixMemo = {};\n    const keyPrefix = key => {\n      // We use a double memo and keyPrefixString so that different keys with the same prefix will receive the same array instead of differnet arrays with equal values\n      if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, key)) {\n        const prefixString = keyPrefixString(key, keyPrefixStringMemo);\n        if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, prefixString)) {\n          keyPrefixMemo[prefixString] = prefixString ? prefixString.split('.') : [];\n        }\n        keyPrefixMemo[key] = keyPrefixMemo[prefixString];\n      }\n      return keyPrefixMemo[key];\n    };\n    // Calcuate the last item in the array prefix ('Results' for 'User.Results.id')\n    const lastKeyPrefixMemo = {};\n    const lastKeyPrefix = key => {\n      if (!Object.prototype.hasOwnProperty.call(lastKeyPrefixMemo, key)) {\n        const prefix = keyPrefix(key);\n        const length = prefix.length;\n\n        lastKeyPrefixMemo[key] = !length ? '' : prefix[length - 1];\n      }\n      return lastKeyPrefixMemo[key];\n    };\n    const getUniqueKeyAttributes = model => {\n      let uniqueKeyAttributes = _.chain(model.uniqueKeys);\n      uniqueKeyAttributes = uniqueKeyAttributes\n        .result(`${uniqueKeyAttributes.findKey()}.fields`)\n        .map(field => _.findKey(model.attributes, chr => chr.field === field))\n        .value();\n\n      return uniqueKeyAttributes;\n    };\n    const stringify = obj => obj instanceof Buffer ? obj.toString('hex') : obj;\n    let primaryKeyAttributes;\n    let uniqueKeyAttributes;\n    let prefix;\n\n    for (rowsI = 0; rowsI < rowsLength; rowsI++) {\n      row = rows[rowsI];\n\n      // Keys are the same for all rows, so only need to compute them on the first row\n      if (rowsI === 0) {\n        keys = Object.keys(row);\n        keyLength = keys.length;\n      }\n\n      if (checkExisting) {\n        topExists = false;\n\n        // Compute top level hash key (this is usually just the primary key values)\n        $length = includeOptions.model.primaryKeyAttributes.length;\n        topHash = '';\n        if ($length === 1) {\n          topHash = stringify(row[includeOptions.model.primaryKeyAttributes[0]]);\n        }\n        else if ($length > 1) {\n          for ($i = 0; $i < $length; $i++) {\n            topHash += stringify(row[includeOptions.model.primaryKeyAttributes[$i]]);\n          }\n        }\n        else if (!_.isEmpty(includeOptions.model.uniqueKeys)) {\n          uniqueKeyAttributes = getUniqueKeyAttributes(includeOptions.model);\n          for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n            topHash += row[uniqueKeyAttributes[$i]];\n          }\n        }\n      }\n\n      topValues = values = {};\n      $prevKeyPrefix = undefined;\n      for (keyI = 0; keyI < keyLength; keyI++) {\n        key = keys[keyI];\n\n        // The string prefix isn't actualy needed\n        // We use it so keyPrefix for different keys will resolve to the same array if they have the same prefix\n        // TODO: Find a better way?\n        $keyPrefixString = keyPrefixString(key, keyPrefixStringMemo);\n        $keyPrefix = keyPrefix(key);\n\n        // On the first row we compute the includeMap\n        if (rowsI === 0 && !Object.prototype.hasOwnProperty.call(includeMap, key)) {\n          if (!$keyPrefix.length) {\n            includeMap[key] = includeMap[''] = includeOptions;\n          } else {\n            $current = includeOptions;\n            previousPiece = undefined;\n            $keyPrefix.forEach(buildIncludeMap);\n          }\n        }\n        // End of key set\n        if ($prevKeyPrefix !== undefined && $prevKeyPrefix !== $keyPrefix) {\n          if (checkExisting) {\n            // Compute hash key for this set instance\n            // TODO: Optimize\n            length = $prevKeyPrefix.length;\n            $parent = null;\n            parentHash = null;\n\n            if (length) {\n              for (i = 0; i < length; i++) {\n                prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n                primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n                $length = primaryKeyAttributes.length;\n                itemHash = prefix;\n                if ($length === 1) {\n                  itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n                }\n                else if ($length > 1) {\n                  for ($i = 0; $i < $length; $i++) {\n                    itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n                  }\n                }\n                else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n                  uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n                  for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                    itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n                  }\n                }\n                if (!parentHash) {\n                  parentHash = topHash;\n                }\n\n                itemHash = parentHash + itemHash;\n                $parent = prefix;\n                if (i < length - 1) {\n                  parentHash = itemHash;\n                }\n              }\n            } else {\n              itemHash = topHash;\n            }\n\n            if (itemHash === topHash) {\n              if (!resultMap[itemHash]) {\n                resultMap[itemHash] = values;\n              } else {\n                topExists = true;\n              }\n            } else if (!resultMap[itemHash]) {\n              $parent = resultMap[parentHash];\n              $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n              if (includeMap[prevKey].association.isSingleAssociation) {\n                if ($parent) {\n                  $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n                }\n              } else {\n                if (!$parent[$lastKeyPrefix]) {\n                  $parent[$lastKeyPrefix] = [];\n                }\n                $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n              }\n            }\n\n            // Reset values\n            values = {};\n          } else {\n            // If checkExisting is false it's because there's only 1:1 associations in this query\n            // However we still need to map onto the appropriate parent\n            // For 1:1 we map forward, initializing the value object on the parent to be filled in the next iterations of the loop\n            $current = topValues;\n            length = $keyPrefix.length;\n            if (length) {\n              for (i = 0; i < length; i++) {\n                if (i === length - 1) {\n                  values = $current[$keyPrefix[i]] = {};\n                }\n                $current = $current[$keyPrefix[i]] || {};\n              }\n            }\n          }\n        }\n\n        // End of iteration, set value and set prev values (for next iteration)\n        values[removeKeyPrefix(key)] = row[key];\n        prevKey = key;\n        $prevKeyPrefix = $keyPrefix;\n        $prevKeyPrefixString = $keyPrefixString;\n      }\n\n      if (checkExisting) {\n        length = $prevKeyPrefix.length;\n        $parent = null;\n        parentHash = null;\n\n        if (length) {\n          for (i = 0; i < length; i++) {\n            prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n            primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n            $length = primaryKeyAttributes.length;\n            itemHash = prefix;\n            if ($length === 1) {\n              itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n            }\n            else if ($length > 0) {\n              for ($i = 0; $i < $length; $i++) {\n                itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n              }\n            }\n            else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n              uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n              for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n              }\n            }\n            if (!parentHash) {\n              parentHash = topHash;\n            }\n\n            itemHash = parentHash + itemHash;\n            $parent = prefix;\n            if (i < length - 1) {\n              parentHash = itemHash;\n            }\n          }\n        } else {\n          itemHash = topHash;\n        }\n\n        if (itemHash === topHash) {\n          if (!resultMap[itemHash]) {\n            resultMap[itemHash] = values;\n          } else {\n            topExists = true;\n          }\n        } else if (!resultMap[itemHash]) {\n          $parent = resultMap[parentHash];\n          $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n          if (includeMap[prevKey].association.isSingleAssociation) {\n            if ($parent) {\n              $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n            }\n          } else {\n            if (!$parent[$lastKeyPrefix]) {\n              $parent[$lastKeyPrefix] = [];\n            }\n            $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n          }\n        }\n        if (!topExists) {\n          results.push(topValues);\n        }\n      } else {\n        results[rowsI] = topValues;\n      }\n    }\n\n    return results;\n  }\n}\n\nmodule.exports = AbstractQuery;\nmodule.exports.AbstractQuery = AbstractQuery;\nmodule.exports.default = AbstractQuery;\n"],
  "mappings": "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",
  "names": []
}
