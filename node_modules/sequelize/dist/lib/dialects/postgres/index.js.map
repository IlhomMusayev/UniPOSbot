{
  "version": 3,
  "sources": ["../../../../lib/dialects/postgres/index.js"],
  "sourcesContent": ["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').postgres;\nconst { PostgresQueryInterface } = require('./query-interface');\n\nclass PostgresDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new PostgresQueryInterface(\n      sequelize,\n      this.queryGenerator\n    );\n  }\n}\n\nPostgresDialect.prototype.supports = _.merge(\n  _.cloneDeep(AbstractDialect.prototype.supports),\n  {\n    'DEFAULT VALUES': true,\n    EXCEPTION: true,\n    'ON DUPLICATE KEY': false,\n    'ORDER NULLS': true,\n    returnValues: {\n      returning: true\n    },\n    bulkDefault: true,\n    schemas: true,\n    lock: true,\n    lockOf: true,\n    lockKey: true,\n    lockOuterJoinFailure: true,\n    skipLocked: true,\n    forShare: 'FOR SHARE',\n    index: {\n      concurrently: true,\n      using: 2,\n      where: true,\n      functionBased: true,\n      operator: true\n    },\n    inserts: {\n      onConflictDoNothing: ' ON CONFLICT DO NOTHING',\n      updateOnDuplicate: ' ON CONFLICT DO UPDATE SET'\n    },\n    NUMERIC: true,\n    ARRAY: true,\n    RANGE: true,\n    GEOMETRY: true,\n    REGEXP: true,\n    GEOGRAPHY: true,\n    JSON: true,\n    JSONB: true,\n    HSTORE: true,\n    TSVECTOR: true,\n    deferrableConstraints: true,\n    searchPath: true\n  }\n);\n\nPostgresDialect.prototype.defaultVersion = '9.5.0'; // minimum supported version\nPostgresDialect.prototype.Query = Query;\nPostgresDialect.prototype.DataTypes = DataTypes;\nPostgresDialect.prototype.name = 'postgres';\nPostgresDialect.prototype.TICK_CHAR = '\"';\nPostgresDialect.prototype.TICK_CHAR_LEFT = PostgresDialect.prototype.TICK_CHAR;\nPostgresDialect.prototype.TICK_CHAR_RIGHT = PostgresDialect.prototype.TICK_CHAR;\n\nmodule.exports = PostgresDialect;\nmodule.exports.default = PostgresDialect;\nmodule.exports.PostgresDialect = PostgresDialect;\n"],
  "mappings": "4FAEA,KAAM,GAAI,QAAQ,UACZ,EAAkB,QAAQ,eAC1B,EAAoB,QAAQ,wBAC5B,EAAQ,QAAQ,WAChB,EAAiB,QAAQ,qBACzB,EAAY,QAAQ,oBAAoB,SACxC,CAAE,0BAA2B,QAAQ,qBAE3C,eAA8B,EAAgB,CAC5C,YAAY,EAAW,CACrB,QACA,KAAK,UAAY,EACjB,KAAK,kBAAoB,GAAI,GAAkB,KAAM,GACrD,KAAK,eAAiB,GAAI,GAAe,CACvC,SAAU,KACV,cAEF,KAAK,eAAiB,GAAI,GACxB,EACA,KAAK,iBAXX,uBAgBA,EAAgB,UAAU,SAAW,EAAE,MACrC,EAAE,UAAU,EAAgB,UAAU,UACtC,CACE,iBAAkB,GAClB,UAAW,GACX,mBAAoB,GACpB,cAAe,GACf,aAAc,CACZ,UAAW,IAEb,YAAa,GACb,QAAS,GACT,KAAM,GACN,OAAQ,GACR,QAAS,GACT,qBAAsB,GACtB,WAAY,GACZ,SAAU,YACV,MAAO,CACL,aAAc,GACd,MAAO,EACP,MAAO,GACP,cAAe,GACf,SAAU,IAEZ,QAAS,CACP,oBAAqB,0BACrB,kBAAmB,8BAErB,QAAS,GACT,MAAO,GACP,MAAO,GACP,SAAU,GACV,OAAQ,GACR,UAAW,GACX,KAAM,GACN,MAAO,GACP,OAAQ,GACR,SAAU,GACV,sBAAuB,GACvB,WAAY,KAIhB,EAAgB,UAAU,eAAiB,QAC3C,EAAgB,UAAU,MAAQ,EAClC,EAAgB,UAAU,UAAY,EACtC,EAAgB,UAAU,KAAO,WACjC,EAAgB,UAAU,UAAY,IACtC,EAAgB,UAAU,eAAiB,EAAgB,UAAU,UACrE,EAAgB,UAAU,gBAAkB,EAAgB,UAAU,UAEtE,OAAO,QAAU,EACjB,OAAO,QAAQ,QAAU,EACzB,OAAO,QAAQ,gBAAkB",
  "names": []
}
