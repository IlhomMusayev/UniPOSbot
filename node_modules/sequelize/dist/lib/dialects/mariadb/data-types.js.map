{
  "version": 3,
  "sources": ["../../../../lib/dialects/mariadb/data-types.js"],
  "sourcesContent": ["'use strict';\n\nconst wkx = require('wkx');\nconst _ = require('lodash');\nconst moment = require('moment-timezone');\n\nmodule.exports = BaseTypes => {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = 'https://mariadb.com/kb/en/library/resultset/#field-types';\n\n  /**\n   * types: [buffer_type, ...]\n   *\n   * @see documentation : https://mariadb.com/kb/en/library/resultset/#field-types\n   * @see connector implementation : https://github.com/MariaDB/mariadb-connector-nodejs/blob/master/lib/const/field-type.js\n   */\n\n  BaseTypes.DATE.types.mariadb = ['DATETIME'];\n  BaseTypes.STRING.types.mariadb = ['VAR_STRING'];\n  BaseTypes.CHAR.types.mariadb = ['STRING'];\n  BaseTypes.TEXT.types.mariadb = ['BLOB'];\n  BaseTypes.TINYINT.types.mariadb = ['TINY'];\n  BaseTypes.SMALLINT.types.mariadb = ['SHORT'];\n  BaseTypes.MEDIUMINT.types.mariadb = ['INT24'];\n  BaseTypes.INTEGER.types.mariadb = ['LONG'];\n  BaseTypes.BIGINT.types.mariadb = ['LONGLONG'];\n  BaseTypes.FLOAT.types.mariadb = ['FLOAT'];\n  BaseTypes.TIME.types.mariadb = ['TIME'];\n  BaseTypes.DATEONLY.types.mariadb = ['DATE'];\n  BaseTypes.BOOLEAN.types.mariadb = ['TINY'];\n  BaseTypes.BLOB.types.mariadb = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.mariadb = ['NEWDECIMAL'];\n  BaseTypes.UUID.types.mariadb = false;\n  BaseTypes.ENUM.types.mariadb = false;\n  BaseTypes.REAL.types.mariadb = ['DOUBLE'];\n  BaseTypes.DOUBLE.types.mariadb = ['DOUBLE'];\n  BaseTypes.GEOMETRY.types.mariadb = ['GEOMETRY'];\n  BaseTypes.JSON.types.mariadb = ['JSON'];\n\n  class DECIMAL extends BaseTypes.DECIMAL {\n    toSql() {\n      let definition = super.toSql();\n      if (this._unsigned) {\n        definition += ' UNSIGNED';\n      }\n      if (this._zerofill) {\n        definition += ' ZEROFILL';\n      }\n      return definition;\n    }\n  }\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return this._length ? `DATETIME(${this._length})` : 'DATETIME';\n    }\n    _stringify(date, options) {\n      date = this._applyTimezone(date, options);\n      return date.format('YYYY-MM-DD HH:mm:ss.SSS');\n    }\n    static parse(value, options) {\n      value = value.string();\n      if (value === null) {\n        return value;\n      }\n      if (moment.tz.zone(options.timezone)) {\n        value = moment.tz(value, options.timezone).toDate();\n      }\n      else {\n        value = new Date(`${value} ${options.timezone}`);\n      }\n      return value;\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return value.string();\n    }\n  }\n\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return 'CHAR(36) BINARY';\n    }\n  }\n\n  class GEOMETRY extends BaseTypes.GEOMETRY {\n    constructor(type, srid) {\n      super(type, srid);\n      if (_.isEmpty(this.type)) {\n        this.sqlType = this.key;\n      }\n      else {\n        this.sqlType = this.type;\n      }\n    }\n    static parse(value) {\n      value = value.buffer();\n      // Empty buffer, MySQL doesn't support POINT EMPTY\n      // check, https://dev.mysql.com/worklog/task/?id=2381\n      if (!value || value.length === 0) {\n        return null;\n      }\n      // For some reason, discard the first 4 bytes\n      value = value.slice(4);\n      return wkx.Geometry.parse(value).toGeoJSON({ shortCrs: true });\n    }\n    toSql() {\n      return this.sqlType;\n    }\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql(options) {\n      return `ENUM(${this.values.map(value => options.escape(value)).join(', ')})`;\n    }\n  }\n\n  class JSONTYPE extends BaseTypes.JSON {\n    _stringify(value, options) {\n      return options.operation === 'where' && typeof value === 'string' ? value\n        : JSON.stringify(value);\n    }\n  }\n\n  return {\n    ENUM,\n    DATE,\n    DATEONLY,\n    UUID,\n    GEOMETRY,\n    DECIMAL,\n    JSON: JSONTYPE\n  };\n};\n"],
  "mappings": "4FAEA,KAAM,GAAM,QAAQ,OACd,EAAI,QAAQ,UACZ,EAAS,QAAQ,mBAEvB,OAAO,QAAU,GAAa,CAC5B,EAAU,SAAS,UAAU,aAAe,2DAS5C,EAAU,KAAK,MAAM,QAAU,CAAC,YAChC,EAAU,OAAO,MAAM,QAAU,CAAC,cAClC,EAAU,KAAK,MAAM,QAAU,CAAC,UAChC,EAAU,KAAK,MAAM,QAAU,CAAC,QAChC,EAAU,QAAQ,MAAM,QAAU,CAAC,QACnC,EAAU,SAAS,MAAM,QAAU,CAAC,SACpC,EAAU,UAAU,MAAM,QAAU,CAAC,SACrC,EAAU,QAAQ,MAAM,QAAU,CAAC,QACnC,EAAU,OAAO,MAAM,QAAU,CAAC,YAClC,EAAU,MAAM,MAAM,QAAU,CAAC,SACjC,EAAU,KAAK,MAAM,QAAU,CAAC,QAChC,EAAU,SAAS,MAAM,QAAU,CAAC,QACpC,EAAU,QAAQ,MAAM,QAAU,CAAC,QACnC,EAAU,KAAK,MAAM,QAAU,CAAC,WAAY,OAAQ,YACpD,EAAU,QAAQ,MAAM,QAAU,CAAC,cACnC,EAAU,KAAK,MAAM,QAAU,GAC/B,EAAU,KAAK,MAAM,QAAU,GAC/B,EAAU,KAAK,MAAM,QAAU,CAAC,UAChC,EAAU,OAAO,MAAM,QAAU,CAAC,UAClC,EAAU,SAAS,MAAM,QAAU,CAAC,YACpC,EAAU,KAAK,MAAM,QAAU,CAAC,QAEhC,eAAsB,GAAU,OAAQ,CACtC,OAAQ,CACN,GAAI,GAAa,MAAM,QACvB,MAAI,MAAK,WACP,IAAc,aAEZ,KAAK,WACP,IAAc,aAET,GATX,eAaA,eAAmB,GAAU,IAAK,CAChC,OAAQ,CACN,MAAO,MAAK,QAAU,YAAY,KAAK,WAAa,WAEtD,WAAW,EAAM,EAAS,CACxB,SAAO,KAAK,eAAe,EAAM,GAC1B,EAAK,OAAO,iCAEd,OAAM,EAAO,EAAS,CAE3B,MADA,GAAQ,EAAM,SACV,IAAU,MAGd,CAAI,EAAO,GAAG,KAAK,EAAQ,UACzB,EAAQ,EAAO,GAAG,EAAO,EAAQ,UAAU,SAG3C,EAAQ,GAAI,MAAK,GAAG,KAAS,EAAQ,aAEhC,GAnBX,YAuBA,eAAuB,GAAU,QAAS,OACjC,OAAM,EAAO,CAClB,MAAO,GAAM,UAFjB,gBAMA,eAAmB,GAAU,IAAK,CAChC,OAAQ,CACN,MAAO,mBAFX,YAMA,eAAuB,GAAU,QAAS,CACxC,YAAY,EAAM,EAAM,CACtB,MAAM,EAAM,GACZ,AAAI,EAAE,QAAQ,KAAK,MACjB,KAAK,QAAU,KAAK,IAGpB,KAAK,QAAU,KAAK,WAGjB,OAAM,EAAO,CAIlB,MAHA,GAAQ,EAAM,SAGV,CAAC,GAAS,EAAM,SAAW,EACtB,KAGT,GAAQ,EAAM,MAAM,GACb,EAAI,SAAS,MAAM,GAAO,UAAU,CAAE,SAAU,MAEzD,OAAQ,CACN,MAAO,MAAK,SAtBhB,gBA0BA,eAAmB,GAAU,IAAK,CAChC,MAAM,EAAS,CACb,MAAO,QAAQ,KAAK,OAAO,IAAI,GAAS,EAAQ,OAAO,IAAQ,KAAK,UAFxE,YAMA,eAAuB,GAAU,IAAK,CACpC,WAAW,EAAO,EAAS,CACzB,MAAO,GAAQ,YAAc,SAAW,MAAO,IAAU,SAAW,EAChE,KAAK,UAAU,IAHvB,uBAOO,CACL,OACA,OACA,WACA,OACA,WACA,UACA,KAAM",
  "names": []
}
