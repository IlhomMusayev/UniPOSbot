"use strict";var q=Object.defineProperty,Q=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var c=Object.getOwnPropertySymbols;var z=Object.prototype.hasOwnProperty,f=Object.prototype.propertyIsEnumerable;var o=(t,e,r)=>e in t?q(t,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[e]=r,a=(t,e)=>{for(var r in e||(e={}))z.call(e,r)&&o(t,r,e[r]);if(c)for(var r of c(e))f.call(e,r)&&o(t,r,e[r]);return t},h=(t,e)=>Q(t,d(e));var l=(t,e)=>q(t,"name",{value:e,configurable:!0});const g=require("../../errors"),{QueryInterface:G}=require("../abstract/query-interface"),C=require("../../query-types");class w extends G{async removeColumn(e,r,s){s=s||{};const[i]=await this.sequelize.query(this.queryGenerator.getForeignKeyQuery(e.tableName?e:{tableName:e,schema:this.sequelize.config.database},r),a({raw:!0},s));return i.length&&i[0].constraint_name!=="PRIMARY"&&await Promise.all(i.map(n=>this.sequelize.query(this.queryGenerator.dropForeignKeyQuery(e,n.constraint_name),a({raw:!0},s)))),await this.sequelize.query(this.queryGenerator.removeColumnQuery(e,r),a({raw:!0},s))}async upsert(e,r,s,i,n){n=a({},n),n.type=C.UPSERT,n.updateOnDuplicate=Object.keys(s);const u=n.model,y=this.queryGenerator.insertQuery(e,r,u.rawAttributes,n);return await this.sequelize.query(y,n)}async removeConstraint(e,r,s){const i=this.queryGenerator.showConstraintsQuery(e.tableName?e:{tableName:e,schema:this.sequelize.config.database},r),u=(await this.sequelize.query(i,h(a({},s),{type:this.sequelize.QueryTypes.SHOWCONSTRAINTS})))[0];let y;if(!u||!u.constraintType)throw new g.UnknownConstraintError({message:`Constraint ${r} on table ${e} does not exist`,constraint:r,table:e});return u.constraintType==="FOREIGN KEY"?y=this.queryGenerator.dropForeignKeyQuery(e,r):y=this.queryGenerator.removeIndexQuery(u.tableName,u.constraintName),await this.sequelize.query(y,s)}}l(w,"MySQLQueryInterface"),exports.MySQLQueryInterface=w;
//# sourceMappingURL=query-interface.js.map
