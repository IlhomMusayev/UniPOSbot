{
  "version": 3,
  "sources": ["../../../../lib/dialects/mssql/query.js"],
  "sourcesContent": ["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('mssql');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:mssql');\n\nfunction getScale(aNum) {\n  if (!Number.isFinite(aNum)) return 0;\n  let e = 1;\n  while (Math.round(aNum * e) / e !== aNum) e *= 10;\n  return Math.log10(e);\n}\n\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return 'id';\n  }\n\n  getSQLTypeFromJsType(value, TYPES) {\n    const paramType = { type: TYPES.VarChar, typeOptions: {} };\n    paramType.type = TYPES.NVarChar;\n    if (typeof value === 'number') {\n      if (Number.isInteger(value)) {\n        if (value >= -2147483648 && value <= 2147483647) {\n          paramType.type = TYPES.Int;\n        } else {\n          paramType.type = TYPES.BigInt;\n        }\n      } else {\n        paramType.type = TYPES.Numeric;\n        //Default to a reasonable numeric precision/scale pending more sophisticated logic\n        paramType.typeOptions = { precision: 30, scale: getScale(value) };\n      }\n    } else if (typeof value === 'boolean') {\n      paramType.type = TYPES.Bit;\n    }\n    if (Buffer.isBuffer(value)) {\n      paramType.type = TYPES.VarBinary;\n    }\n    return paramType;\n  }\n\n  async _run(connection, sql, parameters, errStack) {\n    this.sql = sql;\n    const { options } = this;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    const query = new Promise((resolve, reject) => {\n      // TRANSACTION SUPPORT\n      if (sql.startsWith('BEGIN TRANSACTION')) {\n        return connection.beginTransaction(error => error ? reject(error) : resolve([]), options.transaction.name, connection.lib.ISOLATION_LEVEL[options.isolationLevel]);\n      }\n      if (sql.startsWith('COMMIT TRANSACTION')) {\n        return connection.commitTransaction(error => error ? reject(error) : resolve([]));\n      }\n      if (sql.startsWith('ROLLBACK TRANSACTION')) {\n        return connection.rollbackTransaction(error => error ? reject(error) : resolve([]), options.transaction.name);\n      }\n      if (sql.startsWith('SAVE TRANSACTION')) {\n        return connection.saveTransaction(error => error ? reject(error) : resolve([]), options.transaction.name);\n      }\n\n      const rows = [];\n      const request = new connection.lib.Request(sql, (err, rowCount) => err ? reject(err) : resolve([rows, rowCount]));\n\n      if (parameters) {\n        _.forOwn(parameters, (value, key) => {\n          const paramType = this.getSQLTypeFromJsType(value, connection.lib.TYPES);\n          request.addParameter(key, paramType.type, value, paramType.typeOptions);\n        });\n      }\n\n      request.on('row', columns => {\n        rows.push(columns);\n      });\n\n      connection.execSql(request);\n    });\n\n    let rows, rowCount;\n\n    try {\n      [rows, rowCount] = await query;\n    } catch (err) {\n      err.sql = sql;\n      err.parameters = parameters;\n\n      throw this.formatError(err, errStack);\n    }\n\n    complete();\n\n    if (Array.isArray(rows)) {\n      rows = rows.map(columns => {\n        const row = {};\n        for (const column of columns) {\n          const typeid = column.metadata.type.id;\n          const parse = parserStore.get(typeid);\n          let value = column.value;\n\n          if (value !== null & !!parse) {\n            value = parse(value);\n          }\n          row[column.metadata.colName] = value;\n        }\n        return row;\n      });\n    }\n\n    return this.formatResults(rows, rowCount);\n  }\n\n  run(sql, parameters) {\n    const errForStack = new Error();\n    return this.connection.queue.enqueue(() =>\n      this._run(this.connection, sql, parameters, errForStack.stack)\n    );\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = {};\n    const replacementFunc = (match, key, values) => {\n      if (values[key] !== undefined) {\n        bindParam[key] = values[key];\n        return `@${key}`;\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n\n    return [sql, bindParam];\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   * @param {Array} data - The result of the query execution.\n   * @param {number} rowCount\n   * @private\n   * @example\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   */\n  formatResults(data, rowCount) {\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n      return [this.instance || data, rowCount];\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      const result = {};\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", '').replace(\"')\", '').replace(/'/g, '');\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === 'YES' ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.Constraint === 'PRIMARY KEY',\n          autoIncrement: _result.IsIdentity === 1,\n          comment: _result.Comment\n        };\n\n        if (\n          result[_result.Name].type.includes('CHAR')\n          && _result.Length\n        ) {\n          if (_result.Length === -1) {\n            result[_result.Name].type += '(MAX)';\n          } else {\n            result[_result.Name].type += `(${_result.Length})`;\n          }\n        }\n      }\n      return result;\n    }\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery()) {\n      if (this.options.returning) {\n        return this.handleSelectQuery(data);\n      }\n\n      return rowCount;\n    }\n    if (this.isBulkDeleteQuery()) {\n      return data[0] ? data[0].AFFECTEDROWS : 0;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isUpsertQuery()) {\n      this.handleInsertQuery(data);\n      return [this.instance || data, data[0].$action === 'INSERT'];\n    }\n    if (this.isUpdateQuery()) {\n      return [this.instance || data, rowCount];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return this.handleShowConstraintsQuery(data);\n    }\n    if (this.isRawQuery()) {\n      return [data, rowCount];\n    }\n    return data;\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  handleShowConstraintsQuery(data) {\n    //Convert snake_case keys to camelCase as it's generated by stored procedure\n    return data.slice(1).map(result => {\n      const constraint = {};\n      for (const key in result) {\n        constraint[_.camelCase(key)] = result[key];\n      }\n      return constraint;\n    });\n  }\n\n  formatError(err, errStack) {\n    let match;\n\n    match = err.message.match(/Violation of (?:UNIQUE|PRIMARY) KEY constraint '([^']*)'. Cannot insert duplicate key in object '.*'.(:? The duplicate key value is \\((.*)\\).)?/);\n    match = match || err.message.match(/Cannot insert duplicate key row in object .* with unique index '(.*)'/);\n    if (match && match.length > 1) {\n      let fields = {};\n      const uniqueKey = this.model && this.model.uniqueKeys[match[1]];\n      let message = 'Validation error';\n\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n      if (match[3]) {\n        const values = match[3].split(',').map(part => part.trim());\n        if (uniqueKey) {\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[match[1]] = match[3];\n        }\n      }\n\n      const errors = [];\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(\n          this.getUniqueConstraintErrorMessage(field),\n          'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n          field,\n          value,\n          this.instance,\n          'not_unique'\n        ));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n    }\n\n    match = err.message.match(/Failed on step '(.*)'.Could not create constraint. See previous errors./) ||\n      err.message.match(/The DELETE statement conflicted with the REFERENCE constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./) ||\n      err.message.match(/The (?:INSERT|MERGE|UPDATE) statement conflicted with the FOREIGN KEY constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./);\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    match = err.message.match(/Could not drop constraint. See previous errors./);\n    if (match && match.length > 0) {\n      let constraint = err.sql.match(/(?:constraint|index) \\[(.+?)\\]/i);\n      constraint = constraint ? constraint[1] : undefined;\n      let table = err.sql.match(/table \\[(.+?)\\]/i);\n      table = table ? table[1] : undefined;\n\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[1],\n        constraint,\n        table,\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith('select tablename = t.name, name = ind.name,');\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n\n    return result;\n  }\n\n  isShowIndexesQuery() {\n    return this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.index_name in acc)) {\n        acc[item.index_name] = item;\n        item.fields = [];\n      }\n\n      item.index_keys.split(',').forEach(column => {\n        let columnName = column.trim();\n        if (columnName.includes('(-)')) {\n          columnName = columnName.replace('(-)', '');\n        }\n\n        acc[item.index_name].fields.push({\n          attribute: columnName,\n          length: undefined,\n          order: column.includes('(-)') ? 'DESC' : 'ASC',\n          collate: undefined\n        });\n      });\n      delete item.index_keys;\n      return acc;\n    }, {});\n\n    return _.map(data, item => ({\n      primary: item.index_name.toLowerCase().startsWith('pk'),\n      fields: item.fields,\n      name: item.index_name,\n      tableName: undefined,\n      unique: item.index_description.toLowerCase().includes('unique'),\n      type: undefined\n    }));\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) &&\n        this.model.rawAttributes[autoIncrementAttribute].field !== undefined)\n        autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n\n      this.instance[autoIncrementAttribute] = id;\n\n      if (this.instance.dataValues) {\n        for (const key in results[0]) {\n          if (Object.prototype.hasOwnProperty.call(results[0], key)) {\n            const record = results[0][key];\n\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n\n    }\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"],
  "mappings": "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",
  "names": []
}
