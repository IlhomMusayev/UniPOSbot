{
  "version": 3,
  "sources": ["../../lib/model-manager.js"],
  "sourcesContent": ["'use strict';\n\nconst Toposort = require('toposort-class');\nconst _ = require('lodash');\n\nclass ModelManager {\n  constructor(sequelize) {\n    this.models = [];\n    this.sequelize = sequelize;\n  }\n\n  addModel(model) {\n    this.models.push(model);\n    this.sequelize.models[model.name] = model;\n\n    return model;\n  }\n\n  removeModel(modelToRemove) {\n    this.models = this.models.filter(model => model.name !== modelToRemove.name);\n\n    delete this.sequelize.models[modelToRemove.name];\n  }\n\n  getModel(against, options) {\n    options = _.defaults(options || {}, {\n      attribute: 'name'\n    });\n\n    return this.models.find(model => model[options.attribute] === against);\n  }\n\n  get all() {\n    return this.models;\n  }\n\n  /**\n   * Iterate over Models in an order suitable for e.g. creating tables.\n   * Will take foreign key constraints into account so that dependencies are visited before dependents.\n   *\n   * @param {Function} iterator method to execute on each model\n   * @param {object} [options] iterator options\n   * @private\n   */\n  forEachModel(iterator, options) {\n    const models = {};\n    const sorter = new Toposort();\n    let sorted;\n    let dep;\n\n    options = _.defaults(options || {}, {\n      reverse: true\n    });\n\n    for (const model of this.models) {\n      let deps = [];\n      let tableName = model.getTableName();\n\n      if (_.isObject(tableName)) {\n        tableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n\n      models[tableName] = model;\n\n      for (const attrName in model.rawAttributes) {\n        if (Object.prototype.hasOwnProperty.call(model.rawAttributes, attrName)) {\n          const attribute = model.rawAttributes[attrName];\n\n          if (attribute.references) {\n            dep = attribute.references.model;\n\n            if (_.isObject(dep)) {\n              dep = `${dep.schema}.${dep.tableName}`;\n            }\n\n            deps.push(dep);\n          }\n        }\n      }\n\n      deps = deps.filter(dep => tableName !== dep);\n\n      sorter.add(tableName, deps);\n    }\n\n    sorted = sorter.sort();\n    if (options.reverse) {\n      sorted = sorted.reverse();\n    }\n    for (const name of sorted) {\n      iterator(models[name], name);\n    }\n  }\n}\n\nmodule.exports = ModelManager;\nmodule.exports.ModelManager = ModelManager;\nmodule.exports.default = ModelManager;\n"],
  "mappings": "4FAEA,KAAM,GAAW,QAAQ,kBACnB,EAAI,QAAQ,UAElB,OAAmB,CACjB,YAAY,EAAW,CACrB,KAAK,OAAS,GACd,KAAK,UAAY,EAGnB,SAAS,EAAO,CACd,YAAK,OAAO,KAAK,GACjB,KAAK,UAAU,OAAO,EAAM,MAAQ,EAE7B,EAGT,YAAY,EAAe,CACzB,KAAK,OAAS,KAAK,OAAO,OAAO,GAAS,EAAM,OAAS,EAAc,MAEvE,MAAO,MAAK,UAAU,OAAO,EAAc,MAG7C,SAAS,EAAS,EAAS,CACzB,SAAU,EAAE,SAAS,GAAW,GAAI,CAClC,UAAW,SAGN,KAAK,OAAO,KAAK,GAAS,EAAM,EAAQ,aAAe,MAG5D,MAAM,CACR,MAAO,MAAK,OAWd,aAAa,EAAU,EAAS,CAC9B,KAAM,GAAS,GACT,EAAS,GAAI,GACnB,GAAI,GACA,EAEJ,EAAU,EAAE,SAAS,GAAW,GAAI,CAClC,QAAS,KAGX,SAAW,KAAS,MAAK,OAAQ,CAC/B,GAAI,GAAO,GACP,EAAY,EAAM,eAEtB,AAAI,EAAE,SAAS,IACb,GAAY,GAAG,EAAU,UAAU,EAAU,aAG/C,EAAO,GAAa,EAEpB,SAAW,KAAY,GAAM,cAC3B,GAAI,OAAO,UAAU,eAAe,KAAK,EAAM,cAAe,GAAW,CACvE,KAAM,GAAY,EAAM,cAAc,GAEtC,AAAI,EAAU,YACZ,GAAM,EAAU,WAAW,MAEvB,EAAE,SAAS,IACb,GAAM,GAAG,EAAI,UAAU,EAAI,aAG7B,EAAK,KAAK,IAKhB,EAAO,EAAK,OAAO,GAAO,IAAc,GAExC,EAAO,IAAI,EAAW,GAGxB,EAAS,EAAO,OACZ,EAAQ,SACV,GAAS,EAAO,WAElB,SAAW,KAAQ,GACjB,EAAS,EAAO,GAAO,IArF7B,oBA0FA,OAAO,QAAU,EACjB,OAAO,QAAQ,aAAe,EAC9B,OAAO,QAAQ,QAAU",
  "names": []
}
