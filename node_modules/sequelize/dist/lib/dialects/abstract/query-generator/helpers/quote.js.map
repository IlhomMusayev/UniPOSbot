{
  "version": 3,
  "sources": ["../../../../../../lib/dialects/abstract/query-generator/helpers/quote.js"],
  "sourcesContent": ["/**\n * Quote helpers implement quote ability for all dialects.\n * These are basic block of query building\n *\n * Its better to implement all dialect implementation together here. Which will allow\n * even abstract generator to use them by just specifying dialect type.\n *\n * Defining these helpers in each query dialect will leave\n * code in dual dependency of abstract <-> specific dialect\n */\n\n'use strict';\n\nconst Utils = require('../../../../utils');\n\n/**\n * list of reserved words in PostgreSQL 10\n * source: https://www.postgresql.org/docs/10/static/sql-keywords-appendix.html\n *\n * @private\n */\nconst postgresReservedWords = 'all,analyse,analyze,and,any,array,as,asc,asymmetric,authorization,binary,both,case,cast,check,collate,collation,column,concurrently,constraint,create,cross,current_catalog,current_date,current_role,current_schema,current_time,current_timestamp,current_user,default,deferrable,desc,distinct,do,else,end,except,false,fetch,for,foreign,freeze,from,full,grant,group,having,ilike,in,initially,inner,intersect,into,is,isnull,join,lateral,leading,left,like,limit,localtime,localtimestamp,natural,not,notnull,null,offset,on,only,or,order,outer,overlaps,placing,primary,references,returning,right,select,session_user,similar,some,symmetric,table,tablesample,then,to,trailing,true,union,unique,user,using,variadic,verbose,when,where,window,with'.split(',');\n\n/**\n *\n * @param {string}  dialect         Dialect name\n * @param {string}  identifier      Identifier to quote\n * @param {object}  [options]\n * @param {boolean} [options.force=false]\n * @param {boolean} [options.quoteIdentifiers=true]\n *\n * @returns {string}\n * @private\n */\nfunction quoteIdentifier(dialect, identifier, options) {\n  if (identifier === '*') return identifier;\n\n  options = Utils.defaults(options || {}, {\n    force: false,\n    quoteIdentifiers: true\n  });\n\n  switch (dialect) {\n    case 'sqlite':\n    case 'mariadb':\n    case 'mysql':\n      return Utils.addTicks(Utils.removeTicks(identifier, '`'), '`');\n\n    case 'postgres':\n      const rawIdentifier = Utils.removeTicks(identifier, '\"');\n\n      if (\n        options.force !== true &&\n        options.quoteIdentifiers === false &&\n        !identifier.includes('.') &&\n        !identifier.includes('->') &&\n        !postgresReservedWords.includes(rawIdentifier.toLowerCase())\n      ) {\n        // In Postgres, if tables or attributes are created double-quoted,\n        // they are also case sensitive. If they contain any uppercase\n        // characters, they must always be double-quoted. This makes it\n        // impossible to write queries in portable SQL if tables are created in\n        // this way. Hence, we strip quotes if we don't want case sensitivity.\n        return rawIdentifier;\n      }\n      return Utils.addTicks(rawIdentifier, '\"');\n    case 'mssql':\n      return `[${identifier.replace(/[[\\]']+/g, '')}]`;\n\n    default:\n      throw new Error(`Dialect \"${dialect}\" is not supported`);\n  }\n}\nmodule.exports.quoteIdentifier = quoteIdentifier;\n\n/**\n * Test if a give string is already quoted\n *\n * @param {string} identifier\n *\n * @returns {boolean}\n * @private\n */\nfunction isIdentifierQuoted(identifier) {\n  return /^\\s*(?:([`\"'])(?:(?!\\1).|\\1{2})*\\1\\.?)+\\s*$/i.test(identifier);\n}\nmodule.exports.isIdentifierQuoted = isIdentifierQuoted;\n"],
  "mappings": "4FAaA,KAAM,GAAQ,QAAQ,qBAQhB,EAAwB,iuBAAiuB,MAAM,KAarwB,WAAyB,EAAS,EAAY,EAAS,CACrD,GAAI,IAAe,IAAK,MAAO,GAO/B,OALA,EAAU,EAAM,SAAS,GAAW,GAAI,CACtC,MAAO,GACP,iBAAkB,KAGZ,OACD,aACA,cACA,QACH,MAAO,GAAM,SAAS,EAAM,YAAY,EAAY,KAAM,SAEvD,WACH,KAAM,GAAgB,EAAM,YAAY,EAAY,KAEpD,MACE,GAAQ,QAAU,IAClB,EAAQ,mBAAqB,IAC7B,CAAC,EAAW,SAAS,MACrB,CAAC,EAAW,SAAS,OACrB,CAAC,EAAsB,SAAS,EAAc,eAOvC,EAEF,EAAM,SAAS,EAAe,SAClC,QACH,MAAO,IAAI,EAAW,QAAQ,WAAY,eAG1C,KAAM,IAAI,OAAM,YAAY,wBApCzB,uBAuCT,OAAO,QAAQ,gBAAkB,EAUjC,WAA4B,EAAY,CACtC,MAAO,+CAA+C,KAAK,GADpD,0BAGT,OAAO,QAAQ,mBAAqB",
  "names": []
}
