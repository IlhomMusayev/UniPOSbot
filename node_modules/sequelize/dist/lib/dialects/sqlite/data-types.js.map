{
  "version": 3,
  "sources": ["../../../../lib/dialects/sqlite/data-types.js"],
  "sourcesContent": ["'use strict';\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'https://www.sqlite.org/datatype3.html');\n\n  /**\n   * Removes unsupported SQLite options, i.e., UNSIGNED and ZEROFILL, for the integer data types.\n   *\n   * @param {object} dataType The base integer data type.\n   * @private\n   */\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._zerofill || dataType._unsigned) {\n      warn(`SQLite does not support '${dataType.key}' with UNSIGNED or ZEROFILL. Plain '${dataType.key}' will be used instead.`);\n      dataType._unsigned = undefined;\n      dataType._zerofill = undefined;\n    }\n  }\n\n  /**\n   * @see https://sqlite.org/datatype3.html\n   */\n\n  BaseTypes.DATE.types.sqlite = ['DATETIME'];\n  BaseTypes.STRING.types.sqlite = ['VARCHAR', 'VARCHAR BINARY'];\n  BaseTypes.CHAR.types.sqlite = ['CHAR', 'CHAR BINARY'];\n  BaseTypes.TEXT.types.sqlite = ['TEXT'];\n  BaseTypes.TINYINT.types.sqlite = ['TINYINT'];\n  BaseTypes.SMALLINT.types.sqlite = ['SMALLINT'];\n  BaseTypes.MEDIUMINT.types.sqlite = ['MEDIUMINT'];\n  BaseTypes.INTEGER.types.sqlite = ['INTEGER'];\n  BaseTypes.BIGINT.types.sqlite = ['BIGINT'];\n  BaseTypes.FLOAT.types.sqlite = ['FLOAT'];\n  BaseTypes.TIME.types.sqlite = ['TIME'];\n  BaseTypes.DATEONLY.types.sqlite = ['DATE'];\n  BaseTypes.BOOLEAN.types.sqlite = ['TINYINT'];\n  BaseTypes.BLOB.types.sqlite = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.sqlite = ['DECIMAL'];\n  BaseTypes.UUID.types.sqlite = ['UUID'];\n  BaseTypes.ENUM.types.sqlite = false;\n  BaseTypes.REAL.types.sqlite = ['REAL'];\n  BaseTypes.DOUBLE.types.sqlite = ['DOUBLE PRECISION'];\n  BaseTypes.GEOMETRY.types.sqlite = false;\n  BaseTypes.JSON.types.sqlite = ['JSON', 'JSONB'];\n\n  class JSONTYPE extends BaseTypes.JSON {\n    static parse(data) {\n      return JSON.parse(data);\n    }\n  }\n\n  class DATE extends BaseTypes.DATE {\n    static parse(date, options) {\n      if (!date.includes('+')) {\n        // For backwards compat. Dates inserted by sequelize < 2.0dev12 will not have a timestamp set\n        return new Date(date + options.timezone);\n      }\n      return new Date(date); // We already have a timezone stored in the string\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(date) {\n      return date;\n    }\n  }\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (this._binary) {\n        return `VARCHAR BINARY(${this._length})`;\n      }\n      return super.toSql(this);\n    }\n  }\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      if (this._length) {\n        warn('SQLite does not support TEXT with options. Plain `TEXT` will be used instead.');\n        this._length = undefined;\n      }\n      return 'TEXT';\n    }\n  }\n\n  class CITEXT extends BaseTypes.CITEXT {\n    toSql() {\n      return 'TEXT COLLATE NOCASE';\n    }\n  }\n\n  class CHAR extends BaseTypes.CHAR {\n    toSql() {\n      if (this._binary) {\n        return `CHAR BINARY(${this._length})`;\n      }\n      return super.toSql();\n    }\n  }\n\n  class NUMBER extends BaseTypes.NUMBER {\n    toSql() {\n      let result = this.key;\n      if (this._unsigned) {\n        result += ' UNSIGNED';\n      }\n      if (this._zerofill) {\n        result += ' ZEROFILL';\n      }\n      if (this._length) {\n        result += `(${this._length}`;\n        if (typeof this._decimals === 'number') {\n          result += `,${this._decimals}`;\n        }\n        result += ')';\n      }\n      return result;\n    }\n  }\n\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class MEDIUMINT extends BaseTypes.MEDIUMINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class FLOAT extends BaseTypes.FLOAT {\n  }\n\n  class DOUBLE extends BaseTypes.DOUBLE {\n  }\n\n  class REAL extends BaseTypes.REAL { }\n\n  function parseFloating(value) {\n    if (typeof value !== 'string') {\n      return value;\n    }\n    if (value === 'NaN') {\n      return NaN;\n    }\n    if (value === 'Infinity') {\n      return Infinity;\n    }\n    if (value === '-Infinity') {\n      return -Infinity;\n    }\n  }\n  for (const floating of [FLOAT, DOUBLE, REAL]) {\n    floating.parse = parseFloating;\n  }\n\n\n  for (const num of [FLOAT, DOUBLE, REAL, TINYINT, SMALLINT, MEDIUMINT, INTEGER, BIGINT]) {\n    num.prototype.toSql = NUMBER.prototype.toSql;\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return 'TEXT';\n    }\n  }\n\n  return {\n    DATE,\n    DATEONLY,\n    STRING,\n    CHAR,\n    NUMBER,\n    FLOAT,\n    REAL,\n    'DOUBLE PRECISION': DOUBLE,\n    TINYINT,\n    SMALLINT,\n    MEDIUMINT,\n    INTEGER,\n    BIGINT,\n    TEXT,\n    ENUM,\n    JSON: JSONTYPE,\n    CITEXT\n  };\n};\n"],
  "mappings": "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",
  "names": []
}
