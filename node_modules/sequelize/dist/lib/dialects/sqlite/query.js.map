{
  "version": 3,
  "sources": ["../../../../lib/dialects/sqlite/query.js"],
  "sourcesContent": ["'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('../../utils');\nconst AbstractQuery = require('../abstract/query');\nconst QueryTypes = require('../../query-types');\nconst sequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('sqlite');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:sqlite');\n\n\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return 'lastID';\n  }\n\n  /**\n   * rewrite query with parameters.\n   *\n   * @param {string} sql\n   * @param {Array|object} values\n   * @param {string} dialect\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect) {\n    let bindParam;\n    if (Array.isArray(values)) {\n      bindParam = {};\n      values.forEach((v, i) => {\n        bindParam[`$${i + 1}`] = v;\n      });\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    } else {\n      bindParam = {};\n      if (typeof values === 'object') {\n        for (const k of Object.keys(values)) {\n          bindParam[`$${k}`] = values[k];\n        }\n      }\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    }\n    return [sql, bindParam];\n  }\n\n  _collectModels(include, prefix) {\n    const ret = {};\n\n    if (include) {\n      for (const _include of include) {\n        let key;\n        if (!prefix) {\n          key = _include.as;\n        } else {\n          key = `${prefix}.${_include.as}`;\n        }\n        ret[key] = _include.model;\n\n        if (_include.include) {\n          _.merge(ret, this._collectModels(_include.include, key));\n        }\n      }\n    }\n\n    return ret;\n  }\n\n  _handleQueryResponse(metaData, columnTypes, err, results, errStack) {\n    if (err) {\n      err.sql = this.sql;\n      throw this.formatError(err, errStack);\n    }\n    let result = this.instance;\n\n    // add the inserted row id to the instance\n    if (this.isInsertQuery(results, metaData) || this.isUpsertQuery()) {\n      this.handleInsertQuery(results, metaData);\n      if (!this.instance) {\n        // handle bulkCreate AI primary key\n        if (\n          metaData.constructor.name === 'Statement'\n          && this.model\n          && this.model.autoIncrementAttribute\n          && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute\n          && this.model.rawAttributes[this.model.primaryKeyAttribute]\n        ) {\n          const startId = metaData[this.getInsertIdField()] - metaData.changes + 1;\n          result = [];\n          for (let i = startId; i < startId + metaData.changes; i++) {\n            result.push({ [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i });\n          }\n        } else {\n          result = metaData[this.getInsertIdField()];\n        }\n      }\n    }\n\n    if (this.isShowTablesQuery()) {\n      return results.map(row => row.name);\n    }\n    if (this.isShowConstraintsQuery()) {\n      result = results;\n      if (results && results[0] && results[0].sql) {\n        result = this.parseConstraintsFromSql(results[0].sql);\n      }\n      return result;\n    }\n    if (this.isSelectQuery()) {\n      if (this.options.raw) {\n        return this.handleSelectQuery(results);\n      }\n      // This is a map of prefix strings to models, e.g. user.projects -> Project model\n      const prefixes = this._collectModels(this.options.include);\n\n      results = results.map(result => {\n        return _.mapValues(result, (value, name) => {\n          let model;\n          if (name.includes('.')) {\n            const lastind = name.lastIndexOf('.');\n\n            model = prefixes[name.substr(0, lastind)];\n\n            name = name.substr(lastind + 1);\n          } else {\n            model = this.options.model;\n          }\n\n          const tableName = model.getTableName().toString().replace(/`/g, '');\n          const tableTypes = columnTypes[tableName] || {};\n\n          if (tableTypes && !(name in tableTypes)) {\n            // The column is aliased\n            _.forOwn(model.rawAttributes, (attribute, key) => {\n              if (name === key && attribute.field) {\n                name = attribute.field;\n                return false;\n              }\n            });\n          }\n\n          return Object.prototype.hasOwnProperty.call(tableTypes, name)\n            ? this.applyParsers(tableTypes[name], value)\n            : value;\n        });\n      });\n\n      return this.handleSelectQuery(results);\n    }\n    if (this.isShowOrDescribeQuery()) {\n      return results;\n    }\n    if (this.sql.includes('PRAGMA INDEX_LIST')) {\n      return this.handleShowIndexesQuery(results);\n    }\n    if (this.sql.includes('PRAGMA INDEX_INFO')) {\n      return results;\n    }\n    if (this.sql.includes('PRAGMA TABLE_INFO')) {\n      // this is the sqlite way of getting the metadata of a table\n      result = {};\n\n      let defaultValue;\n      for (const _result of results) {\n        if (_result.dflt_value === null) {\n          // Column schema omits any \"DEFAULT ...\"\n          defaultValue = undefined;\n        } else if (_result.dflt_value === 'NULL') {\n          // Column schema is a \"DEFAULT NULL\"\n          defaultValue = null;\n        } else {\n          defaultValue = _result.dflt_value;\n        }\n\n        result[_result.name] = {\n          type: _result.type,\n          allowNull: _result.notnull === 0,\n          defaultValue,\n          primaryKey: _result.pk !== 0\n        };\n\n        if (result[_result.name].type === 'TINYINT(1)') {\n          result[_result.name].defaultValue = { '0': false, '1': true }[result[_result.name].defaultValue];\n        }\n\n        if (typeof result[_result.name].defaultValue === 'string') {\n          result[_result.name].defaultValue = result[_result.name].defaultValue.replace(/'/g, '');\n        }\n      }\n      return result;\n    }\n    if (this.sql.includes('PRAGMA foreign_keys;')) {\n      return results[0];\n    }\n    if (this.sql.includes('PRAGMA foreign_keys')) {\n      return results;\n    }\n    if (this.sql.includes('PRAGMA foreign_key_list')) {\n      return results;\n    }\n    if ([QueryTypes.BULKUPDATE, QueryTypes.BULKDELETE].includes(this.options.type)) {\n      return metaData.changes;\n    }\n    if (this.options.type === QueryTypes.VERSION) {\n      return results[0].version;\n    }\n    if (this.options.type === QueryTypes.RAW) {\n      return [results, metaData];\n    }\n    if (this.isUpsertQuery()) {\n      return [result, null];\n    }\n    if (this.isUpdateQuery() || this.isInsertQuery()) {\n      return [result, metaData.changes];\n    }\n    return result;\n  }\n\n  async run(sql, parameters) {\n    const conn = this.connection;\n    this.sql = sql;\n    const method = this.getDatabaseMethod();\n    const complete = this._logQuery(sql, debug, parameters);\n\n    return new Promise((resolve, reject) => conn.serialize(async () => {\n      const columnTypes = {};\n      const errForStack = new Error();\n      const executeSql = () => {\n        if (sql.startsWith('-- ')) {\n          return resolve();\n        }\n        const query = this;\n        // cannot use arrow function here because the function is bound to the statement\n        function afterExecute(executionError, results) {\n          try {\n            complete();\n            // `this` is passed from sqlite, we have no control over this.\n            // eslint-disable-next-line no-invalid-this\n            resolve(query._handleQueryResponse(this, columnTypes, executionError, results, errForStack.stack));\n            return;\n          } catch (error) {\n            reject(error);\n          }\n        }\n\n        if (!parameters) parameters = [];\n        conn[method](sql, parameters, afterExecute);\n\n        return null;\n      };\n\n      if (this.getDatabaseMethod() === 'all') {\n        let tableNames = [];\n        if (this.options && this.options.tableNames) {\n          tableNames = this.options.tableNames;\n        } else if (/FROM `(.*?)`/i.exec(this.sql)) {\n          tableNames.push(/FROM `(.*?)`/i.exec(this.sql)[1]);\n        }\n\n        // If we already have the metadata for the table, there's no need to ask for it again\n        tableNames = tableNames.filter(tableName => !(tableName in columnTypes) && tableName !== 'sqlite_master');\n\n        if (!tableNames.length) {\n          return executeSql();\n        }\n        await Promise.all(tableNames.map(tableName =>\n          new Promise(resolve => {\n            tableName = tableName.replace(/`/g, '');\n            columnTypes[tableName] = {};\n\n            conn.all(`PRAGMA table_info(\\`${tableName}\\`)`, (err, results) => {\n              if (!err) {\n                for (const result of results) {\n                  columnTypes[tableName][result.name] = result.type;\n                }\n              }\n              resolve();\n            });\n          })));\n      }\n      return executeSql();\n    }));\n  }\n\n  parseConstraintsFromSql(sql) {\n    let constraints = sql.split('CONSTRAINT ');\n    let referenceTableName, referenceTableKeys, updateAction, deleteAction;\n    constraints.splice(0, 1);\n    constraints = constraints.map(constraintSql => {\n      //Parse foreign key snippets\n      if (constraintSql.includes('REFERENCES')) {\n        //Parse out the constraint condition form sql string\n        updateAction = constraintSql.match(/ON UPDATE (CASCADE|SET NULL|RESTRICT|NO ACTION|SET DEFAULT){1}/);\n        deleteAction = constraintSql.match(/ON DELETE (CASCADE|SET NULL|RESTRICT|NO ACTION|SET DEFAULT){1}/);\n\n        if (updateAction) {\n          updateAction = updateAction[1];\n        }\n\n        if (deleteAction) {\n          deleteAction = deleteAction[1];\n        }\n\n        const referencesRegex = /REFERENCES.+\\((?:[^)(]+|\\((?:[^)(]+|\\([^)(]*\\))*\\))*\\)/;\n        const referenceConditions = constraintSql.match(referencesRegex)[0].split(' ');\n        referenceTableName = Utils.removeTicks(referenceConditions[1]);\n        let columnNames = referenceConditions[2];\n        columnNames = columnNames.replace(/\\(|\\)/g, '').split(', ');\n        referenceTableKeys = columnNames.map(column => Utils.removeTicks(column));\n      }\n\n      const constraintCondition = constraintSql.match(/\\((?:[^)(]+|\\((?:[^)(]+|\\([^)(]*\\))*\\))*\\)/)[0];\n      constraintSql = constraintSql.replace(/\\(.+\\)/, '');\n      const constraint = constraintSql.split(' ');\n\n      if (constraint[1] === 'PRIMARY' || constraint[1] === 'FOREIGN') {\n        constraint[1] += ' KEY';\n      }\n\n      return {\n        constraintName: Utils.removeTicks(constraint[0]),\n        constraintType: constraint[1],\n        updateAction,\n        deleteAction,\n        sql: sql.replace(/\"/g, '`'), //Sqlite returns double quotes for table name\n        constraintCondition,\n        referenceTableName,\n        referenceTableKeys\n      };\n    });\n\n    return constraints;\n  }\n\n  applyParsers(type, value) {\n    if (type.includes('(')) {\n      // Remove the length part\n      type = type.substr(0, type.indexOf('('));\n    }\n    type = type.replace('UNSIGNED', '').replace('ZEROFILL', '');\n    type = type.trim().toUpperCase();\n    const parse = parserStore.get(type);\n\n    if (value !== null && parse) {\n      return parse(value, { timezone: this.sequelize.options.timezone });\n    }\n    return value;\n  }\n\n  formatError(err, errStack) {\n\n    switch (err.code) {\n      case 'SQLITE_CONSTRAINT': {\n        if (err.message.includes('FOREIGN KEY constraint failed')) {\n          return new sequelizeErrors.ForeignKeyConstraintError({\n            parent: err,\n            stack: errStack\n          });\n        }\n\n        let fields = [];\n\n        // Sqlite pre 2.2 behavior - Error: SQLITE_CONSTRAINT: columns x, y are not unique\n        let match = err.message.match(/columns (.*?) are/);\n        if (match !== null && match.length >= 2) {\n          fields = match[1].split(', ');\n        } else {\n\n          // Sqlite post 2.2 behavior - Error: SQLITE_CONSTRAINT: UNIQUE constraint failed: table.x, table.y\n          match = err.message.match(/UNIQUE constraint failed: (.*)/);\n          if (match !== null && match.length >= 2) {\n            fields = match[1].split(', ').map(columnWithTable => columnWithTable.split('.')[1]);\n          }\n        }\n\n        const errors = [];\n        let message = 'Validation error';\n\n        for (const field of fields) {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            this.instance && this.instance[field],\n            this.instance,\n            'not_unique'\n          ));\n        }\n\n        if (this.model) {\n          _.forOwn(this.model.uniqueKeys, constraint => {\n            if (_.isEqual(constraint.fields, fields) && !!constraint.msg) {\n              message = constraint.msg;\n              return false;\n            }\n          });\n        }\n\n        return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n      }\n      case 'SQLITE_BUSY':\n        return new sequelizeErrors.TimeoutError(err, { stack: errStack });\n\n      default:\n        return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n    }\n  }\n\n  async handleShowIndexesQuery(data) {\n    // Sqlite returns indexes so the one that was defined last is returned first. Lets reverse that!\n    return Promise.all(data.reverse().map(async item => {\n      item.fields = [];\n      item.primary = false;\n      item.unique = !!item.unique;\n      item.constraintName = item.name;\n      const columns = await this.run(`PRAGMA INDEX_INFO(\\`${item.name}\\`)`);\n      for (const column of columns) {\n        item.fields[column.seqno] = {\n          attribute: column.name,\n          length: undefined,\n          order: undefined\n        };\n      }\n\n      return item;\n    }));\n  }\n\n  getDatabaseMethod() {\n    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery() || this.isBulkUpdateQuery() || this.sql.toLowerCase().includes('CREATE TEMPORARY TABLE'.toLowerCase()) || this.options.type === QueryTypes.BULKDELETE) {\n      return 'run';\n    }\n    return 'all';\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"],
  "mappings": "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",
  "names": []
}
