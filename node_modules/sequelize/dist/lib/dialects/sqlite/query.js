"use strict";var b=Object.defineProperty;var A=(R,e)=>b(R,"name",{value:e,configurable:!0});const m=require("lodash"),I=require("../../utils"),T=require("../abstract/query"),y=require("../../query-types"),E=require("../../errors"),q=require("../parserStore")("sqlite"),{logger:w}=require("../../utils/logger"),Q=w.debugContext("sql:sqlite");class g extends T{getInsertIdField(){return"lastID"}static formatBindParameters(e,s,n){let t;if(Array.isArray(s))t={},s.forEach((l,i)=>{t[`$${i+1}`]=l}),e=T.formatBindParameters(e,s,n,{skipValueReplace:!0})[0];else{if(t={},typeof s=="object")for(const l of Object.keys(s))t[`$${l}`]=s[l];e=T.formatBindParameters(e,s,n,{skipValueReplace:!0})[0]}return[e,t]}_collectModels(e,s){const n={};if(e)for(const t of e){let l;s?l=`${s}.${t.as}`:l=t.as,n[l]=t.model,t.include&&m.merge(n,this._collectModels(t.include,l))}return n}_handleQueryResponse(e,s,n,t,l){if(n)throw n.sql=this.sql,this.formatError(n,l);let i=this.instance;if((this.isInsertQuery(t,e)||this.isUpsertQuery())&&(this.handleInsertQuery(t,e),!this.instance))if(e.constructor.name==="Statement"&&this.model&&this.model.autoIncrementAttribute&&this.model.autoIncrementAttribute===this.model.primaryKeyAttribute&&this.model.rawAttributes[this.model.primaryKeyAttribute]){const r=e[this.getInsertIdField()]-e.changes+1;i=[];for(let o=r;o<r+e.changes;o++)i.push({[this.model.rawAttributes[this.model.primaryKeyAttribute].field]:o})}else i=e[this.getInsertIdField()];if(this.isShowTablesQuery())return t.map(r=>r.name);if(this.isShowConstraintsQuery())return i=t,t&&t[0]&&t[0].sql&&(i=this.parseConstraintsFromSql(t[0].sql)),i;if(this.isSelectQuery()){if(this.options.raw)return this.handleSelectQuery(t);const r=this._collectModels(this.options.include);return t=t.map(o=>m.mapValues(o,(f,c)=>{let u;if(c.includes(".")){const d=c.lastIndexOf(".");u=r[c.substr(0,d)],c=c.substr(d+1)}else u=this.options.model;const a=u.getTableName().toString().replace(/`/g,""),h=s[a]||{};return h&&!(c in h)&&m.forOwn(u.rawAttributes,(d,p)=>{if(c===p&&d.field)return c=d.field,!1}),Object.prototype.hasOwnProperty.call(h,c)?this.applyParsers(h[c],f):f})),this.handleSelectQuery(t)}if(this.isShowOrDescribeQuery())return t;if(this.sql.includes("PRAGMA INDEX_LIST"))return this.handleShowIndexesQuery(t);if(this.sql.includes("PRAGMA INDEX_INFO"))return t;if(this.sql.includes("PRAGMA TABLE_INFO")){i={};let r;for(const o of t)o.dflt_value===null?r=void 0:o.dflt_value==="NULL"?r=null:r=o.dflt_value,i[o.name]={type:o.type,allowNull:o.notnull===0,defaultValue:r,primaryKey:o.pk!==0},i[o.name].type==="TINYINT(1)"&&(i[o.name].defaultValue={"0":!1,"1":!0}[i[o.name].defaultValue]),typeof i[o.name].defaultValue=="string"&&(i[o.name].defaultValue=i[o.name].defaultValue.replace(/'/g,""));return i}return this.sql.includes("PRAGMA foreign_keys;")?t[0]:this.sql.includes("PRAGMA foreign_keys")||this.sql.includes("PRAGMA foreign_key_list")?t:[y.BULKUPDATE,y.BULKDELETE].includes(this.options.type)?e.changes:this.options.type===y.VERSION?t[0].version:this.options.type===y.RAW?[t,e]:this.isUpsertQuery()?[i,null]:this.isUpdateQuery()||this.isInsertQuery()?[i,e.changes]:i}async run(e,s){const n=this.connection;this.sql=e;const t=this.getDatabaseMethod(),l=this._logQuery(e,Q,s);return new Promise((i,r)=>n.serialize(async()=>{const o={},f=new Error,c=A(()=>{if(e.startsWith("-- "))return i();const u=this;function a(h,d){try{l(),i(u._handleQueryResponse(this,o,h,d,f.stack));return}catch(p){r(p)}}return A(a,"afterExecute"),s||(s=[]),n[t](e,s,a),null},"executeSql");if(this.getDatabaseMethod()==="all"){let u=[];if(this.options&&this.options.tableNames?u=this.options.tableNames:/FROM `(.*?)`/i.exec(this.sql)&&u.push(/FROM `(.*?)`/i.exec(this.sql)[1]),u=u.filter(a=>!(a in o)&&a!=="sqlite_master"),!u.length)return c();await Promise.all(u.map(a=>new Promise(h=>{a=a.replace(/`/g,""),o[a]={},n.all(`PRAGMA table_info(\`${a}\`)`,(d,p)=>{if(!d)for(const N of p)o[a][N.name]=N.type;h()})})))}return c()}))}parseConstraintsFromSql(e){let s=e.split("CONSTRAINT "),n,t,l,i;return s.splice(0,1),s=s.map(r=>{if(r.includes("REFERENCES")){l=r.match(/ON UPDATE (CASCADE|SET NULL|RESTRICT|NO ACTION|SET DEFAULT){1}/),i=r.match(/ON DELETE (CASCADE|SET NULL|RESTRICT|NO ACTION|SET DEFAULT){1}/),l&&(l=l[1]),i&&(i=i[1]);const c=/REFERENCES.+\((?:[^)(]+|\((?:[^)(]+|\([^)(]*\))*\))*\)/,u=r.match(c)[0].split(" ");n=I.removeTicks(u[1]);let a=u[2];a=a.replace(/\(|\)/g,"").split(", "),t=a.map(h=>I.removeTicks(h))}const o=r.match(/\((?:[^)(]+|\((?:[^)(]+|\([^)(]*\))*\))*\)/)[0];r=r.replace(/\(.+\)/,"");const f=r.split(" ");return(f[1]==="PRIMARY"||f[1]==="FOREIGN")&&(f[1]+=" KEY"),{constraintName:I.removeTicks(f[0]),constraintType:f[1],updateAction:l,deleteAction:i,sql:e.replace(/"/g,"`"),constraintCondition:o,referenceTableName:n,referenceTableKeys:t}}),s}applyParsers(e,s){e.includes("(")&&(e=e.substr(0,e.indexOf("("))),e=e.replace("UNSIGNED","").replace("ZEROFILL",""),e=e.trim().toUpperCase();const n=q.get(e);return s!==null&&n?n(s,{timezone:this.sequelize.options.timezone}):s}formatError(e,s){switch(e.code){case"SQLITE_CONSTRAINT":{if(e.message.includes("FOREIGN KEY constraint failed"))return new E.ForeignKeyConstraintError({parent:e,stack:s});let n=[],t=e.message.match(/columns (.*?) are/);t!==null&&t.length>=2?n=t[1].split(", "):(t=e.message.match(/UNIQUE constraint failed: (.*)/),t!==null&&t.length>=2&&(n=t[1].split(", ").map(r=>r.split(".")[1])));const l=[];let i="Validation error";for(const r of n)l.push(new E.ValidationErrorItem(this.getUniqueConstraintErrorMessage(r),"unique violation",r,this.instance&&this.instance[r],this.instance,"not_unique"));return this.model&&m.forOwn(this.model.uniqueKeys,r=>{if(m.isEqual(r.fields,n)&&!!r.msg)return i=r.msg,!1}),new E.UniqueConstraintError({message:i,errors:l,parent:e,fields:n,stack:s})}case"SQLITE_BUSY":return new E.TimeoutError(e,{stack:s});default:return new E.DatabaseError(e,{stack:s})}}async handleShowIndexesQuery(e){return Promise.all(e.reverse().map(async s=>{s.fields=[],s.primary=!1,s.unique=!!s.unique,s.constraintName=s.name;const n=await this.run(`PRAGMA INDEX_INFO(\`${s.name}\`)`);for(const t of n)s.fields[t.seqno]={attribute:t.name,length:void 0,order:void 0};return s}))}getDatabaseMethod(){return this.isInsertQuery()||this.isUpdateQuery()||this.isUpsertQuery()||this.isBulkUpdateQuery()||this.sql.toLowerCase().includes("CREATE TEMPORARY TABLE".toLowerCase())||this.options.type===y.BULKDELETE?"run":"all"}}A(g,"Query"),module.exports=g,module.exports.Query=g,module.exports.default=g;
//# sourceMappingURL=query.js.map
