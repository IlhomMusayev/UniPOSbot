{
  "version": 3,
  "sources": ["../../../../lib/dialects/sqlite/query-generator.js"],
  "sourcesContent": ["'use strict';\n\nconst Utils = require('../../utils');\nconst Transaction = require('../../transaction');\nconst _ = require('lodash');\nconst MySqlQueryGenerator = require('../mysql/query-generator');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\n\nclass SQLiteQueryGenerator extends MySqlQueryGenerator {\n  createSchema() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  }\n\n  showSchemasQuery() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  }\n\n  versionQuery() {\n    return 'SELECT sqlite_version() as `version`';\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = options || {};\n\n    const primaryKeys = [];\n    const needsMultiplePrimaryKeys = Object.values(attributes).filter(definition => definition.includes('PRIMARY KEY')).length > 1;\n    const attrArray = [];\n\n    for (const attr in attributes) {\n      if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        const dataType = attributes[attr];\n        const containsAutoIncrement = dataType.includes('AUTOINCREMENT');\n\n        let dataTypeString = dataType;\n        if (dataType.includes('PRIMARY KEY')) {\n          if (dataType.includes('INT')) {\n            // Only INTEGER is allowed for primary key, see https://github.com/sequelize/sequelize/issues/969 (no lenght, unsigned etc)\n            dataTypeString = containsAutoIncrement ? 'INTEGER PRIMARY KEY AUTOINCREMENT' : 'INTEGER PRIMARY KEY';\n\n            if (dataType.includes(' REFERENCES')) {\n              dataTypeString += dataType.substr(dataType.indexOf(' REFERENCES'));\n            }\n          }\n\n          if (needsMultiplePrimaryKeys) {\n            primaryKeys.push(attr);\n            if (dataType.includes('NOT NULL')) {\n              dataTypeString = dataType.replace(' PRIMARY KEY', '');\n            } else {\n              dataTypeString = dataType.replace('PRIMARY KEY', 'NOT NULL');\n            }\n          }\n        }\n        attrArray.push(`${this.quoteIdentifier(attr)} ${dataTypeString}`);\n      }\n    }\n\n    const table = this.quoteTable(tableName);\n    let attrStr = attrArray.join(', ');\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, columns => {\n        if (columns.customIndex) {\n          attrStr += `, UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      attrStr += `, PRIMARY KEY (${pkString})`;\n    }\n\n    const sql = `CREATE TABLE IF NOT EXISTS ${table} (${attrStr});`;\n    return this.replaceBooleanDefaults(sql);\n  }\n\n  booleanValue(value) {\n    return value ? 1 : 0;\n  }\n\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {string}  stmt  The statement to validate\n   * @returns {boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   */\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== 'string') {\n      return false;\n    }\n\n    // https://sqlite.org/json1.html\n    const jsonFunctionRegex = /^\\s*(json(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = tokenCaptureRegex.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    // Check invalid json statement\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n\n    // return true if the statement has valid json function\n    return hasJsonFunction;\n  }\n\n  //sqlite can't cast to datetime so we need to convert date values to their ISO strings\n  _toJSONValue(value) {\n    if (value instanceof Date) {\n      return value.toISOString();\n    }\n    if (Array.isArray(value) && value[0] instanceof Date) {\n      return value.map(val => val.toISOString());\n    }\n    return value;\n  }\n\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      return super.handleSequelizeMethod(smth, tableName, factory, options, prepend);\n    }\n\n    if (smth instanceof Utils.Cast) {\n      if (/timestamp/i.test(smth.type)) {\n        smth.type = 'datetime';\n      }\n    }\n\n    return AbstractQueryGenerator.prototype.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  }\n\n  addColumnQuery(table, key, dataType) {\n    const attributes = {};\n    attributes[key] = dataType;\n    const fields = this.attributesToSQL(attributes, { context: 'addColumn' });\n    const attribute = `${this.quoteIdentifier(key)} ${fields[key]}`;\n\n    const sql = `ALTER TABLE ${this.quoteTable(table)} ADD ${attribute};`;\n\n    return this.replaceBooleanDefaults(sql);\n  }\n\n  showTablesQuery() {\n    return 'SELECT name FROM `sqlite_master` WHERE type=\\'table\\' and name!=\\'sqlite_sequence\\';';\n  }\n\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    options = options || {};\n    _.defaults(options, this.options);\n\n    attrValueHash = Utils.removeNullValuesFromHash(attrValueHash, options.omitNull, options);\n\n    const modelAttributeMap = {};\n    const values = [];\n    const bind = [];\n    const bindParam = options.bindParam || this.bindParam(bind);\n\n    if (attributes) {\n      _.each(attributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n\n    for (const key in attrValueHash) {\n      const value = attrValueHash[key];\n\n      if (value instanceof Utils.SequelizeMethod || options.bindParam === false) {\n        values.push(`${this.quoteIdentifier(key)}=${this.escape(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' })}`);\n      } else {\n        values.push(`${this.quoteIdentifier(key)}=${this.format(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' }, bindParam)}`);\n      }\n    }\n\n    let query;\n    const whereOptions = { ...options, bindParam };\n\n    if (options.limit) {\n      query = `UPDATE ${this.quoteTable(tableName)} SET ${values.join(',')} WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${this.whereQuery(where, whereOptions)} LIMIT ${this.escape(options.limit)})`;\n    } else {\n      query = `UPDATE ${this.quoteTable(tableName)} SET ${values.join(',')} ${this.whereQuery(where, whereOptions)}`;\n    }\n\n    return { query, bind };\n  }\n\n  truncateTableQuery(tableName, options = {}) {\n    return [\n      `DELETE FROM ${this.quoteTable(tableName)}`,\n      options.restartIdentity ? `; DELETE FROM ${this.quoteTable('sqlite_sequence')} WHERE ${this.quoteIdentifier('name')} = ${Utils.addTicks(Utils.removeTicks(this.quoteTable(tableName), '`'), \"'\")};` : ''\n    ].join('');\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    _.defaults(options, this.options);\n\n    let whereClause = this.getWhereConditions(where, null, model, options);\n\n    if (whereClause) {\n      whereClause = `WHERE ${whereClause}`;\n    }\n\n    if (options.limit) {\n      whereClause = `WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${whereClause} LIMIT ${this.escape(options.limit)})`;\n    }\n\n    return `DELETE FROM ${this.quoteTable(tableName)} ${whereClause}`;\n  }\n\n  attributesToSQL(attributes) {\n    const result = {};\n    for (const name in attributes) {\n      const dataType = attributes[name];\n      const fieldName = dataType.field || name;\n\n      if (_.isObject(dataType)) {\n        let sql = dataType.type.toString();\n\n        if (Object.prototype.hasOwnProperty.call(dataType, 'allowNull') && !dataType.allowNull) {\n          sql += ' NOT NULL';\n        }\n\n        if (Utils.defaultValueSchemable(dataType.defaultValue)) {\n          // TODO thoroughly check that DataTypes.NOW will properly\n          // get populated on all databases as DEFAULT value\n          // i.e. mysql requires: DEFAULT CURRENT_TIMESTAMP\n          sql += ` DEFAULT ${this.escape(dataType.defaultValue, dataType)}`;\n        }\n\n        if (dataType.unique === true) {\n          sql += ' UNIQUE';\n        }\n\n        if (dataType.primaryKey) {\n          sql += ' PRIMARY KEY';\n\n          if (dataType.autoIncrement) {\n            sql += ' AUTOINCREMENT';\n          }\n        }\n\n        if (dataType.references) {\n          const referencesTable = this.quoteTable(dataType.references.model);\n\n          let referencesKey;\n          if (dataType.references.key) {\n            referencesKey = this.quoteIdentifier(dataType.references.key);\n          } else {\n            referencesKey = this.quoteIdentifier('id');\n          }\n\n          sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n\n          if (dataType.onDelete) {\n            sql += ` ON DELETE ${dataType.onDelete.toUpperCase()}`;\n          }\n\n          if (dataType.onUpdate) {\n            sql += ` ON UPDATE ${dataType.onUpdate.toUpperCase()}`;\n          }\n\n        }\n\n        result[fieldName] = sql;\n      } else {\n        result[fieldName] = dataType;\n      }\n    }\n\n    return result;\n  }\n\n  showIndexesQuery(tableName) {\n    return `PRAGMA INDEX_LIST(${this.quoteTable(tableName)})`;\n  }\n\n  showConstraintsQuery(tableName, constraintName) {\n    let sql = `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}'`;\n\n    if (constraintName) {\n      sql += ` AND sql LIKE '%${constraintName}%'`;\n    }\n\n    return `${sql};`;\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return `DROP INDEX IF EXISTS ${this.quoteIdentifier(indexName)}`;\n  }\n\n  describeTableQuery(tableName, schema, schemaDelimiter) {\n    const table = {\n      _schema: schema,\n      _schemaDelimiter: schemaDelimiter,\n      tableName\n    };\n    return `PRAGMA TABLE_INFO(${this.quoteTable(this.addSchema(table))});`;\n  }\n\n  describeCreateTableQuery(tableName) {\n    return `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}';`;\n  }\n\n  removeColumnQuery(tableName, attributes) {\n\n    attributes = this.attributesToSQL(attributes);\n\n    let backupTableName;\n    if (typeof tableName === 'object') {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNames = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(', ');\n\n    // Temporary table cannot work for foreign keys.\n    return `${this.createTableQuery(backupTableName, attributes)\n    }INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};`\n      + `DROP TABLE ${quotedTableName};${\n        this.createTableQuery(tableName, attributes)\n      }INSERT INTO ${quotedTableName} SELECT ${attributeNames} FROM ${quotedBackupTableName};`\n      + `DROP TABLE ${quotedBackupTableName};`;\n  }\n\n  _alterConstraintQuery(tableName, attributes, createTableSql) {\n    let backupTableName;\n\n    attributes = this.attributesToSQL(attributes);\n\n    if (typeof tableName === 'object') {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNames = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(', ');\n\n    return `${createTableSql\n      .replace(`CREATE TABLE ${quotedTableName}`, `CREATE TABLE ${quotedBackupTableName}`)\n      .replace(`CREATE TABLE ${quotedTableName.replace(/`/g, '\"')}`, `CREATE TABLE ${quotedBackupTableName}`)\n    }INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};`\n      + `DROP TABLE ${quotedTableName};`\n      + `ALTER TABLE ${quotedBackupTableName} RENAME TO ${quotedTableName};`;\n  }\n\n  renameColumnQuery(tableName, attrNameBefore, attrNameAfter, attributes) {\n\n    let backupTableName;\n\n    attributes = this.attributesToSQL(attributes);\n\n    if (typeof tableName === 'object') {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNamesImport = Object.keys(attributes).map(attr =>\n      attrNameAfter === attr ? `${this.quoteIdentifier(attrNameBefore)} AS ${this.quoteIdentifier(attr)}` : this.quoteIdentifier(attr)\n    ).join(', ');\n    const attributeNamesExport = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(', ');\n\n    // Temporary tables don't support foreign keys, so creating a temporary table will not allow foreign keys to be preserved\n    return `${this.createTableQuery(backupTableName, attributes)\n    }INSERT INTO ${quotedBackupTableName} SELECT ${attributeNamesImport} FROM ${quotedTableName};`\n      + `DROP TABLE ${quotedTableName};${\n        this.createTableQuery(tableName, attributes)\n      }INSERT INTO ${quotedTableName} SELECT ${attributeNamesExport} FROM ${quotedBackupTableName};`\n      + `DROP TABLE ${quotedBackupTableName};`;\n  }\n\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `SAVEPOINT ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return `BEGIN ${transaction.options.type} TRANSACTION;`;\n  }\n\n  setIsolationLevelQuery(value) {\n    switch (value) {\n      case Transaction.ISOLATION_LEVELS.REPEATABLE_READ:\n        return '-- SQLite is not able to choose the isolation level REPEATABLE READ.';\n      case Transaction.ISOLATION_LEVELS.READ_UNCOMMITTED:\n        return 'PRAGMA read_uncommitted = ON;';\n      case Transaction.ISOLATION_LEVELS.READ_COMMITTED:\n        return 'PRAGMA read_uncommitted = OFF;';\n      case Transaction.ISOLATION_LEVELS.SERIALIZABLE:\n        return '-- SQLite\\'s default isolation level is SERIALIZABLE. Nothing to do.';\n      default:\n        throw new Error(`Unknown isolation level: ${value}`);\n    }\n  }\n\n  replaceBooleanDefaults(sql) {\n    return sql.replace(/DEFAULT '?false'?/g, 'DEFAULT 0').replace(/DEFAULT '?true'?/g, 'DEFAULT 1');\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(tableName) {\n    return `PRAGMA foreign_key_list(${this.quoteTable(this.addSchema(tableName))})`;\n  }\n}\n\nmodule.exports = SQLiteQueryGenerator;\n"],
  "mappings": "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",
  "names": []
}
