"use strict";var U=Object.defineProperty;var s=(t,e)=>U(t,"name",{value:e,configurable:!0});module.exports=t=>{const e=t.ABSTRACT.warn.bind(void 0,"https://www.sqlite.org/datatype3.html");function r(i){(i._zerofill||i._unsigned)&&(e(`SQLite does not support '${i.key}' with UNSIGNED or ZEROFILL. Plain '${i.key}' will be used instead.`),i._unsigned=void 0,i._zerofill=void 0)}s(r,"removeUnsupportedIntegerOptions"),t.DATE.types.sqlite=["DATETIME"],t.STRING.types.sqlite=["VARCHAR","VARCHAR BINARY"],t.CHAR.types.sqlite=["CHAR","CHAR BINARY"],t.TEXT.types.sqlite=["TEXT"],t.TINYINT.types.sqlite=["TINYINT"],t.SMALLINT.types.sqlite=["SMALLINT"],t.MEDIUMINT.types.sqlite=["MEDIUMINT"],t.INTEGER.types.sqlite=["INTEGER"],t.BIGINT.types.sqlite=["BIGINT"],t.FLOAT.types.sqlite=["FLOAT"],t.TIME.types.sqlite=["TIME"],t.DATEONLY.types.sqlite=["DATE"],t.BOOLEAN.types.sqlite=["TINYINT"],t.BLOB.types.sqlite=["TINYBLOB","BLOB","LONGBLOB"],t.DECIMAL.types.sqlite=["DECIMAL"],t.UUID.types.sqlite=["UUID"],t.ENUM.types.sqlite=!1,t.REAL.types.sqlite=["REAL"],t.DOUBLE.types.sqlite=["DOUBLE PRECISION"],t.GEOMETRY.types.sqlite=!1,t.JSON.types.sqlite=["JSON","JSONB"];class L extends t.JSON{static parse(n){return JSON.parse(n)}}s(L,"JSONTYPE");class d extends t.DATE{static parse(n,M){return n.includes("+")?new Date(n):new Date(n+M.timezone)}}s(d,"DATE");class q extends t.DATEONLY{static parse(n){return n}}s(q,"DATEONLY");class O extends t.STRING{toSql(){return this._binary?`VARCHAR BINARY(${this._length})`:super.toSql(this)}}s(O,"STRING");class R extends t.TEXT{toSql(){return this._length&&(e("SQLite does not support TEXT with options. Plain `TEXT` will be used instead."),this._length=void 0),"TEXT"}}s(R,"TEXT");class h extends t.CITEXT{toSql(){return"TEXT COLLATE NOCASE"}}s(h,"CITEXT");class S extends t.CHAR{toSql(){return this._binary?`CHAR BINARY(${this._length})`:super.toSql()}}s(S,"CHAR");class N extends t.NUMBER{toSql(){let n=this.key;return this._unsigned&&(n+=" UNSIGNED"),this._zerofill&&(n+=" ZEROFILL"),this._length&&(n+=`(${this._length}`,typeof this._decimals=="number"&&(n+=`,${this._decimals}`),n+=")"),n}}s(N,"NUMBER");class E extends t.TINYINT{constructor(n){super(n);r(this)}}s(E,"TINYINT");class u extends t.SMALLINT{constructor(n){super(n);r(this)}}s(u,"SMALLINT");class c extends t.MEDIUMINT{constructor(n){super(n);r(this)}}s(c,"MEDIUMINT");class A extends t.INTEGER{constructor(n){super(n);r(this)}}s(A,"INTEGER");class f extends t.BIGINT{constructor(n){super(n);r(this)}}s(f,"BIGINT");class l extends t.FLOAT{}s(l,"FLOAT");class o extends t.DOUBLE{}s(o,"DOUBLE");class I extends t.REAL{}s(I,"REAL");function x(i){if(typeof i!="string")return i;if(i==="NaN")return NaN;if(i==="Infinity")return 1/0;if(i==="-Infinity")return-1/0}s(x,"parseFloating");for(const i of[l,o,I])i.parse=x;for(const i of[l,o,I,E,u,c,A,f])i.prototype.toSql=N.prototype.toSql;class D extends t.ENUM{toSql(){return"TEXT"}}return s(D,"ENUM"),{DATE:d,DATEONLY:q,STRING:O,CHAR:S,NUMBER:N,FLOAT:l,REAL:I,"DOUBLE PRECISION":o,TINYINT:E,SMALLINT:u,MEDIUMINT:c,INTEGER:A,BIGINT:f,TEXT:R,ENUM:D,JSON:L,CITEXT:h}};
//# sourceMappingURL=data-types.js.map
