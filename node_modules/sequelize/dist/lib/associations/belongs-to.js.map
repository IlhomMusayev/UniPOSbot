{
  "version": 3,
  "sources": ["../../../lib/associations/belongs-to.js"],
  "sourcesContent": ["'use strict';\n\nconst Utils = require('./../utils');\nconst Helpers = require('./helpers');\nconst _ = require('lodash');\nconst Association = require('./base');\nconst Op = require('../operators');\n\n/**\n * One-to-one association\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.belongsTo(Project)` the getter will be `user.getProject()`.\n *\n * @see {@link Model.belongsTo}\n */\nclass BelongsTo extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    this.associationType = 'BelongsTo';\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelize(\n        [\n          this.as,\n          this.target.primaryKeyAttribute\n        ].join('_')\n      );\n    }\n\n    this.identifier = this.foreignKey;\n    if (this.source.rawAttributes[this.identifier]) {\n      this.identifierField = this.source.rawAttributes[this.identifier].field || this.identifier;\n    }\n\n    if (\n      this.options.targetKey\n      && !this.target.rawAttributes[this.options.targetKey]\n    ) {\n      throw new Error(`Unknown attribute \"${this.options.targetKey}\" passed as targetKey, define this attribute on model \"${this.target.name}\" first`);\n    }\n\n    this.targetKey = this.options.targetKey || this.target.primaryKeyAttribute;\n    this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    this.targetKeyIsPrimary = this.targetKey === this.target.primaryKeyAttribute;\n    this.targetIdentifier = this.targetKey;\n\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n\n    // Get singular name, trying to uppercase the first letter, unless the model forbids it\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: `get${singular}`,\n      set: `set${singular}`,\n      create: `create${singular}`\n    };\n  }\n\n  // the id is in the source table\n  _injectAttributes() {\n    const newAttributes = {\n      [this.foreignKey]: {\n        type: this.options.keyType || this.target.rawAttributes[this.targetKey].type,\n        allowNull: true,\n        ...this.foreignKeyAttribute\n      }\n    };\n\n    if (this.options.constraints !== false) {\n      const source = this.source.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (source.allowNull ? 'SET NULL' : 'NO ACTION');\n      this.options.onUpdate = this.options.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.target, this.source, this.options, this.targetKeyField);\n    Utils.mergeDefaults(this.source.rawAttributes, newAttributes);\n\n    this.source.refreshAttributes();\n\n    this.identifierField = this.source.rawAttributes[this.foreignKey].field || this.foreignKey;\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'set', 'create'];\n\n    Helpers.mixinMethods(this, obj, methods);\n  }\n\n  /**\n   * Get the associated instance.\n   *\n   * @param {Model|Array<Model>} instances source instances\n   * @param {object}         [options] find options\n   * @param {string|boolean} [options.scope]  Apply a scope on the related model, or remove its default scope by passing false.\n   * @param {string}         [options.schema] Apply a schema on the related model\n   *\n   * @see\n   * {@link Model.findOne} for a full explanation of options\n   *\n   * @returns {Promise<Model>}\n   */\n  async get(instances, options) {\n    const where = {};\n    let Target = this.target;\n    let instance;\n\n    options = Utils.cloneDeep(options);\n\n    if (Object.prototype.hasOwnProperty.call(options, 'scope')) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, 'schema')) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    if (instances) {\n      where[this.targetKey] = {\n        [Op.in]: instances.map(_instance => _instance.get(this.foreignKey))\n      };\n    } else {\n      if (this.targetKeyIsPrimary && !options.where) {\n        return Target.findByPk(instance.get(this.foreignKey), options);\n      }\n      where[this.targetKey] = instance.get(this.foreignKey);\n      options.limit = null;\n    }\n\n    options.where = options.where ?\n      { [Op.and]: [where, options.where] } :\n      where;\n\n    if (instances) {\n      const results = await Target.findAll(options);\n      const result = {};\n      for (const _instance of instances) {\n        result[_instance.get(this.foreignKey, { raw: true })] = null;\n      }\n\n      for (const _instance of results) {\n        result[_instance.get(this.targetKey, { raw: true })] = _instance;\n      }\n\n      return result;\n    }\n\n    return Target.findOne(options);\n  }\n\n  /**\n   * Set the associated model.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {?<Model>|string|number} [associatedInstance] An persisted instance or the primary key of an instance to associate with this. Pass `null` or `undefined` to remove the association.\n   * @param {object} [options={}] options passed to `this.save`\n   * @param {boolean} [options.save=true] Skip saving this after setting the foreign key if false.\n   *\n   *  @returns {Promise}\n   */\n  async set(sourceInstance, associatedInstance, options = {}) {\n    let value = associatedInstance;\n\n    if (associatedInstance instanceof this.target) {\n      value = associatedInstance[this.targetKey];\n    }\n\n    sourceInstance.set(this.foreignKey, value);\n\n    if (options.save === false) return;\n\n    options = {\n      fields: [this.foreignKey],\n      allowNull: [this.foreignKey],\n      association: true,\n      ...options\n    };\n\n    // passes the changed field to save, so only that field get updated.\n    return await sourceInstance.save(options);\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {object} [values={}] values to create associated model instance with\n   * @param {object} [options={}] Options passed to `target.create` and setAssociation.\n   *\n   * @see\n   * {@link Model#create}  for a full explanation of options\n   *\n   * @returns {Promise<Model>} The created target model\n   */\n  async create(sourceInstance, values, options) {\n    values = values || {};\n    options = options || {};\n\n    const newAssociatedObject = await this.target.create(values, options);\n    await sourceInstance[this.accessors.set](newAssociatedObject, options);\n\n    return newAssociatedObject;\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === 'string') {\n      return this.as === alias;\n    }\n\n    if (alias && alias.singular) {\n      return this.as === alias.singular;\n    }\n\n    return !this.isAliased;\n  }\n}\n\nmodule.exports = BelongsTo;\nmodule.exports.BelongsTo = BelongsTo;\nmodule.exports.default = BelongsTo;\n"],
  "mappings": "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",
  "names": []
}
