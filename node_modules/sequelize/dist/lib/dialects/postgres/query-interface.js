"use strict";var M=Object.defineProperty,U=Object.defineProperties;var N=Object.getOwnPropertyDescriptors;var P=Object.getOwnPropertySymbols;var V=Object.prototype.hasOwnProperty,F=Object.prototype.propertyIsEnumerable;var R=(n,e,t)=>e in n?M(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t,c=(n,e)=>{for(var t in e||(e={}))V.call(e,t)&&R(n,t,e[t]);if(P)for(var t of P(e))F.call(e,t)&&R(n,t,e[t]);return n},y=(n,e)=>U(n,N(e));var I=(n,e)=>M(n,"name",{value:e,configurable:!0});const h=require("../../data-types"),L=require("../../query-types"),{QueryInterface:K}=require("../abstract/query-interface"),S=require("../../utils");class v extends K{async ensureEnums(e,t,r,f){const o=Object.keys(t),q=o.length;let w="",s=[],a=0;for(a=0;a<q;a++){const l=t[o[a]],u=l.type;(u instanceof h.ENUM||u instanceof h.ARRAY&&u.type instanceof h.ENUM)&&(w=this.queryGenerator.pgListEnums(e,l.field||o[a],r),s.push(this.sequelize.query(w,y(c({},r),{plain:!0,raw:!0,type:L.SELECT}))))}const T=await Promise.all(s);s=[];let b=0;const x=I((l,u,m,d="before",E=s.length)=>{const i=c({},r);switch(i.before=null,i.after=null,d){case"after":i.after=m;break;case"before":default:i.before=m;break}s.splice(E,0,()=>this.sequelize.query(this.queryGenerator.pgEnumAdd(e,l,u,i),i))},"addEnumValue");for(a=0;a<q;a++){const l=t[o[a]],u=l.type,m=u.type||u,d=l.field||o[a];if(u instanceof h.ENUM||u instanceof h.ARRAY&&m instanceof h.ENUM){if(!T[b])s.push(()=>this.sequelize.query(this.queryGenerator.pgEnum(e,d,m,r),y(c({},r),{raw:!0})));else if(!!T[b]&&!!f){const E=this.queryGenerator.fromArray(T[b].enum_value),i=m.values;let z,G=-1;for(let p=0;p<E.length;p++){const g=E[p],A=i.indexOf(g);if(z=g,A===-1)continue;const k=i.slice(0,A),Q=s.length;for(let O=k.length-1;O>=0&&!~E.indexOf(k[O]);O--)x(d,k[O],z,"before",Q);A>G&&(G=A)}if(z&&G<i.length-1){const p=i.slice(G+1);for(let g=p.length-1;g>=0;g--)x(d,p[g],z,"after")}b++}}}const D=await s.reduce(async(l,u)=>await u(await l),Promise.resolve());return s.length&&await this.sequelize.dialect.connectionManager._refreshDynamicOIDs(),D}async getForeignKeyReferencesForTable(e,t){const r=y(c({},t),{type:L.FOREIGNKEYS}),f=this.queryGenerator.getForeignKeyReferencesQuery(e.tableName||e,this.sequelize.config.database);return(await this.sequelize.query(f,r)).map(S.camelizeObjectKeys)}async dropEnum(e,t){return t=t||{},this.sequelize.query(this.queryGenerator.pgEnumDrop(null,null,this.queryGenerator.pgEscapeAndQuote(e)),y(c({},t),{raw:!0}))}async dropAllEnums(e){e=e||{};const t=await this.pgListEnums(null,e);return await Promise.all(t.map(r=>this.sequelize.query(this.queryGenerator.pgEnumDrop(null,null,this.queryGenerator.pgEscapeAndQuote(r.enum_name)),y(c({},e),{raw:!0}))))}async pgListEnums(e,t){t=t||{};const r=this.queryGenerator.pgListEnums(e);return this.sequelize.query(r,y(c({},t),{plain:!1,raw:!0,type:L.SELECT}))}async dropTable(e,t){await super.dropTable(e,t);const r=[],f=this.sequelize.modelManager.getModel(e,{attribute:"tableName"});if(!f)return;const o=(!t||!t.schema||t.schema==="public"?"":`${t.schema}_`)+e,q=Object.keys(f.rawAttributes),w=q.length;for(let s=0;s<w;s++)if(f.rawAttributes[q[s]].type instanceof h.ENUM){const a=this.queryGenerator.pgEnumDrop(o,q[s]);t.supportsSearchPath=!1,r.push(this.sequelize.query(a,y(c({},t),{raw:!0})))}await Promise.all(r)}}I(v,"PostgresQueryInterface"),exports.PostgresQueryInterface=v;
//# sourceMappingURL=query-interface.js.map
