{
  "version": 3,
  "sources": ["../../../../lib/dialects/mssql/async-queue.js"],
  "sourcesContent": ["'use strict';\n\nconst BaseError = require('../../errors/base-error');\nconst ConnectionError = require('../../errors/connection-error');\n\n/**\n * Thrown when a connection to a database is closed while an operation is in progress\n */\nclass AsyncQueueError extends BaseError {\n  constructor(message) {\n    super(message);\n    this.name = 'SequelizeAsyncQueueError';\n  }\n}\n\nexports.AsyncQueueError = AsyncQueueError;\n\nclass AsyncQueue {\n  constructor() {\n    this.previous = Promise.resolve();\n    this.closed = false;\n    this.rejectCurrent = () => {};\n  }\n  close() {\n    this.closed = true;\n    this.rejectCurrent(new ConnectionError(new AsyncQueueError('the connection was closed before this query could finish executing')));\n  }\n  enqueue(asyncFunction) {\n    // This outer promise might seems superflous since down below we return asyncFunction().then(resolve, reject).\n    // However, this ensures that this.previous will never be a rejected promise so the queue will\n    // always keep going, while still communicating rejection from asyncFunction to the user.\n    return new Promise((resolve, reject) => {\n      this.previous = this.previous.then(\n        () => {\n          this.rejectCurrent = reject;\n          if (this.closed) {\n            return reject(new ConnectionError(new AsyncQueueError('the connection was closed before this query could be executed')));\n          }\n          return asyncFunction().then(resolve, reject);\n        }\n      );\n    });\n  }\n}\n\nexports.default = AsyncQueue;\n"],
  "mappings": "4FAEA,KAAM,GAAY,QAAQ,2BACpB,EAAkB,QAAQ,iCAKhC,eAA8B,EAAU,CACtC,YAAY,EAAS,CACnB,MAAM,GACN,KAAK,KAAO,4BAHhB,uBAOA,QAAQ,gBAAkB,EAE1B,OAAiB,CACf,aAAc,CACZ,KAAK,SAAW,QAAQ,UACxB,KAAK,OAAS,GACd,KAAK,cAAgB,IAAM,GAE7B,OAAQ,CACN,KAAK,OAAS,GACd,KAAK,cAAc,GAAI,GAAgB,GAAI,GAAgB,wEAE7D,QAAQ,EAAe,CAIrB,MAAO,IAAI,SAAQ,CAAC,EAAS,IAAW,CACtC,KAAK,SAAW,KAAK,SAAS,KAC5B,IACE,MAAK,cAAgB,EACjB,KAAK,OACA,EAAO,GAAI,GAAgB,GAAI,GAAgB,mEAEjD,IAAgB,KAAK,EAAS,QArB/C,kBA4BA,QAAQ,QAAU",
  "names": []
}
