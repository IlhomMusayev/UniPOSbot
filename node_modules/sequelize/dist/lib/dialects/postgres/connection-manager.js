"use strict";var E=Object.defineProperty;var c=(_,r)=>E(_,"name",{value:r,configurable:!0});const l=require("lodash"),M=require("../abstract/connection-manager"),{logger:b}=require("../../utils/logger"),u=b.debugContext("connection:pg"),d=require("../../errors"),h=require("semver"),O=require("../../data-types"),T=require("moment-timezone"),{promisify:q}=require("util");class y extends M{constructor(r,s){s.config.port=s.config.port||5432;super(r,s);const n=this._loadDialectModule("pg");this.lib=this.sequelize.config.native?n.native:n,this._clearDynamicOIDs(),this._clearTypeParser(),this.refreshTypeParser(O.postgres)}_refreshTypeParser(r){const s=c(e=>i=>this.lib.types.arrayParser.create(i,e).parse(),"arrayParserBuilder"),n=c(e=>i=>r.parse(i,{parser:e}),"rangeParserBuilder");if(r.key.toLowerCase()==="range"){for(const e in this.nameOidMap){const i=this.nameOidMap[e];if(!i.rangeOid)continue;const t=n(this.getTypeParser(i.oid)),g=s(t);this.oidParserMap.set(i.rangeOid,t),!!i.arrayRangeOid&&this.oidParserMap.set(i.arrayRangeOid,g)}return}const a=c(e=>r.parse(e),"parser"),o=s(a);if(r.key.toLowerCase()==="enum"){this.enumOids.oids.forEach(e=>{this.oidParserMap.set(e,a)}),this.enumOids.arrayOids.forEach(e=>{this.oidParserMap.set(e,o)});return}r.types.postgres.forEach(e=>{!this.nameOidMap[e]||(this.oidParserMap.set(this.nameOidMap[e].oid,a),!!this.nameOidMap[e].arrayOid&&this.oidParserMap.set(this.nameOidMap[e].arrayOid,o))})}_clearTypeParser(){this.oidParserMap=new Map}getTypeParser(r,...s){return this.oidParserMap.get(r)?this.oidParserMap.get(r):this.lib.types.getTypeParser(r,...s)}async connect(r){r.user=r.username;const s=l.pick(r,["user","password","host","database","port"]);s.types={getTypeParser:y.prototype.getTypeParser.bind(this)},r.dialectOptions&&l.merge(s,l.pick(r.dialectOptions,["application_name","ssl","client_encoding","binary","keepAlive","statement_timeout","query_timeout","idle_in_transaction_session_timeout","options"]));const n=await new Promise((o,e)=>{let i=!1;const t=new this.lib.Client(s),g=c(p=>{switch(p.parameterName){case"server_version":if(this.sequelize.options.databaseVersion===0){const f=h.coerce(p.parameterValue).version;this.sequelize.options.databaseVersion=h.valid(f)?f:this.dialect.defaultVersion}break;case"standard_conforming_strings":t.standard_conforming_strings=p.parameterValue;break}},"parameterHandler"),m=c(()=>{u("connection timeout"),i||e(new d.ConnectionTimedOutError(new Error("Connection timed out")))},"endHandler");t.once("end",m),this.sequelize.config.native||t.connection.on("parameterStatus",g),t.connect(p=>{if(i=!0,this.sequelize.config.native||t.connection.removeListener("parameterStatus",g),p)if(p.code)switch(p.code){case"ECONNREFUSED":e(new d.ConnectionRefusedError(p));break;case"ENOTFOUND":e(new d.HostNotFoundError(p));break;case"EHOSTUNREACH":e(new d.HostNotReachableError(p));break;case"EINVAL":e(new d.InvalidConnectionError(p));break;default:e(new d.ConnectionError(p));break}else e(new d.ConnectionError(p));else u("connection acquired"),t.removeListener("end",m),o(t)})});let a="";return this.sequelize.options.standardConformingStrings!==!1&&n.standard_conforming_strings!=="on"&&(a+="SET standard_conforming_strings=on;"),this.sequelize.options.clientMinMessages!==!1&&(a+=`SET client_min_messages TO ${this.sequelize.options.clientMinMessages};`),this.sequelize.config.keepDefaultTimezone||(!!T.tz.zone(this.sequelize.options.timezone)?a+=`SET TIME ZONE '${this.sequelize.options.timezone}';`:a+=`SET TIME ZONE INTERVAL '${this.sequelize.options.timezone}' HOUR TO MINUTE;`),a&&await n.query(a),Object.keys(this.nameOidMap).length===0&&this.enumOids.oids.length===0&&this.enumOids.arrayOids.length===0&&await this._refreshDynamicOIDs(n),n.on("error",o=>{n._invalid=!0,u(`connection error ${o.code||o.message}`),this.pool.destroy(n)}),n}async disconnect(r){if(r._ending){u("connection tried to disconnect but was already at ENDING state");return}return await q(s=>r.end(s))()}validate(r){return!r._invalid&&!r._ending}async _refreshDynamicOIDs(r){const s=this.sequelize.options.databaseVersion,n="8.3.0";if((s&&h.gte(s,n))===!1)return;const a=await(r||this.sequelize).query("WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));");let o=Array.isArray(a)?a.pop():a;Array.isArray(o)&&o[0].command==="SET"&&(o=o.pop());const e={},i={oids:[],arrayOids:[]};for(const t of o.rows){if(t.typtype==="e"){i.oids.push(t.oid),t.typarray&&i.arrayOids.push(t.typarray);continue}e[t.typname]={oid:t.oid},t.typarray&&(e[t.typname].arrayOid=t.typarray),t.rngtypid&&(e[t.typname].rangeOid=t.rngtypid,t.rngtyparray&&(e[t.typname].arrayRangeOid=t.rngtyparray))}this.nameOidMap=e,this.enumOids=i,this.refreshTypeParser(O.postgres)}_clearDynamicOIDs(){this.nameOidMap={},this.enumOids={oids:[],arrayOids:[]}}}c(y,"ConnectionManager"),module.exports=y,module.exports.ConnectionManager=y,module.exports.default=y;
//# sourceMappingURL=connection-manager.js.map
