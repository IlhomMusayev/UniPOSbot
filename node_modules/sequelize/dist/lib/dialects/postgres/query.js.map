{
  "version": 3,
  "sources": ["../../../../lib/dialects/postgres/query.js"],
  "sourcesContent": ["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst QueryTypes = require('../../query-types');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:pg');\n\n\nclass Query extends AbstractQuery {\n  /**\n   * Rewrite query with parameters.\n   *\n   * @param {string} sql\n   * @param {Array|object} values\n   * @param {string} dialect\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect) {\n    const stringReplaceFunc = value => typeof value === 'string' ? value.replace(/\\0/g, '\\\\0') : value;\n\n    let bindParam;\n    if (Array.isArray(values)) {\n      bindParam = values.map(stringReplaceFunc);\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    } else {\n      bindParam = [];\n      let i = 0;\n      const seen = {};\n      const replacementFunc = (match, key, values) => {\n        if (seen[key] !== undefined) {\n          return seen[key];\n        }\n        if (values[key] !== undefined) {\n          i = i + 1;\n          bindParam.push(stringReplaceFunc(values[key]));\n          seen[key] = `$${i}`;\n          return `$${i}`;\n        }\n        return undefined;\n      };\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    }\n    return [sql, bindParam];\n  }\n\n  async run(sql, parameters) {\n    const { connection } = this;\n\n    if (!_.isEmpty(this.options.searchPath)) {\n      sql = this.sequelize.getQueryInterface().queryGenerator.setSearchPath(this.options.searchPath) + sql;\n    }\n\n    if (this.sequelize.options.minifyAliases && this.options.includeAliases) {\n      _.toPairs(this.options.includeAliases)\n        // Sorting to replace the longest aliases first to prevent alias collision\n        .sort((a, b) => b[1].length - a[1].length)\n        .forEach(([alias, original]) => {\n          const reg = new RegExp(_.escapeRegExp(original), 'g');\n\n          sql = sql.replace(reg, alias);\n        });\n    }\n\n    this.sql = sql;\n\n    const query = parameters && parameters.length\n      ? new Promise((resolve, reject) => connection.query(sql, parameters, (error, result) => error ? reject(error) : resolve(result)))\n      : new Promise((resolve, reject) => connection.query(sql, (error, result) => error ? reject(error) : resolve(result)));\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    let queryResult;\n    const errForStack = new Error();\n\n    try {\n      queryResult = await query;\n    } catch (err) {\n      // set the client so that it will be reaped if the connection resets while executing\n      if (err.code === 'ECONNRESET') {\n        connection._invalid = true;\n      }\n\n      err.sql = sql;\n      err.parameters = parameters;\n      throw this.formatError(err, errForStack.stack);\n    }\n\n    complete();\n\n    let rows = Array.isArray(queryResult)\n      ? queryResult.reduce((allRows, r) => allRows.concat(r.rows || []), [])\n      : queryResult.rows;\n    const rowCount = Array.isArray(queryResult)\n      ? queryResult.reduce(\n        (count, r) => Number.isFinite(r.rowCount) ? count + r.rowCount : count,\n        0\n      )\n      : queryResult.rowCount || 0;\n\n    if (this.sequelize.options.minifyAliases && this.options.aliasesMapping) {\n      rows = rows\n        .map(row => _.toPairs(row)\n          .reduce((acc, [key, value]) => {\n            const mapping = this.options.aliasesMapping.get(key);\n            acc[mapping || key] = value;\n            return acc;\n          }, {})\n        );\n    }\n\n    const isTableNameQuery = sql.startsWith('SELECT table_name FROM information_schema.tables');\n    const isRelNameQuery = sql.startsWith('SELECT relname FROM pg_class WHERE oid IN');\n\n    if (isRelNameQuery) {\n      return rows.map(row => ({\n        name: row.relname,\n        tableName: row.relname.split('_')[0]\n      }));\n    }\n    if (isTableNameQuery) {\n      return rows.map(row => Object.values(row));\n    }\n\n    if (rows[0] && rows[0].sequelize_caught_exception !== undefined) {\n      if (rows[0].sequelize_caught_exception !== null) {\n        throw this.formatError({\n          sql,\n          parameters,\n          code: '23505',\n          detail: rows[0].sequelize_caught_exception\n        });\n      }\n      for (const row of rows) {\n        delete row.sequelize_caught_exception;\n      }\n    }\n\n    if (this.isShowIndexesQuery()) {\n      for (const row of rows) {\n        const attributes = /ON .*? (?:USING .*?\\s)?\\(([^]*)\\)/gi.exec(row.definition)[1].split(',');\n\n        // Map column index in table to column name\n        const columns = _.zipObject(\n          row.column_indexes,\n          this.sequelize.getQueryInterface().queryGenerator.fromArray(row.column_names)\n        );\n        delete row.column_indexes;\n        delete row.column_names;\n\n        let field;\n        let attribute;\n\n        // Indkey is the order of attributes in the index, specified by a string of attribute indexes\n        row.fields = row.indkey.split(' ').map((indKey, index) => {\n          field = columns[indKey];\n          // for functional indices indKey = 0\n          if (!field) {\n            return null;\n          }\n          attribute = attributes[index];\n          return {\n            attribute: field,\n            collate: attribute.match(/COLLATE \"(.*?)\"/) ? /COLLATE \"(.*?)\"/.exec(attribute)[1] : undefined,\n            order: attribute.includes('DESC') ? 'DESC' : attribute.includes('ASC') ? 'ASC' : undefined,\n            length: undefined\n          };\n        }).filter(n => n !== null);\n        delete row.columns;\n      }\n      return rows;\n    }\n    if (this.isForeignKeysQuery()) {\n      const result = [];\n      for (const row of rows) {\n        let defParts;\n        if (row.condef !== undefined && (defParts = row.condef.match(/FOREIGN KEY \\((.+)\\) REFERENCES (.+)\\((.+)\\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {\n          row.id = row.constraint_name;\n          row.table = defParts[2];\n          row.from = defParts[1];\n          row.to = defParts[3];\n          let i;\n          for (i = 5; i <= 8; i += 3) {\n            if (/(UPDATE|DELETE)/.test(defParts[i])) {\n              row[`on_${defParts[i].toLowerCase()}`] = defParts[i + 1];\n            }\n          }\n        }\n        result.push(row);\n      }\n      return result;\n    }\n    if (this.isSelectQuery()) {\n      let result = rows;\n      // Postgres will treat tables as case-insensitive, so fix the case\n      // of the returned values to match attributes\n      if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n        const attrsMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\n          m[k.toLowerCase()] = k;\n          return m;\n        }, {});\n        result = rows.map(row => {\n          return _.mapKeys(row, (value, key) => {\n            const targetAttr = attrsMap[key];\n            if (typeof targetAttr === 'string' && targetAttr !== key) {\n              return targetAttr;\n            }\n            return key;\n          });\n        });\n      }\n      return this.handleSelectQuery(result);\n    }\n    if (QueryTypes.DESCRIBE === this.options.type) {\n      const result = {};\n\n      for (const row of rows) {\n        result[row.Field] = {\n          type: row.Type.toUpperCase(),\n          allowNull: row.Null === 'YES',\n          defaultValue: row.Default,\n          comment: row.Comment,\n          special: row.special ? this.sequelize.getQueryInterface().queryGenerator.fromArray(row.special) : [],\n          primaryKey: row.Constraint === 'PRIMARY KEY'\n        };\n\n        if (result[row.Field].type === 'BOOLEAN') {\n          result[row.Field].defaultValue = { 'false': false, 'true': true }[result[row.Field].defaultValue];\n\n          if (result[row.Field].defaultValue === undefined) {\n            result[row.Field].defaultValue = null;\n          }\n        }\n\n        if (typeof result[row.Field].defaultValue === 'string') {\n          result[row.Field].defaultValue = result[row.Field].defaultValue.replace(/'/g, '');\n\n          if (result[row.Field].defaultValue.includes('::')) {\n            const split = result[row.Field].defaultValue.split('::');\n            if (split[1].toLowerCase() !== 'regclass)') {\n              result[row.Field].defaultValue = split[0];\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n    if (this.isVersionQuery()) {\n      return rows[0].server_version;\n    }\n    if (this.isShowOrDescribeQuery()) {\n      return rows;\n    }\n    if (QueryTypes.BULKUPDATE === this.options.type) {\n      if (!this.options.returning) {\n        return parseInt(rowCount, 10);\n      }\n      return this.handleSelectQuery(rows);\n    }\n    if (QueryTypes.BULKDELETE === this.options.type) {\n      return parseInt(rowCount, 10);\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery()) {\n      if (this.instance && this.instance.dataValues) {\n        // If we are creating an instance, and we get no rows, the create failed but did not throw.\n        // This probably means a conflict happened and was ignored, to avoid breaking a transaction.\n        if (this.isInsertQuery() && rowCount === 0) {\n          throw new sequelizeErrors.EmptyResultError();\n        }\n\n        for (const key in rows[0]) {\n          if (Object.prototype.hasOwnProperty.call(rows[0], key)) {\n            const record = rows[0][key];\n\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n\n      if (this.isUpsertQuery()) {\n        return [\n          this.instance,\n          null\n        ];\n      }\n\n      return [\n        this.instance || rows && (this.options.plain && rows[0] || rows) || undefined,\n        rowCount\n      ];\n    }\n    if (this.isRawQuery()) {\n      return [rows, queryResult];\n    }\n    return rows;\n  }\n\n  formatError(err, errStack) {\n    let match;\n    let table;\n    let index;\n    let fields;\n    let errors;\n    let message;\n\n    const code = err.code || err.sqlState;\n    const errMessage = err.message || err.messagePrimary;\n    const errDetail = err.detail || err.messageDetail;\n\n    switch (code) {\n      case '23503':\n        index = errMessage.match(/violates foreign key constraint \"(.+?)\"/);\n        index = index ? index[1] : undefined;\n        table = errMessage.match(/on table \"(.+?)\"/);\n        table = table ? table[1] : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          message: errMessage,\n          fields: null,\n          index,\n          table,\n          parent: err,\n          stack: errStack\n        });\n      case '23505':\n        // there are multiple different formats of error messages for this error code\n        // this regex should check at least two\n        if (errDetail && (match = errDetail.replace(/\"/g, '').match(/Key \\((.*?)\\)=\\((.*?)\\)/))) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n          errors = [];\n          message = 'Validation error';\n\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(\n              this.getUniqueConstraintErrorMessage(field),\n              'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n              field,\n              value,\n              this.instance,\n              'not_unique'\n            ));\n          });\n\n          if (this.model && this.model.uniqueKeys) {\n            _.forOwn(this.model.uniqueKeys, constraint => {\n              if (_.isEqual(constraint.fields, Object.keys(fields)) && !!constraint.msg) {\n                message = constraint.msg;\n                return false;\n              }\n            });\n          }\n\n          return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n        }\n\n        return new sequelizeErrors.UniqueConstraintError({\n          message: errMessage,\n          parent: err,\n          stack: errStack\n        });\n\n      case '23P01':\n        match = errDetail.match(/Key \\((.*?)\\)=\\((.*?)\\)/);\n\n        if (match) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n        }\n        message = 'Exclusion constraint error';\n\n        return new sequelizeErrors.ExclusionConstraintError({\n          message,\n          constraint: err.constraint,\n          fields,\n          table: err.table,\n          parent: err,\n          stack: errStack\n        });\n\n      case '42704':\n        if (err.sql && /(CONSTRAINT|INDEX)/gi.test(err.sql)) {\n          message = 'Unknown constraint error';\n          index = errMessage.match(/(?:constraint|index) \"(.+?)\"/i);\n          index = index ? index[1] : undefined;\n          table = errMessage.match(/relation \"(.+?)\"/i);\n          table = table ? table[1] : undefined;\n\n          throw new sequelizeErrors.UnknownConstraintError({\n            message,\n            constraint: index,\n            fields,\n            table,\n            parent: err,\n            stack: errStack\n          });\n        }\n      // falls through\n      default:\n        return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n    }\n  }\n\n  isForeignKeysQuery() {\n    return /SELECT conname as constraint_name, pg_catalog\\.pg_get_constraintdef\\(r\\.oid, true\\) as condef FROM pg_catalog\\.pg_constraint r WHERE r\\.conrelid = \\(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\\) AND r\\.contype = 'f' ORDER BY 1;/.test(this.sql);\n  }\n\n  getInsertIdField() {\n    return 'id';\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"],
  "mappings": "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",
  "names": []
}
