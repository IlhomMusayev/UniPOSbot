"use strict";var c=Object.defineProperty;var E=Object.getOwnPropertySymbols;var S=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable;var u=(s,e,t)=>e in s?c(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t,d=(s,e)=>{for(var t in e||(e={}))S.call(e,t)&&u(s,t,e[t]);if(E)for(var t of E(e))m.call(e,t)&&u(s,t,e[t]);return s};var l=(s,e)=>c(s,"name",{value:e,configurable:!0});const C=require("semver"),N=require("../abstract/connection-manager"),n=require("../../errors"),{logger:w}=require("../../utils/logger"),O=require("../../data-types").mariadb,b=require("moment-timezone"),p=w.debugContext("connection:mariadb"),i=require("../parserStore")("mariadb");class a extends N{constructor(e,t){t.config.port=t.config.port||3306;super(e,t);this.lib=this._loadDialectModule("mariadb"),this.refreshTypeParser(O)}static _typecast(e,t){return i.get(e.type)?i.get(e.type)(e,this.sequelize.options,t):t()}_refreshTypeParser(e){i.refresh(e)}_clearTypeParser(){i.clear()}async connect(e){let t=this.sequelize.options.timezone;t=/\//.test(t)?b.tz(t).format("Z"):t;const o=d({host:e.host,port:e.port,user:e.username,password:e.password,database:e.database,timezone:t,typeCast:a._typecast.bind(this),bigNumberStrings:!1,supportBigNumbers:!0,foundRows:!1},e.dialectOptions);this.sequelize.config.keepDefaultTimezone||(o.initSql?(Array.isArray(o.initSql)||(o.initSql=[o.initSql]),o.initSql.push(`SET time_zone = '${t}'`)):o.initSql=`SET time_zone = '${t}'`);try{const r=await this.lib.createConnection(o);return this.sequelize.options.databaseVersion=C.coerce(r.serverVersion()).version,p("connection acquired"),r.on("error",h=>{switch(h.code){case"ESOCKET":case"ECONNRESET":case"EPIPE":case"PROTOCOL_CONNECTION_LOST":this.pool.destroy(r)}}),r}catch(r){switch(r.code){case"ECONNREFUSED":throw new n.ConnectionRefusedError(r);case"ER_ACCESS_DENIED_ERROR":case"ER_ACCESS_DENIED_NO_PASSWORD_ERROR":throw new n.AccessDeniedError(r);case"ENOTFOUND":throw new n.HostNotFoundError(r);case"EHOSTUNREACH":case"ENETUNREACH":case"EADDRNOTAVAIL":throw new n.HostNotReachableError(r);case"EINVAL":throw new n.InvalidConnectionError(r);default:throw new n.ConnectionError(r)}}}async disconnect(e){if(!e.isValid()){p("connection tried to disconnect but was already at CLOSED state");return}return await e.end()}validate(e){return e&&e.isValid()}}l(a,"ConnectionManager"),module.exports=a,module.exports.ConnectionManager=a,module.exports.default=a;
//# sourceMappingURL=connection-manager.js.map
