"use strict";var h=Object.defineProperty,E=Object.defineProperties;var Q=Object.getOwnPropertyDescriptors;var d=Object.getOwnPropertySymbols;var $=Object.prototype.hasOwnProperty,G=Object.prototype.propertyIsEnumerable;var b=(o,e,r)=>e in o?h(o,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):o[e]=r,y=(o,e)=>{for(var r in e||(e={}))$.call(e,r)&&b(o,r,e[r]);if(d)for(var r of d(e))G.call(e,r)&&b(o,r,e[r]);return o},q=(o,e)=>E(o,Q(e));var w=(o,e)=>h(o,"name",{value:e,configurable:!0});const z=require("../../errors"),T=require("../../query-types"),{QueryInterface:_}=require("../abstract/query-interface"),{cloneDeep:A}=require("../../utils"),S=require("lodash");class C extends _{async removeColumn(e,r,n){n=n||{};const i=await this.describeTable(e,n);delete i[r];const s=this.queryGenerator.removeColumnQuery(e,i).split(";").filter(t=>t!=="");for(const t of s)await this.sequelize.query(`${t};`,y({raw:!0},n))}async changeColumn(e,r,n,i){i=i||{};const a=await this.describeTable(e,i);Object.assign(a[r],this.normalizeAttribute(n));const t=this.queryGenerator.removeColumnQuery(e,a).split(";").filter(u=>u!=="");for(const u of t)await this.sequelize.query(`${u};`,y({raw:!0},i))}async renameColumn(e,r,n,i){i=i||{};const a=await this.assertTableHasColumn(e,r,i);a[n]=y({},a[r]),delete a[r];const t=this.queryGenerator.renameColumnQuery(e,r,n,a).split(";").filter(u=>u!=="");for(const u of t)await this.sequelize.query(`${u};`,y({raw:!0},i))}async removeConstraint(e,r,n){let i;const s=(await this.showConstraint(e,r)).find(l=>l.constraintName===r);if(!s)throw new z.UnknownConstraintError({message:`Constraint ${r} on table ${e} does not exist`,constraint:r,table:e});i=s.sql,s.constraintName=this.queryGenerator.quoteIdentifier(s.constraintName);let t=`, CONSTRAINT ${s.constraintName} ${s.constraintType} ${s.constraintCondition}`;if(s.constraintType==="FOREIGN KEY"){const l=this.queryGenerator.quoteTable(s.referenceTableName);s.referenceTableKeys=s.referenceTableKeys.map(g=>this.queryGenerator.quoteIdentifier(g));const m=s.referenceTableKeys.join(", ");t+=` REFERENCES ${l} (${m})`,t+=` ON UPDATE ${s.updateAction}`,t+=` ON DELETE ${s.deleteAction}`}i=i.replace(t,""),i+=";";const u=await this.describeTable(e,n),c=this.queryGenerator._alterConstraintQuery(e,u,i).split(";").filter(l=>l!=="");for(const l of c)await this.sequelize.query(`${l};`,y({raw:!0},n))}async addConstraint(e,r){if(!r.fields)throw new Error("Fields must be specified through options.fields");if(!r.type)throw new Error("Constraint type must be specified through options.type");r=A(r);const n=this.queryGenerator.getConstraintSnippet(e,r),i=this.queryGenerator.describeCreateTableQuery(e);let s=(await this.sequelize.query(i,q(y({},r),{type:T.SELECT,raw:!0})))[0].sql;const t=s.length-1,u=`${s.substr(0,t)}, ${n})${s.substr(t+1)};`,f=await this.describeTable(e,r);s=this.queryGenerator._alterConstraintQuery(e,f,u);const c=s.split(";").filter(l=>l!=="");for(const l of c)await this.sequelize.query(`${l};`,y({raw:!0},r))}async getForeignKeyReferencesForTable(e,r){const n=this.sequelize.config.database,i=this.queryGenerator.getForeignKeysQuery(e,n);return(await this.sequelize.query(i,r)).map(s=>({tableName:e,columnName:s.from,referencedTableName:s.table,referencedColumnName:s.to,tableCatalog:n,referencedTableCatalog:n}))}async dropAllTables(e){e=e||{};const r=e.skip||[],n=await this.showAllTables(e);await this.sequelize.query("PRAGMA foreign_keys = OFF",e),await this._dropAllTables(n,r,e),await this.sequelize.query("PRAGMA foreign_keys = ON",e)}async describeTable(e,r){let n=null,i=null;typeof r=="string"?n=r:typeof r=="object"&&r!==null&&(n=r.schema||null,i=r.schemaDelimiter||null),typeof e=="object"&&e!==null&&(n=e.schema,e=e.tableName);const a=this.queryGenerator.describeTableQuery(e,n,i);r=q(y({},r),{type:T.DESCRIBE});const s=this.queryGenerator.showIndexesQuery(e);try{const t=await this.sequelize.query(a,r);if(S.isEmpty(t))throw new Error(`No description found for "${e}" table. Check the table name and schema; remember, they _are_ case sensitive.`);const u=await this.sequelize.query(s,r);for(const c in t)t[c].unique=!1;for(const c of u)for(const l of c.fields)c.unique!==void 0&&(t[l.attribute].unique=c.unique);const f=await this.getForeignKeyReferencesForTable(e,r);for(const c of f)t[c.columnName].references={model:c.referencedTableName,key:c.referencedColumnName};return t}catch(t){throw t.original&&t.original.code==="ER_NO_SUCH_TABLE"?new Error(`No description found for "${e}" table. Check the table name and schema; remember, they _are_ case sensitive.`):t}}}w(C,"SQLiteQueryInterface"),exports.SQLiteQueryInterface=C;
//# sourceMappingURL=query-interface.js.map
