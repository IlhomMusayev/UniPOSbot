{
  "version": 3,
  "sources": ["../../../../lib/dialects/postgres/query-generator.js"],
  "sourcesContent": ["'use strict';\n\nconst Utils = require('../../utils');\nconst util = require('util');\nconst DataTypes = require('../../data-types');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst semver = require('semver');\nconst _ = require('lodash');\n\nclass PostgresQueryGenerator extends AbstractQueryGenerator {\n  setSearchPath(searchPath) {\n    return `SET search_path to ${searchPath};`;\n  }\n\n  createDatabaseQuery(databaseName, options) {\n    options = {\n      encoding: null,\n      collate: null,\n      ...options\n    };\n\n    const values = {\n      database: this.quoteTable(databaseName),\n      encoding: options.encoding ? ` ENCODING = ${this.escape(options.encoding)}` : '',\n      collation: options.collate ? ` LC_COLLATE = ${this.escape(options.collate)}` : '',\n      ctype: options.ctype ? ` LC_CTYPE = ${this.escape(options.ctype)}` : '',\n      template: options.template ? ` TEMPLATE = ${this.escape(options.template)}` : ''\n    };\n\n    return `CREATE DATABASE ${values.database}${values.encoding}${values.collation}${values.ctype}${values.template};`;\n  }\n\n  dropDatabaseQuery(databaseName) {\n    return `DROP DATABASE IF EXISTS ${this.quoteTable(databaseName)};`;\n  }\n\n  createSchema(schema) {\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n\n    if (databaseVersion && semver.gte(databaseVersion, '9.2.0')) {\n      return `CREATE SCHEMA IF NOT EXISTS ${schema};`;\n    }\n\n    return `CREATE SCHEMA ${schema};`;\n  }\n\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${schema} CASCADE;`;\n  }\n\n  showSchemasQuery() {\n    return \"SELECT schema_name FROM information_schema.schemata WHERE schema_name <> 'information_schema' AND schema_name != 'public' AND schema_name !~ E'^pg_';\";\n  }\n\n  versionQuery() {\n    return 'SHOW SERVER_VERSION';\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = { ...options };\n\n    //Postgres 9.0 does not support CREATE TABLE IF NOT EXISTS, 9.1 and above do\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n    const attrStr = [];\n    let comments = '';\n    let columnComments = '';\n\n    const quotedTable = this.quoteTable(tableName);\n\n    if (options.comment && typeof options.comment === 'string') {\n      comments += `; COMMENT ON TABLE ${quotedTable} IS ${this.escape(options.comment)}`;\n    }\n\n    for (const attr in attributes) {\n      const quotedAttr = this.quoteIdentifier(attr);\n      const i = attributes[attr].indexOf('COMMENT ');\n      if (i !== -1) {\n        // Move comment to a separate query\n        const escapedCommentText = this.escape(attributes[attr].substring(i + 8));\n        columnComments += `; COMMENT ON COLUMN ${quotedTable}.${quotedAttr} IS ${escapedCommentText}`;\n        attributes[attr] = attributes[attr].substring(0, i);\n      }\n\n      const dataType = this.dataTypeMapping(tableName, attr, attributes[attr]);\n      attrStr.push(`${quotedAttr} ${dataType}`);\n    }\n\n\n    let attributesClause = attrStr.join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, columns => {\n        if (columns.customIndex) {\n          attributesClause += `, UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    const pks = _.reduce(attributes, (acc, attribute, key) => {\n      if (attribute.includes('PRIMARY KEY')) {\n        acc.push(this.quoteIdentifier(key));\n      }\n      return acc;\n    }, []).join(',');\n\n    if (pks.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pks})`;\n    }\n\n    return `CREATE TABLE ${databaseVersion === 0 || semver.gte(databaseVersion, '9.1.0') ? 'IF NOT EXISTS ' : ''}${quotedTable} (${attributesClause})${comments}${columnComments};`;\n  }\n\n  dropTableQuery(tableName, options) {\n    options = options || {};\n    return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)}${options.cascade ? ' CASCADE' : ''};`;\n  }\n\n  showTablesQuery() {\n    return \"SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';\";\n  }\n\n  describeTableQuery(tableName, schema) {\n    if (!schema) schema = 'public';\n\n    return 'SELECT ' +\n      'pk.constraint_type as \"Constraint\",' +\n      'c.column_name as \"Field\", ' +\n      'c.column_default as \"Default\",' +\n      'c.is_nullable as \"Null\", ' +\n      '(CASE WHEN c.udt_name = \\'hstore\\' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN \\'(\\' || c.character_maximum_length || \\')\\' ELSE \\'\\' END) as \"Type\", ' +\n      '(SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", ' +\n      '(SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" ' +\n      'FROM information_schema.columns c ' +\n      'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ' +\n      'cu.column_name, tc.constraint_type ' +\n      'FROM information_schema.TABLE_CONSTRAINTS tc ' +\n      'JOIN information_schema.KEY_COLUMN_USAGE  cu ' +\n      'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name ' +\n      'and tc.constraint_name=cu.constraint_name ' +\n      'and tc.constraint_type=\\'PRIMARY KEY\\') pk ' +\n      'ON pk.table_schema=c.table_schema ' +\n      'AND pk.table_name=c.table_name ' +\n      'AND pk.column_name=c.column_name ' +\n      `WHERE c.table_name = ${this.escape(tableName)} AND c.table_schema = ${this.escape(schema)} `;\n  }\n\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {string}  stmt  The statement to validate\n   * @returns {boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   */\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== 'string') {\n      return false;\n    }\n\n    // https://www.postgresql.org/docs/current/static/functions-json.html\n    const jsonFunctionRegex = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const jsonOperatorRegex = /^\\s*(->>?|#>>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const operatorMatches = jsonOperatorRegex.exec(string);\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = tokenCaptureRegex.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    // Check invalid json statement\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n\n    // return true if the statement has valid json function\n    return hasJsonFunction;\n  }\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      // Parse nested object\n      if (smth.conditions) {\n        const conditions = this.parseConditionObject(smth.conditions).map(condition =>\n          `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`\n        );\n\n        return conditions.join(' AND ');\n      }\n      if (smth.path) {\n        let str;\n\n        // Allow specifying conditions using the postgres json syntax\n        if (this._checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          // Also support json property accessors\n          const paths = _.toPath(smth.path);\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n\n        if (smth.value) {\n          str += util.format(' = %s', this.escape(smth.value));\n        }\n\n        return str;\n      }\n    }\n    return super.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  }\n\n  addColumnQuery(table, key, attribute) {\n    const dbDataType = this.attributeToSQL(attribute, { context: 'addColumn', table, key });\n    const dataType = attribute.type || attribute;\n    const definition = this.dataTypeMapping(table, key, dbDataType);\n    const quotedKey = this.quoteIdentifier(key);\n    const quotedTable = this.quoteTable(this.extractTableDetails(table));\n\n    let query = `ALTER TABLE ${quotedTable} ADD COLUMN ${quotedKey} ${definition};`;\n\n    if (dataType instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType) + query;\n    } else if (dataType.type && dataType.type instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType.type) + query;\n    }\n\n    return query;\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    const quotedTableName = this.quoteTable(this.extractTableDetails(tableName));\n    const quotedAttributeName = this.quoteIdentifier(attributeName);\n    return `ALTER TABLE ${quotedTableName} DROP COLUMN ${quotedAttributeName};`;\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const query = subQuery => `ALTER TABLE ${this.quoteTable(tableName)} ALTER COLUMN ${subQuery};`;\n    const sql = [];\n    for (const attributeName in attributes) {\n      let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);\n      let attrSql = '';\n\n      if (definition.includes('NOT NULL')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET NOT NULL`);\n\n        definition = definition.replace('NOT NULL', '').trim();\n      } else if (!definition.includes('REFERENCES')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP NOT NULL`);\n      }\n\n      if (definition.includes('DEFAULT')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET DEFAULT ${definition.match(/DEFAULT ([^;]+)/)[1]}`);\n\n        definition = definition.replace(/(DEFAULT[^;]+)/, '').trim();\n      } else if (!definition.includes('REFERENCES')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP DEFAULT`);\n      }\n\n      if (attributes[attributeName].startsWith('ENUM(')) {\n        attrSql += this.pgEnum(tableName, attributeName, attributes[attributeName]);\n        definition = definition.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attributeName, { schema: false }));\n        definition += ` USING (${this.quoteIdentifier(attributeName)}::${this.pgEnumName(tableName, attributeName)})`;\n      }\n\n      if (definition.match(/UNIQUE;*$/)) {\n        definition = definition.replace(/UNIQUE;*$/, '');\n        attrSql += query(`ADD UNIQUE (${this.quoteIdentifier(attributeName)})`).replace('ALTER COLUMN', '');\n      }\n\n      if (definition.includes('REFERENCES')) {\n        definition = definition.replace(/.+?(?=REFERENCES)/, '');\n        attrSql += query(`ADD FOREIGN KEY (${this.quoteIdentifier(attributeName)}) ${definition}`).replace('ALTER COLUMN', '');\n      } else {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} TYPE ${definition}`);\n      }\n\n      sql.push(attrSql);\n    }\n\n    return sql.join('');\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n\n    const attrString = [];\n\n    for (const attributeName in attributes) {\n      attrString.push(`${this.quoteIdentifier(attrBefore)} TO ${this.quoteIdentifier(attributeName)}`);\n    }\n\n    return `ALTER TABLE ${this.quoteTable(tableName)} RENAME COLUMN ${attrString.join(', ')};`;\n  }\n\n  fn(fnName, tableName, parameters, body, returns, language) {\n    fnName = fnName || 'testfunc';\n    language = language || 'plpgsql';\n    returns = returns ? `RETURNS ${returns}` : '';\n    parameters = parameters || '';\n\n    return `CREATE OR REPLACE FUNCTION pg_temp.${fnName}(${parameters}) ${returns} AS $func$ BEGIN ${body} END; $func$ LANGUAGE ${language}; SELECT * FROM pg_temp.${fnName}();`;\n  }\n\n  truncateTableQuery(tableName, options = {}) {\n    return [\n      `TRUNCATE ${this.quoteTable(tableName)}`,\n      options.restartIdentity ? ' RESTART IDENTITY' : '',\n      options.cascade ? ' CASCADE' : ''\n    ].join('');\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    const table = this.quoteTable(tableName);\n    let whereClause = this.getWhereConditions(where, null, model, options);\n    const limit = options.limit ? ` LIMIT ${this.escape(options.limit)}` : '';\n    let primaryKeys = '';\n    let primaryKeysSelection = '';\n\n    if (whereClause) {\n      whereClause = ` WHERE ${whereClause}`;\n    }\n\n    if (options.limit) {\n      if (!model) {\n        throw new Error('Cannot LIMIT delete without a model.');\n      }\n\n      const pks = Object.values(model.primaryKeys).map(pk => this.quoteIdentifier(pk.field)).join(',');\n\n      primaryKeys = model.primaryKeyAttributes.length > 1 ? `(${pks})` : pks;\n      primaryKeysSelection = pks;\n\n      return `DELETE FROM ${table} WHERE ${primaryKeys} IN (SELECT ${primaryKeysSelection} FROM ${table}${whereClause}${limit})`;\n    }\n    return `DELETE FROM ${table}${whereClause}`;\n  }\n\n  showIndexesQuery(tableName) {\n    let schemaJoin = '';\n    let schemaWhere = '';\n    if (typeof tableName !== 'string') {\n      schemaJoin = ', pg_namespace s';\n      schemaWhere = ` AND s.oid = t.relnamespace AND s.nspname = '${tableName.schema}'`;\n      tableName = tableName.tableName;\n    }\n\n    // This is ARCANE!\n    return 'SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, ' +\n      'array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) ' +\n      `AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a${schemaJoin} ` +\n      'WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND ' +\n      `t.relkind = 'r' and t.relname = '${tableName}'${schemaWhere} ` +\n      'GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;';\n  }\n\n  showConstraintsQuery(tableName) {\n    //Postgres converts camelCased alias to lowercase unless quoted\n    return [\n      'SELECT constraint_catalog AS \"constraintCatalog\",',\n      'constraint_schema AS \"constraintSchema\",',\n      'constraint_name AS \"constraintName\",',\n      'table_catalog AS \"tableCatalog\",',\n      'table_schema AS \"tableSchema\",',\n      'table_name AS \"tableName\",',\n      'constraint_type AS \"constraintType\",',\n      'is_deferrable AS \"isDeferrable\",',\n      'initially_deferred AS \"initiallyDeferred\"',\n      'from INFORMATION_SCHEMA.table_constraints',\n      `WHERE table_name='${tableName}';`\n    ].join(' ');\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return `DROP INDEX IF EXISTS ${this.quoteIdentifiers(indexName)}`;\n  }\n\n  addLimitAndOffset(options) {\n    let fragment = '';\n    /* eslint-disable */\n    if (options.limit != null) {\n      fragment += ' LIMIT ' + this.escape(options.limit);\n    }\n    if (options.offset != null) {\n      fragment += ' OFFSET ' + this.escape(options.offset);\n    }\n    /* eslint-enable */\n\n    return fragment;\n  }\n\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    let type;\n    if (\n      attribute.type instanceof DataTypes.ENUM ||\n      attribute.type instanceof DataTypes.ARRAY && attribute.type.type instanceof DataTypes.ENUM\n    ) {\n      const enumType = attribute.type.type || attribute.type;\n      let values = attribute.values;\n\n      if (enumType.values && !attribute.values) {\n        values = enumType.values;\n      }\n\n      if (Array.isArray(values) && values.length > 0) {\n        type = `ENUM(${values.map(value => this.escape(value)).join(', ')})`;\n\n        if (attribute.type instanceof DataTypes.ARRAY) {\n          type += '[]';\n        }\n\n      } else {\n        throw new Error(\"Values for ENUM haven't been defined.\");\n      }\n    }\n\n    if (!type) {\n      type = attribute.type;\n    }\n\n    let sql = type.toString();\n\n    if (Object.prototype.hasOwnProperty.call(attribute, 'allowNull') && !attribute.allowNull) {\n      sql += ' NOT NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      if (attribute.autoIncrementIdentity) {\n        sql += ' GENERATED BY DEFAULT AS IDENTITY';\n      } else {\n        sql += ' SERIAL';\n      }\n    }\n\n    if (Utils.defaultValueSchemable(attribute.defaultValue)) {\n      sql += ` DEFAULT ${this.escape(attribute.defaultValue, attribute)}`;\n    }\n\n    if (attribute.unique === true) {\n      sql += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      sql += ' PRIMARY KEY';\n    }\n\n    if (attribute.references) {\n      let referencesTable = this.quoteTable(attribute.references.model);\n      let schema;\n\n      if (options.schema) {\n        schema = options.schema;\n      } else if (\n        (!attribute.references.model || typeof attribute.references.model == 'string')\n        && options.table\n        && options.table.schema\n      ) {\n        schema = options.table.schema;\n      }\n\n      if (schema) {\n        referencesTable = this.quoteTable(this.addSchema({\n          tableName: referencesTable,\n          _schema: schema\n        }));\n      }\n\n      let referencesKey;\n\n      if (attribute.references.key) {\n        referencesKey = this.quoteIdentifiers(attribute.references.key);\n      } else {\n        referencesKey = this.quoteIdentifier('id');\n      }\n\n      sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n\n      if (attribute.onDelete) {\n        sql += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate) {\n        sql += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n\n      if (attribute.references.deferrable) {\n        sql += ` ${attribute.references.deferrable.toString(this)}`;\n      }\n    }\n\n    if (attribute.comment && typeof attribute.comment === 'string') {\n      if (options && (options.context === 'addColumn' || options.context === 'changeColumn')) {\n        const quotedAttr = this.quoteIdentifier(options.key);\n        const escapedCommentText = this.escape(attribute.comment);\n        sql += `; COMMENT ON COLUMN ${this.quoteTable(options.table)}.${quotedAttr} IS ${escapedCommentText}`;\n      } else {\n        // for createTable event which does it's own parsing\n        // TODO: centralize creation of comment statements here\n        sql += ` COMMENT ${attribute.comment}`;\n      }\n    }\n\n    return sql;\n  }\n\n  deferConstraintsQuery(options) {\n    return options.deferrable.toString(this);\n  }\n\n  setConstraintQuery(columns, type) {\n    let columnFragment = 'ALL';\n\n    if (columns) {\n      columnFragment = columns.map(column => this.quoteIdentifier(column)).join(', ');\n    }\n\n    return `SET CONSTRAINTS ${columnFragment} ${type}`;\n  }\n\n  setDeferredQuery(columns) {\n    return this.setConstraintQuery(columns, 'DEFERRED');\n  }\n\n  setImmediateQuery(columns) {\n    return this.setConstraintQuery(columns, 'IMMEDIATE');\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, { key, ...options });\n    }\n\n    return result;\n  }\n\n  createTrigger(tableName, triggerName, eventType, fireOnSpec, functionName, functionParams, optionsArray) {\n    const decodedEventType = this.decodeTriggerEventType(eventType);\n    const eventSpec = this.expandTriggerEventSpec(fireOnSpec);\n    const expandedOptions = this.expandOptions(optionsArray);\n    const paramList = this._expandFunctionParamList(functionParams);\n\n    return `CREATE ${this.triggerEventTypeIsConstraint(eventType)}TRIGGER ${this.quoteIdentifier(triggerName)} ${decodedEventType} ${\n      eventSpec} ON ${this.quoteTable(tableName)}${expandedOptions ? ` ${expandedOptions}` : ''} EXECUTE PROCEDURE ${functionName}(${paramList});`;\n  }\n\n  dropTrigger(tableName, triggerName) {\n    return `DROP TRIGGER ${this.quoteIdentifier(triggerName)} ON ${this.quoteTable(tableName)} RESTRICT;`;\n  }\n\n  renameTrigger(tableName, oldTriggerName, newTriggerName) {\n    return `ALTER TRIGGER ${this.quoteIdentifier(oldTriggerName)} ON ${this.quoteTable(tableName)} RENAME TO ${this.quoteIdentifier(newTriggerName)};`;\n  }\n\n  createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n    if (!functionName || !returnType || !language || !body) throw new Error('createFunction missing some parameters. Did you pass functionName, returnType, language and body?');\n\n    const paramList = this._expandFunctionParamList(params);\n    const variableList = options && options.variables ? this._expandFunctionVariableList(options.variables) : '';\n    const expandedOptionsArray = this.expandOptions(optionsArray);\n\n    const statement = options && options.force ? 'CREATE OR REPLACE FUNCTION' : 'CREATE FUNCTION';\n\n    return `${statement} ${functionName}(${paramList}) RETURNS ${returnType} AS $func$ ${variableList} BEGIN ${body} END; $func$ language '${language}'${expandedOptionsArray};`;\n  }\n\n  dropFunction(functionName, params) {\n    if (!functionName) throw new Error('requires functionName');\n    // RESTRICT is (currently, as of 9.2) default but we'll be explicit\n    const paramList = this._expandFunctionParamList(params);\n    return `DROP FUNCTION ${functionName}(${paramList}) RESTRICT;`;\n  }\n\n  renameFunction(oldFunctionName, params, newFunctionName) {\n    const paramList = this._expandFunctionParamList(params);\n    return `ALTER FUNCTION ${oldFunctionName}(${paramList}) RENAME TO ${newFunctionName};`;\n  }\n\n  pgEscapeAndQuote(val) {\n    return this.quoteIdentifier(Utils.removeTicks(this.escape(val), \"'\"));\n  }\n\n  _expandFunctionParamList(params) {\n    if (params === undefined || !Array.isArray(params)) {\n      throw new Error('_expandFunctionParamList: function parameters array required, including an empty one for no arguments');\n    }\n\n    const paramList = [];\n    params.forEach(curParam => {\n      const paramDef = [];\n      if (curParam.type) {\n        if (curParam.direction) { paramDef.push(curParam.direction); }\n        if (curParam.name) { paramDef.push(curParam.name); }\n        paramDef.push(curParam.type);\n      } else {\n        throw new Error('function or trigger used with a parameter without any type');\n      }\n\n      const joined = paramDef.join(' ');\n      if (joined) paramList.push(joined);\n\n    });\n\n    return paramList.join(', ');\n  }\n\n  _expandFunctionVariableList(variables) {\n    if (!Array.isArray(variables)) {\n      throw new Error('_expandFunctionVariableList: function variables must be an array');\n    }\n    const variableDefinitions = [];\n    variables.forEach(variable => {\n      if (!variable.name || !variable.type) {\n        throw new Error('function variable must have a name and type');\n      }\n      let variableDefinition = `DECLARE ${variable.name} ${variable.type}`;\n      if (variable.default) {\n        variableDefinition += ` := ${variable.default}`;\n      }\n      variableDefinition += ';';\n      variableDefinitions.push(variableDefinition);\n    });\n    return variableDefinitions.join(' ');\n  }\n\n  expandOptions(options) {\n    return options === undefined || _.isEmpty(options) ?\n      '' : options.join(' ');\n  }\n\n  decodeTriggerEventType(eventSpecifier) {\n    const EVENT_DECODER = {\n      'after': 'AFTER',\n      'before': 'BEFORE',\n      'instead_of': 'INSTEAD OF',\n      'after_constraint': 'AFTER'\n    };\n\n    if (!EVENT_DECODER[eventSpecifier]) {\n      throw new Error(`Invalid trigger event specified: ${eventSpecifier}`);\n    }\n\n    return EVENT_DECODER[eventSpecifier];\n  }\n\n  triggerEventTypeIsConstraint(eventSpecifier) {\n    return eventSpecifier === 'after_constraint' ? 'CONSTRAINT ' : '';\n  }\n\n  expandTriggerEventSpec(fireOnSpec) {\n    if (_.isEmpty(fireOnSpec)) {\n      throw new Error('no table change events specified to trigger on');\n    }\n\n    return _.map(fireOnSpec, (fireValue, fireKey) => {\n      const EVENT_MAP = {\n        'insert': 'INSERT',\n        'update': 'UPDATE',\n        'delete': 'DELETE',\n        'truncate': 'TRUNCATE'\n      };\n\n      if (!EVENT_MAP[fireValue]) {\n        throw new Error(`parseTriggerEventSpec: undefined trigger event ${fireKey}`);\n      }\n\n      let eventSpec = EVENT_MAP[fireValue];\n      if (eventSpec === 'UPDATE') {\n        if (Array.isArray(fireValue) && fireValue.length > 0) {\n          eventSpec += ` OF ${fireValue.join(', ')}`;\n        }\n      }\n\n      return eventSpec;\n    }).join(' OR ');\n  }\n\n  pgEnumName(tableName, attr, options) {\n    options = options || {};\n\n    const tableDetails = this.extractTableDetails(tableName, options);\n    let enumName = Utils.addTicks(Utils.generateEnumName(tableDetails.tableName, attr), '\"');\n\n    // pgListEnums requires the enum name only, without the schema\n    if (options.schema !== false && tableDetails.schema) {\n      enumName = this.quoteIdentifier(tableDetails.schema) + tableDetails.delimiter + enumName;\n    }\n\n    return enumName;\n  }\n\n  pgListEnums(tableName, attrName, options) {\n    let enumName = '';\n    const tableDetails = this.extractTableDetails(tableName, options);\n\n    if (tableDetails.tableName && attrName) {\n      enumName = ` AND t.typname=${this.pgEnumName(tableDetails.tableName, attrName, { schema: false }).replace(/\"/g, \"'\")}`;\n    }\n\n    return 'SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t ' +\n      'JOIN pg_enum e ON t.oid = e.enumtypid ' +\n      'JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace ' +\n      `WHERE n.nspname = '${tableDetails.schema}'${enumName} GROUP BY 1`;\n  }\n\n  pgEnum(tableName, attr, dataType, options) {\n    const enumName = this.pgEnumName(tableName, attr, options);\n    let values;\n\n    if (dataType.values) {\n      values = `ENUM(${dataType.values.map(value => this.escape(value)).join(', ')})`;\n    } else {\n      values = dataType.toString().match(/^ENUM\\(.+\\)/)[0];\n    }\n\n    let sql = `CREATE TYPE ${enumName} AS ${values};`;\n    if (!!options && options.force === true) {\n      sql = this.pgEnumDrop(tableName, attr) + sql;\n    }\n    return sql;\n  }\n\n  pgEnumAdd(tableName, attr, value, options) {\n    const enumName = this.pgEnumName(tableName, attr);\n    let sql = `ALTER TYPE ${enumName} ADD VALUE `;\n\n    if (semver.gte(this.sequelize.options.databaseVersion, '9.3.0')) {\n      sql += 'IF NOT EXISTS ';\n    }\n    sql += this.escape(value);\n\n    if (options.before) {\n      sql += ` BEFORE ${this.escape(options.before)}`;\n    } else if (options.after) {\n      sql += ` AFTER ${this.escape(options.after)}`;\n    }\n\n    return sql;\n  }\n\n  pgEnumDrop(tableName, attr, enumName) {\n    enumName = enumName || this.pgEnumName(tableName, attr);\n    return `DROP TYPE IF EXISTS ${enumName}; `;\n  }\n\n  fromArray(text) {\n    text = text.replace(/^{/, '').replace(/}$/, '');\n    let matches = text.match(/(\"(?:\\\\.|[^\"\\\\\\\\])*\"|[^,]*)(?:\\s*,\\s*|\\s*$)/ig);\n\n    if (matches.length < 1) {\n      return [];\n    }\n\n    matches = matches.map(m => m.replace(/\",$/, '').replace(/,$/, '').replace(/(^\"|\"$)/g, ''));\n\n    return matches.slice(0, -1);\n  }\n\n  dataTypeMapping(tableName, attr, dataType) {\n    if (dataType.includes('PRIMARY KEY')) {\n      dataType = dataType.replace('PRIMARY KEY', '');\n    }\n\n    if (dataType.includes('SERIAL')) {\n      if (dataType.includes('BIGINT')) {\n        dataType = dataType.replace('SERIAL', 'BIGSERIAL');\n        dataType = dataType.replace('BIGINT', '');\n      } else if (dataType.includes('SMALLINT')) {\n        dataType = dataType.replace('SERIAL', 'SMALLSERIAL');\n        dataType = dataType.replace('SMALLINT', '');\n      } else {\n        dataType = dataType.replace('INTEGER', '');\n      }\n      dataType = dataType.replace('NOT NULL', '');\n    }\n\n    if (dataType.startsWith('ENUM(')) {\n      dataType = dataType.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attr));\n    }\n\n    return dataType;\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(tableName) {\n    return 'SELECT conname as constraint_name, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM pg_catalog.pg_constraint r ' +\n      `WHERE r.conrelid = (SELECT oid FROM pg_class WHERE relname = '${tableName}' LIMIT 1) AND r.contype = 'f' ORDER BY 1;`;\n  }\n\n  /**\n   * Generate common SQL prefix for getForeignKeyReferencesQuery.\n   *\n   * @returns {string}\n   */\n  _getForeignKeyReferencesQueryPrefix() {\n    return 'SELECT ' +\n      'DISTINCT tc.constraint_name as constraint_name, ' +\n      'tc.constraint_schema as constraint_schema, ' +\n      'tc.constraint_catalog as constraint_catalog, ' +\n      'tc.table_name as table_name,' +\n      'tc.table_schema as table_schema,' +\n      'tc.table_catalog as table_catalog,' +\n      'kcu.column_name as column_name,' +\n      'ccu.table_schema  AS referenced_table_schema,' +\n      'ccu.table_catalog  AS referenced_table_catalog,' +\n      'ccu.table_name  AS referenced_table_name,' +\n      'ccu.column_name AS referenced_column_name ' +\n      'FROM information_schema.table_constraints AS tc ' +\n      'JOIN information_schema.key_column_usage AS kcu ' +\n      'ON tc.constraint_name = kcu.constraint_name ' +\n      'JOIN information_schema.constraint_column_usage AS ccu ' +\n      'ON ccu.constraint_name = tc.constraint_name ';\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys details of a table.\n   *\n   * As for getForeignKeysQuery is not compatible with getForeignKeyReferencesQuery, so add a new function.\n   *\n   * @param {string} tableName\n   * @param {string} catalogName\n   * @param {string} schemaName\n   */\n  getForeignKeyReferencesQuery(tableName, catalogName, schemaName) {\n    return `${this._getForeignKeyReferencesQueryPrefix()\n    }WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = '${tableName}'${\n      catalogName ? ` AND tc.table_catalog = '${catalogName}'` : ''\n    }${schemaName ? ` AND tc.table_schema = '${schemaName}'` : ''}`;\n  }\n\n  getForeignKeyReferenceQuery(table, columnName) {\n    const tableName = table.tableName || table;\n    const schema = table.schema;\n    return `${this._getForeignKeyReferencesQueryPrefix()\n    }WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name='${tableName}' AND  kcu.column_name = '${columnName}'${\n      schema ? ` AND tc.table_schema = '${schema}'` : ''}`;\n  }\n\n  /**\n   * Generates an SQL query that removes a foreign key from a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @param  {string} foreignKey The name of the foreign key constraint.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return `ALTER TABLE ${this.quoteTable(tableName)} DROP CONSTRAINT ${this.quoteIdentifier(foreignKey)};`;\n  }\n}\n\nmodule.exports = PostgresQueryGenerator;\n"],
  "mappings": "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",
  "names": []
}
